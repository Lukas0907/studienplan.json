[
    {
        "module": [
            {
                "ects": "8,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen Studierende Folgendes beschreiben:\n\u2022   fundamentale Algorithmen und Datenstrukturen,\n\u2022   Methoden zur Bewertung und Analyse von Algorithmen, und\n\u2022   eine systematische Vorgehensweise zur Entwicklung von Algorithmen.\nKognitive und praktische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen\ndie Studierenden:\n\u2022   abstrakt und effizienzorientiert an die Entwicklung von Algorithmen herangehen,\n\u2022   theoretisch fundierte Methoden zur Analyse von Algorithmen benutzen, und\n\u2022   ihre Kenntnisse von fundamentalen Algorithmen und Datenstrukturen anwenden.\nSoziale Kompetenzen und Selbstkompetenzen: Nach positiver Absolvierung des Moduls\nk\u00f6nnen die Studierenden:\n\u2022   selbstorganisiert und eigenverantwortlich effiziente L\u00f6sungsans\u00e4tze entwickeln und\n\u2022   die eigenen L\u00f6sungsans\u00e4tze pr\u00e4sentieren.\nInhalt:\n\u2022   Fundamentale Prinzipien der Algorithmenanalyse\n\u2022   Asymptotische Schranken f\u00fcr Laufzeit und Speicherplatzbedarf\n\u2022   Fundamentale Datenstrukturen (z.B. Listen, Graphen, Suchb\u00e4ume)\n\u2022   Fundamentale algorithmische Prinzipien (z.B. Greedy, Divide-and-Conquer,\nBranch-and-Bound, Approximation, Dynamische Programmierung, Lokale Suche,\nHashing)\n\u2022   Probleml\u00f6sungsstrategien und Optimierung\n\u2022   Handhabbarkeit, Polynomialzeitreduktionen, NP-Vollst\u00e4ndigkeit\nErwartete Vorkenntnisse: Inhalte der LVA Einf\u00fchrung in die Programmierung 1 sowie\nfundierte Mathematik-Kenntnisse auf AHS/BHS-Maturaniveau.\nVerpflichtende Voraussetzungen: Keine.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Inhalte werden in Vortr\u00e4gen vorgestellt und in begleitenden \u00dcbungen von Studierenden\nerarbeitet. \u00dcbungsaufgaben bestehen vorwiegend aus Aufgaben die schriftlich ausgearbeitet werden. Sie werden \u00f6rtlich ungebunden innerhalb vorgegebener Fristen gel\u00f6st, die\nL\u00f6sungen werden in \u00dcbungsgruppen vorgestellt. Die Beurteilung erfolgt auf Basis mehrerer schriftlicher Tests und der kontinuierlich in den \u00dcbungen erbrachten Leistungen.",
                "lvas": [
                    {
                        "ects": "8,0",
                        "lva_typ": "VU",
                        "name": "Algorithmen und Datenstrukturen",
                        "not_steop_constrained": true,
                        "semester": "2. Semester (SS)",
                        "sst": "5,5"
                    }
                ],
                "name": "Algorithmen und Datenstrukturen",
                "wahl": false
            },
            {
                "ects": "9,5",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen die Studierenden Folgendes beschreiben:\n\u2022   systematische Vorgehensweisen bei der Programmierung (einschlie\u00dflich Erstellen,\nNachvollziehen, Debuggen, Modifizieren und Dokumentieren von Programmen),\n\u2022   wichtige Konzepte einer aktuellen alltagstauglichen Programmiersprache,\n\u2022   ausgew\u00e4hlte Algorithmen, Datenstrukturen und Datenabstraktionen,\n\u2022   h\u00e4ufige Fehlerquellen und Techniken zur Qualit\u00e4tssicherung.\nKognitive und praktische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen\ndie Studierenden\n\u2022   Inhalte nat\u00fcrlichsprachiger Programmieraufgaben in ausf\u00fchrbare Programme umsetzen,\n\u2022   Vorgehensweisen und Werkzeuge beim Programmieren systematisch anwenden,\n\u2022   beschriebene Datenabstraktionen, Algorithmen und Datenstrukturen implementieren,\n\u2022   einfache Ma\u00dfnahmen zur Verbesserung der Qualit\u00e4t von Programmen anwenden.\nSoziale Kompetenzen und Selbstkompetenzen: Nach positiver Absolvierung des Moduls\nk\u00f6nnen die Studierenden\n\u2022   Programmieraufgaben selbst\u00e4ndig l\u00f6sen sowie in Zweierteams zusammenarbeiten,\n\u2022   Programmeigenschaften kommunizieren.\nInhalt:\n\u2022   Prozedurale Programmierkonzepte (Variablen, Datentypen, Operatoren, Verzweigungen, Schleifen, Arrays, Unterprogramme)\n\u2022   Fundamentale Entwicklungsmethoden (prozedurale Abstraktion, dynamisches und\nstatisches Programmverstehen, Pr\u00fcfen auf Korrektheit, Debugging) und Programmierwerkzeuge einschlie\u00dflich einer Programmierumgebung\n\u2022   Rekursion\n\u2022   Ein- und Ausgabe mit \u00dcberpr\u00fcfung von Eingaben\n\u2022   Datenabstraktion\n\u2022   Implementierung und wesentliche Eigenschaften rekursiver Datenstrukturen (Listen und B\u00e4ume)\n\u2022   Grundlegende Algorithmen (Einf\u00fcgen, L\u00f6schen, Suchen, Sortieren, Vergleichen,\nKonvertieren) f\u00fcr verschiedene Datenstrukturen\n\u2022   Abstraktion \u00fcber Datenstrukturen mit vergleichbaren Zugriffsfunktionen\n\u2022   Exception-Handling\n\u2022   Einfache Testmethoden und Code-Review\n\u2022   Ans\u00e4tze zur Programmoptimierung\n\u2022   Programmierstile und Programmdokumentation\nErwartete Vorkenntnisse: Keine.\nVerpflichtende Voraussetzungen: Keine.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Inhalte werden in Vortr\u00e4gen vorgestellt und in begleitenden \u00dcbungen von Studierenden\nerarbeitet. \u00dcbungsaufgaben sind vorwiegend Programmieraufgaben. Sie werden zu einem\nTeil \u00f6rtlich ungebunden (f\u00fcr einige Aufgaben in Zweierteams) innerhalb vorgegebener\nFristen, zum anderen Teil unter kontrollierten Bedingungen selbst\u00e4ndig gel\u00f6st. Die Beurteilung erfolgt auf Basis schriftlicher Tests und kontinuierlich in \u00dcbungen erbrachter\nLeistungen.",
                "lvas": [
                    {
                        "ects": "5,5",
                        "lva_typ": "VU",
                        "name": "Einf\u00fchrung in die Programmierung 1",
                        "not_steop_constrained": true,
                        "semester": "1. Semester (WS)",
                        "sst": "4,0"
                    },
                    {
                        "ects": "4,0",
                        "lva_typ": "VU",
                        "name": "Einf\u00fchrung in die Programmierung 2",
                        "not_steop_constrained": true,
                        "semester": "2. Semester (SS)",
                        "sst": "3,0"
                    }
                ],
                "name": "Einf\u00fchrung in die Programmierung",
                "wahl": false
            },
            {
                "ects": "6,0",
                "lernergebnisse": "Das Modul vermittelt Pr\u00e4misse und Ziele des parallelen Rechnens und\ngibt Einblicke in die Leistungsbewertung und -analyse von parallelen Algorithmen und\nVerfahren. Vermittelt werden allgemeine algorithmische Techniken zur Parallelisierung,\ngrundlegende Eigenschaften paralleler Rechnerarchitekturen und elementare F\u00e4higkeiten\ndes parallelen Programmierens anhand konkreter Programmiermodelle, Programmiersprachen und -schnittstellen.\nFachliche und methodische Kompetenzen: Studierende erwerben fundierte Kenntnisse\ndes parallelen Rechnens, insbesondere der Leistungsbewertung eines parallelen Algorithmus und dessen Implementierung. Studierende erwerben Kenntnisse von Schnittstellen\nund Sprachen zur Implementierung von parallelen Algorithmen, sowie deren Zusammenspiel auf unterschiedlichen Parallelrechnerarchitekturen, einschlie\u00dflich einiger etablierter\nSchnittstellen, wie z.B. OpenMP, Cilk und MPI (das \"Message-Passing Interface\"). Studierende erwerben einf\u00fchrende Kenntnisse in grundlegende algorithmische Werkzeuge\nund die Grenzen der Parallelisierbarkeit werden er\u00f6rtert.\nKognitive und praktische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen\nStudierende selbst\u00e4ndig\n\u2022   angeben, wie die Leistung eines parallelen Algorithmus theoretisch und praktisch\nzu beurteilen ist,\n\u2022   anhand vorgegebener Algorithmen und Implementierungen beurteilen, inwieweit\ndiese effizient parallelisiert worden sind oder werden k\u00f6nnen,\n\u2022   anhand von Problembeschreibungen und existierenden sequentiellen Algorithmen,\nparallele L\u00f6sungsans\u00e4tze angeben, und eventuelle Grenzen dieser Ans\u00e4tze angeben,\n\u2022   einfache parallele Algorithmen selber f\u00fcr eine daf\u00fcr geeignete Schnittstelle entwerfen und hierbei unterschiedliche Parallelisierungskonzepte, Schnittstellen und\nSprachen ber\u00fccksichtigen,\n\u2022   entwickelte Algorithmen mit Hilfe einer Schnittstelle korrekt implementieren und\nzur Lauff\u00e4higkeit bringen,\n\u2022   mittels Experimenten und Messungen die G\u00fcte der Umsetzung beurteilen.\nSoziale Kompetenzen und Selbstkompetenzen: Studierenden lernen, algorithmische Probleme zu formulieren und Ans\u00e4tze der Parallelisierung zu entwickeln und diese selbst\u00e4ndig (oder in kleineren Gruppen) korrekt zu beschreiben.\nInhalt:\n\u2022   Asymptotische Komplexit\u00e4t, Speed-up, Effizienz, Amdahlsches Gesetz.\n\u2022   Parallelrechnerarchitekturen mit gemeinsamen und verteilten Speicher ( \"shared\nand distributed memory\"), Hochleistungsrechensysteme.\n\u2022   Algorithmische Muster und Probleme wie z.B. Schablone ( \"Stencil\"), Pr\u00e4fixsumme,\nMischen, Sortieren, und allgemeine Ans\u00e4tze zur Parallelisierung.\n\u2022   Theoretische und experimentelle Leistungsanalyse und -beurteilung.\n\u2022   Datenaustausch und Kommunikationsprobleme, kollektive Kommunikationsoperationen.\n\u2022   Synchronisationsprobleme und Vermeiden von Synchronisation.\n\u2022   Einfache untere und obere Schranken f\u00fcr wichtige Kommunikationsprobleme.\n\u2022   Modelle der Parallelit\u00e4t wie \"Threads\", Prozesse, Aufgaben ( \"Tasks\").\n\u2022   Unterscheidung zwischen Daten- und Aufgaben-Parallelit\u00e4t.\n\u2022   Die Schnittstelle und Spracherweiterung OpenMP.\n\u2022   Die Spracherweiterung Cilk.\n\u2022   Die Schnittstelle MPI.\n\u2022   Weitere Schnittstellen und Sprachen f\u00fcr das parallele Programmieren.\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen: Grundlegende Kenntnisse in Algorithmen\nund Datenstrukturen, Rechnerarchitekturen, Programmiersprachen und Betriebssysteme werden erwartet und zum Teil vorausgesetzt.\nKognitive und praktische Kompetenzen: Programmierung in C oder \u00e4hnlicher Sprache.\nGrundlegende Methoden der Software-Entwicklung. Einfache asymptotische Laufzeitanalyse von Algorithmen und Datenstrukturen.\nSoziale Kompetenzen und Selbstkompetenzen: Es wird erwartet, dass Studierende vor\nAbsolvierung des Moduls\n\u2022   Programmieraufgaben selbst\u00e4ndig l\u00f6sen und\n\u2022   in Zweierteams zusammenarbeiten k\u00f6nnen.\nDieses Modul baut auf den Kenntnissen und Fertigkeiten folgender Module auf: Algorithmen und Datenstrukturen, Einf\u00fchrung in die Programmierung, Betriebssysteme,\nTechnische Grundlagen der Informatik\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Die\nInhalte werden durch obligatorische Vorlesungen vermittelt, welche durch einen Foliensatz und begleitende Literatur unterst\u00fctzt werden. Die Projekte sind kleinere Programmieraufgaben, in denen vorgegebene Probleme in mehreren der vorgestellten Schnittstellen implementiert sowie theoretisch und praktisch analysiert werden sollen. Vorgaben\nf\u00fcr die L\u00f6sungen sowie zur Art und Form der Abgabe werden gegeben. Abgabefristen\nwerden ebenfalls vorgegeben und sind bindend. F\u00fcr die experimentelle Auswertung wird\nder Zugriff auf Parallelrechner gew\u00e4hrleistet. Die Beurteilung erfolgt anhand der abgegebenen schriftliche Projektl\u00f6sungen, sowie einer m\u00fcndliche oder auch schriftlichen\nPr\u00fcfung.",
                "lvas": [
                    {
                        "ects": "6,0",
                        "lva_typ": "VU",
                        "name": "Parallel Computing",
                        "not_steop_constrained": false,
                        "semester": "4. Semester (SS)",
                        "sst": "4,0"
                    }
                ],
                "name": "Einf\u00fchrung in paralleles Rechnen (Parallel Computing)",
                "wahl": false
            },
            {
                "ects": "6,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen die Studierenden die als Modulinhalt angef\u00fchrten Konzepte und Techniken mit\nfachspezifischer Terminologie beschreiben.\nKognitive und praktische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen\ndie Studierenden\n\u2022   die als Modulinhalt angef\u00fchrten Techniken anwenden,\n\u2022   in nat\u00fcrlicher Sprache (unvollst\u00e4ndig) beschriebene Programmieraufgaben in ausf\u00fchrbare Programme umsetzen, die typische Merkmale vorgegebener Programmierstile aufweisen,\n\u2022   eigene (eventuell auch fremde) Programme nach vorgegebenen Kriterien kritisch\nbeurteilen.\nSoziale Kompetenzen und Selbstkompetenzen: Nach positiver Absolvierung des Moduls\nk\u00f6nnen die Studierenden Programmieraufgaben auch im Team l\u00f6sen.\nInhalt:\n\u2022   Typische Konzepte objektorientierter und funktionaler Programmiersprachen\n\u2022   Sprachkonzepte f\u00fcr die Modularisierung, Ersetzbarkeit, Wiederverwendung, Parametrisierung (einschlie\u00dflich Generizit\u00e4t), rekursive und applikative Programmierung, \u00dcberladung, Nebenl\u00e4ufigkeit, Eager- und Lazy-Evaluation, sowie den statischen und dynamischen Umgang mit Typen\n\u2022   Techniken zur produktiven Verwendung dieser Konzepte entsprechend der Paradigmen\n\u2022   Ausgew\u00e4hlte Entwurfsmuster\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen: Es wird erwartet, dass Studierende vor Absolvierung des Moduls\n\u2022   systematische Vorgehensweisen beim Programmieren und\n\u2022   wichtige Konzepte einer aktuellen alltagstauglichen Programmiersprache\nbeschreiben k\u00f6nnen.\nKognitive und praktische Kompetenzen: Es wird erwartet, dass Studierende vor Absolvierung des Moduls\n\u2022   Inhalte nat\u00fcrlichsprachiger Programmieraufgaben in ausf\u00fchrbare Programme umsetzen,\n\u2022   Vorgehensweisen und Werkzeuge beim Programmieren systematisch anwenden,\n\u2022   beschriebene Datenabstraktionen, Algorithmen und Datenstrukturen implementieren und\n\u2022   Techniken der objektorientierten Modellierung anwenden k\u00f6nnen.\nSoziale Kompetenzen und Selbstkompetenzen: Es wird erwartet, dass Studierende vor\nAbsolvierung des Moduls\n\u2022   Programmieraufgaben selbst\u00e4ndig l\u00f6sen und\n\u2022   in Zweierteams zusammenarbeiten k\u00f6nnen.\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Inhalte werden in Vortr\u00e4gen vorgestellt und in begleitenden \u00dcbungen von Studierenden\nerarbeitet. \u00dcbungsaufgaben sind vorwiegend Programmieraufgaben, die innerhalb vorgegebener Fristen teilweise in Teams zu l\u00f6sen sind. Die Beurteilung erfolgt auf Basis einer\nkontinuierlichen \u00dcberpr\u00fcfung der L\u00f6sungen dieser Aufgaben sowie durch Pr\u00fcfung(en)\nbzw. Test(s).",
                "lvas": [
                    {
                        "ects": "3,0",
                        "lva_typ": "VU",
                        "name": "Objektorientierte Programmiertechniken",
                        "not_steop_constrained": false,
                        "semester": "3. Semester (WS)",
                        "sst": "2,0"
                    },
                    {
                        "ects": "3,0",
                        "lva_typ": "VU",
                        "name": "Funktionale Programmierung",
                        "not_steop_constrained": false,
                        "semester": "3. Semester (WS)",
                        "sst": "2,0"
                    }
                ],
                "name": "Programmierparadigmen",
                "wahl": false
            },
            {
                "ects": "6,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen die Studierenden unterschiedliche Werkzeuge, Sprachen und logikorienterte Programmiermethoden zum deklarativen Probleml\u00f6sen benennen und erl\u00e4utern, sowie theoretische Zusammenh\u00e4nge korrekt argumentieren.\nKognitive und praktische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen\ndie Studierenden\n\u2022   die eingesetzten Techniken und Methoden formal analysieren,\n\u2022   Methoden und Techniken f\u00fcr eine vorgegebene Aufgabenstellung zielgerichtet ausw\u00e4hlen, sowie\n\u2022   L\u00f6sungen und Formalismen kritisch bewerten.\nSoziale Kompetenzen und Selbstkompetenzen: Nach positiver Absolvierung des Moduls\nk\u00f6nnen die Studierenden erarbeitete L\u00f6sungen kommunizieren.\nInhalt:\n\u2022   Grundlagen moderner Entscheidungsprozeduren f\u00fcr die Erf\u00fcllbarkeit aussagenlogischer und quantifizierter aussagenlogischer Formeln (SAT und QSAT Solver)\n\u2022   Normalformtransformationen\n\u2022   Probleml\u00f6sen mittels SAT und QSAT Solver\n\u2022   Systeme und Semantiken der Logikprogrammierung\n\u2022   Eigenschaften der Antwortmengenprogrammierung\n\u2022   Praktische Anwendungen der Antwortmengenprogrammierung zur L\u00f6sung computationaler Probleme\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen: Es wird erwartet, dass die Studierenden vor der\nAbsolvierung des Moduls die wesentlichen Konzepte der Aussagen- und Pr\u00e4dikatenlogik\nerster Stufe benennen und beschreiben k\u00f6nnen.\nKognitive und praktische Kompetenzen: Es wird erwartet, dass die Studierenden vor der\nAbsolvierung des Moduls\n\u2022   Deduktionskonzepte und Beweisprinzipien zur Erstellung eigener Beweise korrekt\nanwenden,\n\u2022   die Korrektheit der einzelnen Beweisschritte formal argumentieren, sowie\n\u2022   vorgegebene Problemstellungen algorithmisch umsetzen k\u00f6nnen.\nSoziale Kompetenzen und Selbstkompetenzen: Keine speziellen Voraussetzungen.\nDiese Voraussetzungen werden in folgenden Modulen vermittelt: Algebra und Diskrete\nMathematik, Algorithmen und Datenstrukturen, Modellierung, Theoretische Informatik\nund Logik, Grundlagen intelligenter Systeme.\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Die\nLehrveranstaltungen des Moduls bestehen aus einer Vorlesung und einer begleitenden\n\u00dcbung. Die Vorlesung dient zur Vermittlung der theoretischen Grundlagen des besprochenen Fachgebietes (Frontalvortrag) w\u00e4hrend in der \u00dcbung die Teilnehmer in selbst\u00e4ndiger Weise L\u00f6sungen zu konkreten Aufgabenstellungen erarbeiten. Die Beurteilung der\nVorlesung erfolgt auf Basis von Pr\u00fcfungen (schriftlich und/oder m\u00fcndlich) und die Beurteilung der \u00dcbung anhand der abgegebenen L\u00f6sungen der Aufgabenstellungen sowie\nmittels Abgabegespr\u00e4chen.",
                "lvas": [
                    {
                        "ects": "3,0",
                        "lva_typ": "VO",
                        "name": "Deklaratives Probleml\u00f6sen",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    },
                    {
                        "ects": "3,0",
                        "lva_typ": "UE",
                        "name": "Deklaratives Probleml\u00f6sen",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    }
                ],
                "name": "Deklaratives Probleml\u00f6sen",
                "wahl": true
            },
            {
                "ects": "6,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Nach Absolvierung dieses Moduls k\u00f6nnen Studierende die folgenden Bereiche anwenden:\n\u2022   Monotoner Teil der Programmiersprache Prolog\n\u2022   Constraintsprachen, insbesondere CLP(FD)\n\u2022   Spezifikationsorientierte Programmierung\n\u2022   Deklarative Diagnose\nKognitive und praktische Kompetenzen: Durch das praktische Arbeiten mit einer logikorientierten Programmiersprache beherrschen Absolventen die folgenden Fertigkeiten:\n\u2022   Deklaratives Modellieren, relationale Sichtweise\n\u2022   Praktische Programmierkenntnisse in einer logikorientierten Programmiersprache\n\u2022   Anwendung deklarativer Lesarten zur Fehlersuche\n\u2022   Verbindung und Abw\u00e4gung von deklarativen und prozeduralen Sichtweisen\nSoziale Kompetenzen und Selbstkompetenzen:\n\u2022   Der \u00dcbungsbetrieb f\u00f6rdert das selbst\u00e4ndige Arbeiten in Eigenverantwortlichkeit\n\u2022   Mittels des logikorienten Programmierparadigmas wird eine neue Sichtweise des\nProgrammierens erm\u00f6glicht\n\u2022   Zusammenarbeit, insbesonders bei Anwendung der Lesarten\nInhalt:\n\u2022   Deklarative Programmierparadigmen\n\u2022   Deklarative Lesarten\n\u2022   Deklarative Diagnose\n\u2022   Prozedurale Lesarten\n\u2022   Termination\n\u2022   Grammatiken\n\u2022   Constraints\n\u2022   Programmieren h\u00f6herer Ordnung\n\u2022   Lambda-Ausdr\u00fccke\n\u2022   Pure I/O\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Der\nVorlesungteil wird parallel zum \u00dcbungsteil abgehalten, sodass auch die konkrete Vorgangsweise beim Programmieren und der deklarativen Fehlersuche behandelt werden\nkann. Der \u00dcbungsteil besteht aus vielen kleinen Beispielen. Die Leistungsbeurteilung\nbesteht aus einer pr\u00fcfungsimmanenten Beurteilung der Programmiert\u00e4tigkeit und einem m\u00fcndlichen Abgabegespr\u00e4ch. Inhalt des Abgabegespr\u00e4chs sind die Lesarten von\nLogikprogrammen anhand konkreter Beispiele sowie deren Anwendung zur Fehlersuche.",
                "lvas": [
                    {
                        "ects": "6,0",
                        "lva_typ": "VU",
                        "name": "Logikprogrammierung und Constraints",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "4,0"
                    }
                ],
                "name": "Logikprogrammierung und Constraints",
                "wahl": true
            }
        ],
        "name": "Algorithmen und Programmierung"
    },
    {
        "module": [
            {
                "ects": "6,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen die Studierenden:\n\u2022   die Rolle und Aufgaben von Betriebssystemen erkl\u00e4ren,\n\u2022   Designentscheidungen f\u00fcr Managementmechanismen von Systemressourcen diskutieren bzw. aus gegebenen Anforderungen ableiten,\n\u2022   Mechanismen zur Koordination und Synchronisation paralleler Prozesse verstehen\nund Koordinations- und Synchronisationsaufgaben mit diesen Mechanismen l\u00f6sen,\n\u2022   Prinzipien und Mechanismen des Zugriffsschutzes beschreiben.\nKognitive und praktische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen\ndie Studierenden:\n\u2022   Programmieraufgaben unter Verwendung von Betriebssystemen und Betriebssystemservices l\u00f6sen,\n\u2022   gemeinsame Ressourcen und Kommunikations- sowie Synchronisationsmechanismen eines Betriebssystems zur Programmierung paralleler Prozesse verwenden.\nSoziale Kompetenzen und Selbstkompetenzen: Nach positiver Absolvierung des Moduls\nk\u00f6nnen die Studierenden:\n\u2022   Entwicklungen von Betriebssystemtechnologien diskutieren und bewerten,\n\u2022   Abstraktionen ableiten,\n\u2022   Probleme des Ressourcenmanagements und Synchronisationsaufgaben l\u00f6sen.\nInhalt:\n\u2022   Grundkonzepte Betriebssysteme\n\u2022   Prozesse, Threads und Scheduling\n\u2022   Prozesssynchronisation und Deadlock\n\u2022   Speicherverwaltung\n\u2022   Ein/Ausgabe und Disk Management\n\u2022   Security und Protection\n\u2022   Arbeiten mit Betriebssystemen\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen: Kenntnisse von Zahlendarstellungen in Computern, der grundlegenden Funktionsweise von Computern, endlicher Automaten, Transducer, Grammatiken, Programmiersprachen, sowie Kenntnisse der systematischen Vorgehensweise bei der Programmerstellung.\nKognitive und praktische Kompetenzen: Interpretieren und Arbeiten mit Zahlendarstellungen und Automaten. Kenntnisse der Programmierung in einer Programmiersprache\nund der systematischen Programmerstellung und Evaluation.\nSoziale Kompetenzen und Selbstkompetenzen: Analyse komplexer Zusammenh\u00e4nge und\nWechselwirkungen, Strukturieren und Entwerfen von modularen, interagierenden Systemen.\nDiese Voraussetzungen werden in folgenden Modulen vermittelt: Einf\u00fchrung in die Programmierung, Technische Grundlagen der Informatik.\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Das\nModul setzt sich aus einem Vorlesungsteil und einer Labor\u00fcbung zusammen. Die Grundlagen, zentralen Konzepte und theoretischen Inhalte zu Betriebsystemen werden im Vorlesungsteil pr\u00e4sentiert. Ausgew\u00e4hlte Inhalte und Problemstellungen aus dem Bereich\nder Betriebssystemprogrammierung werden in der Labor\u00fcbung unter UNIX (Linux) programmiert. Einf\u00fchrungswissen zu den zu l\u00f6senden Aufgabenstellungen wird in begleitenden Vortragsbl\u00f6cken angeboten. Schwerpunkte der Labor\u00fcbung sind:\n\u2022   Arbeiten unter Unix/Linux: Shell, Prozesse, Signale, Filesystem\n\u2022   Programmieren mit der Systemprogrammiersprache C, Debugging\n\u2022   Systemprogrammierung mit folgenden Mechanismen\n\u2013   Parameter und Optionsbehandlung, Filebehandlung\n\u2013   Sockets\n\u2013   Signale und Signalbehandlung\n\u2013   verwandte Prozesse (fork, exec, wait)\n\u2013   Kommunikationsmechanismen: Named und Unnamed Pipes, Message Queues\n\u2013   Synchronisation mit Semaphoren bzw. Sequencer und Eventcounts\n\u2013   Kommunikation \u00fcber Shared Memory\n\u2013   Ressourcenverwaltung",
                "lvas": [
                    {
                        "ects": "2,0",
                        "lva_typ": "VO",
                        "name": "Betriebssysteme",
                        "not_steop_constrained": false,
                        "semester": "3. Semester (WS)",
                        "sst": "2,0"
                    },
                    {
                        "ects": "4,0",
                        "lva_typ": "UE",
                        "name": "Betriebssysteme",
                        "not_steop_constrained": false,
                        "semester": "3. Semester (WS)",
                        "sst": "2,0"
                    }
                ],
                "name": "Betriebssysteme",
                "wahl": false
            },
            {
                "ects": "6,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Nach positiver Absolvierung des Moduls verstehen Studierende die grundlegende Techniken der wichtigsten Visual Computing Bereiche\nund haben ein kritisches Verst\u00e4ndnis ihrer Theorien und Grunds\u00e4tze erworben:\n\u2022   Computergraphik,\n\u2022   Computer Vision,\n\u2022   Digitale Bildverarbeitung,\n\u2022   Visualisierung,\n\u2022   Geometrische Modellierung.\nKognitive und praktische Kompetenzen: Durch die praktische Auseinandersetzung mit\naktuellen Technologien, Methoden und Werkzeugen (wie modernen Programmiersprachen und Entwicklungsumgebungen) k\u00f6nnen Studierende nach positivem Abschluss des\nModuls:\n\u2022   formale Grundlagen und Methoden zur Modellbildung, L\u00f6sungsfindung und Evaluation einsetzen,\n\u2022   an einschl\u00e4gige Probleme methodisch fundiert herangehen, insbesondere in offenen/unspezifizierten Problemsituationen,\n\u2022   Standard-Entwurfs- und Implementierungsstrategien anwenden.\nSoziale Kompetenzen und Selbstkompetenzen: Ein Schwerpunkt liegt in der besonderen\nF\u00f6rderung hoher Kreativit\u00e4ts- und Innovationspotentiale. Studierende werden geschult\nin\n\u2022   Eigeninitiative und Neugierde,\n\u2022   Selbstorganisation, Eigenverantwortlichkeit,\n\u2022   Problemformulierungs- und Probleml\u00f6sungskompetenz,\n\u2022   Kenntnisse der eigenen F\u00e4higkeiten und Grenzen, Kritikf\u00e4higkeit.\nInhalt:\n\u2022   Digitale Bilder: Aufl\u00f6sung, Abtastung, Quantisierung, Farbrepr\u00e4sentation\n\u2022   Bildoperationen: Punktoperationen, lokale und globale Operationen\n\u2022   Segmentierung\n\u2022   Bewegungserkennung\n\u2022   Repr\u00e4sentation: konturbasiert, regionenbasiert (Momente, Graphen)\n\u2022   Kodierung: Entropie-Kodierung, Source-Kodierung\n\u2022   Komprimierung: Prediktive Kodierung, Vektorquantisierung, JPEG, MPEG\n\u2022   Hardware: Ein- und Ausgabeger\u00e4te, Bildgebende Verfahren, Sensoren\n\u2022   Radiometrische und Geometrische Transformationen\n\u2022   Graphikprimitive und deren Attribute\n\u2022   2D- und 3D-Viewing, Graphikarchitektur (Rendering Pipeline, etc)\n\u2022   Sichtbarkeitsverfahren\n\u2022   3D Objektrepr\u00e4sentationen\n\u2022   Kurven und Fl\u00e4chen\n\u2022   Licht und Schattierung\n\u2022   Ray-Tracing und Globale Beleuchtung\n\u2022   Texturen und andere Mappings\n\u2022   Farben und Farbmodelle\n\u2022   Computational Photography\n\u2022   Geometrische Modellierung\nErwartete Vorkenntnisse:\n\u2022   Mathematik auf Maturaniveau (Vektorrechnung, Winkelfunktionen, Differenzieren\nund Integrieren, lineare Algebra, einfache Geometrie)\n\u2022   Elementare Programmierkenntnisse\nDiese Voraussetzungen werden in folgenden Modulen vermittelt: Algebra und Diskrete\nMathematik, Einf\u00fchrung in die Programmierung\nVerpflichtende Voraussetzungen: Keine.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Vorlesung mit \u00dcbung: Angesichts der gro\u00dfen Anzahl von H\u00f6rerInnen ist das eine Vorlesung\nmit Unterst\u00fctzung durch Medien (haupts\u00e4chlich Datenprojektor), in die \u00dcbungsbeispiele\neingebaut sind. Es gibt ein kompaktes Skriptum, au\u00dferdem werden Kopien der Vorlesungsfolien zur Verf\u00fcgung gestellt. Die Leistungsbeurteilung erfolgt durch die erfolgreiche\nAbgabe von \u00dcbungsbeispielen und die erfolgreiche Teilnahme an zwei Tests.",
                "lvas": [
                    {
                        "ects": "6,0",
                        "lva_typ": "VU",
                        "name": "Einf\u00fchrung in Visual Computing",
                        "not_steop_constrained": true,
                        "semester": "2. Semester (SS)",
                        "sst": "5,0"
                    }
                ],
                "name": "Einf\u00fchrung in Visual Computing",
                "wahl": false
            },
            {
                "ects": "6,0",
                "lernergebnisse": "Die Studierenden verstehen den grundlegenden Aufbau und die Funktionsweise von Prozessoren und Computersystemen und k\u00f6nnen dies erkl\u00e4ren. Anhand\nvon praktischen Beispielen k\u00f6nnen sie dieses Wissen anwenden, ihren L\u00f6sungsansatz\npr\u00e4sentieren und begr\u00fcnden.\nFachliche und methodische Kompetenzen: Die Studierenden k\u00f6nnen unterschiedliche Zahlendarstellungen im Computer beschreiben, die Grundlagen der Booleschen Algebra und\nMinimierungsverfahren erl\u00e4utern, Basiswissen zu Informations- und Codierungstheorie\nwiedergeben, einfache Schaltnetze und Schaltwerke erkl\u00e4ren, und Aufbau und Funktionsweise von Prozessoren und Computersystemen darstellen.\nKognitive und praktische Kompetenzen: Die Studierenden k\u00f6nnen methodische Ans\u00e4tze\nauf konkrete Beispiele umsetzen. Sie k\u00f6nnen die Konzepte zu den pr\u00e4sentierten Inhalten\nverstehen, die zugeh\u00f6rigen Methoden und Konzepte vergleichen, evaluieren und gezielt\nanwenden. Sie k\u00f6nnen einfache digitale Systeme konstruieren und entwerfen.\nSoziale Kompetenzen und Selbstkompetenzen: Die Studierenden k\u00f6nnen Aufgaben mit\nSelbstorganisation und in Eigenverantwortlichkeit l\u00f6sen, daf\u00fcr Zeitmanagement anwenden und Deadlines einhalten.\nInhalt:\n\u2022   Darstellung von Zahlen in Computern und Grundrechnungsarten in diesen Darstellungen\n\u2022   Boole\u2019sche Algebra und Minimierungsverfahren\n\u2022   Informations- und Codierungstheorie\n\u2022   Gatterschaltungen (Addierer, Codierer, Multiplexer, ...)\n\u2022   Schaltnetze mit programmierbaren Bausteinen\n\u2022   Speicherglieder und Speicher\n\u2022   Synthese und Analyse von Schaltwerken\n\u2022   Aufbau und Funktionsweise von Prozessorelementen\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen: Es wird erwartet, dass Studierende vor Absolvierung des Moduls Mathematik auf AHS/BHS-Maturaniveau verstehen.\nKognitive und praktische Kompetenzen: Es wird erwartet, dass Studierende vor Absolvierung des Moduls diese Mathematik-Kenntnisse anwenden und geeignete Rechenwege\nausw\u00e4hlen, sowie fachliche Texte auf AHS/BHS-Maturaniveau verstehen k\u00f6nnen.\nSoziale Kompetenzen und Selbstkompetenzen: Es wird erwartet, dass Studierende vor\nAbsolvierung des Moduls grundlegendes Selbstmanagement anwenden k\u00f6nnen.\nKeine.\nVerpflichtende Voraussetzungen: Keine.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Vortr\u00e4ge und Repetitorien; Unterst\u00fctzung durch TUWEL, betreutes Forum; \u00dcbung in\nGro\u00df- und Kleingruppen zur Festigung des Lehrstoffes; Beurteilung der \u00dcbungsbeispiele;\nschriftliche Tests.",
                "lvas": [
                    {
                        "ects": "6,0",
                        "lva_typ": "VU",
                        "name": "Technische Grundlagen der Informatik",
                        "not_steop_constrained": true,
                        "semester": "1. Semester (WS)",
                        "sst": "4,0"
                    }
                ],
                "name": "Technische Grundlagen der Informatik",
                "wahl": false
            },
            {
                "ects": "6,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen:\n\u2022   Anforderungen und Designm\u00f6glichkeiten komplexer, verteilter Systeme verstehen\n\u2022   Grundlegende Methoden und Algorithmen verteilter Systeme verstehen, sowie deren Vor- und Nachteile und Einsatzm\u00f6glichkeiten kennen\n\u2022   Paradigmen und Konzepte aktueller Technologien und Werkzeuge f\u00fcr verteilte Systeme verstehen und anwenden k\u00f6nnen\n\u2022   Anwendungsgrenzen (v. a. asynchroner) verteilter Systeme kennen und verstehen\nKognitive und praktische Kompetenzen: Durch die Auseinandersetzung mit Methoden\nund Werkzeugen der Programmierung k\u00f6nnen die Studierenden\n\u2022   Methodiken zur Abstraktion anwenden,\n\u2022   methodisch fundiert an Probleme herangehen,\n\u2022   L\u00f6sungen kritisch bewerten und reflektieren und\n\u2022   Konzepte verteilter Systeme mit aktuellen Technologien in Form einfacher, verteilter Anwendungen umsetzen.\nSoziale Kompetenzen und Selbstkompetenzen: Folgende Kompetenzen werden besonders\ngef\u00f6rdert:\n\u2022   Selbstorganisation und Eigenverantwortlichkeit\n\u2022   Finden kreativer Probleml\u00f6sungen\n\u2022   Kritische Reflexion, Bewertung und Analyse technischer Alternativans\u00e4tze\nInhalt:\n\u2022   Verteilte Systeme \u2013 \u00dcbersicht, Grundlagen und Modelle\n\u2022   Prozesse und Kommunikation\n\u2022   Benennung\n\u2022   Fehlertoleranz in verteilten Systemen\n\u2022   Synchronisierung\n\u2022   Konsistenz und Replikation\n\u2022   Verteilte Dateisysteme\n\u2022   Sicherheit\n\u2022   Anwendungen und Technologietrends\nErwartete Vorkenntnisse:\nDieses Modul baut auf den Kenntnissen, Fertigkeiten und Kompetenzen folgender Module auf: Algorithmen und Datenstrukturen, Einf\u00fchrung in die Programmierung\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung:\nBlended Learning:\n\u2022   Den Studierenden wird empfohlen, vor der jeweiligen Vorlesung die auf der LVAHomepage angegebenen Kapitel des Lehrbuchs zu lesen.\n\u2022   Im Rahmen der Vorlesung wird die Theorie erl\u00e4utert und Querverbindungen hergestellt. Es besteht die M\u00f6glichkeit, komplexe Sachverhalte interaktiv (durch Fragen\nder Studierenden) zu erarbeiten.\n\u2022   Im Rahmen der parallel laufenden Labor\u00fcbungen werden ausgew\u00e4hlte Themen der\nLehrveranstaltung durch kleine Programmieraufgaben vertieft.",
                "lvas": [
                    {
                        "ects": "3,0",
                        "lva_typ": "VO",
                        "name": "Verteilte Systeme",
                        "not_steop_constrained": false,
                        "semester": "5. Semester (WS)",
                        "sst": "2,0"
                    },
                    {
                        "ects": "3,0",
                        "lva_typ": "UE",
                        "name": "Verteilte Systeme",
                        "not_steop_constrained": false,
                        "semester": "5. Semester (WS)",
                        "sst": "2,0"
                    }
                ],
                "name": "Verteilte Systeme",
                "wahl": false
            },
            {
                "ects": "6,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen die Studierenden\n\u2022   alle theoretischen Grundlagen von abstrakten Maschinen verstehen und\n\u2022   Details konkreter abstrakter Maschinen erkl\u00e4ren.\nKognitive und praktische Kompetenzen: Die Auseinandersetzung mit konkreten Beispielen von abstrakten Maschinen und die Implementierung eigener abstrakter Maschinen\nerm\u00f6glicht die Studierenden\n\u2022   die Qualit\u00e4t von abstrakten Maschinen zu beurteilen,\n\u2022   eigene abstrakte Maschinen zu entwerfen und\n\u2022   abstrakte Maschinen zu implementieren.\nSoziale Kompetenzen und Selbstkompetenzen: Eigeninitiative und Neugierde auf innovative und kreative Konzepte und L\u00f6sungsans\u00e4tze werden besonders gef\u00f6rdert.\nInhalt:\n\u2022   reale Maschinen, Prozesssorarchitekturen\n\u2022   Interpretationstechniken (threaded code), Implementierung von Forth\n\u2022   Pascal P4 Maschine\n\u2022   Java Virtuelle Machine (just-in-time \u00dcbersetzung), Microsoft Intermediate Language\n\u2022   Registermaschinen und die DalvikVM\n\u2022   syntaxgesteuerte Editoren und Baummaschinen\n\u2022   Prologmaschinen (WAM, VAM)\n\u2022   funktionale Maschinen (Lamda Kalk\u00fcl, SECD Maschine)\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen: Grundlagen von Programmiersprachen und\n\u00dcbersetzerbau\nKognitive und praktische Kompetenzen: Programmierkenntnisse\nDiese Voraussetzungen werden in folgenden Modulen vermittelt: Einf\u00fchrung in die Programmierung, Programmierparadigmen, \u00dcbersetzerbau.\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung:\n\u2022   3 ECTS Vortrag und selbst\u00e4ndiges Erlernen der eher theoretischen Grundlagen.\nDie Beurteilung erfolgt durch Pr\u00fcfung.\n\u2022   3 ECTS \u00dcbung am Computer zur Entwicklung praktischer F\u00e4higkeiten zur Entwicklung von abstrakten Maschinen. Die Leistungsbeurteilung erfolgt durch die\nBeurteilung der Implementierung einer selbst entworfenen abstrakten Maschine\nund der Pr\u00e4sentation dieser Implementierung.",
                "lvas": [
                    {
                        "ects": "3,0",
                        "lva_typ": "VO",
                        "name": "Abstrakte Maschinen",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    },
                    {
                        "ects": "3,0",
                        "lva_typ": "UE",
                        "name": "Abstrakte Maschinen",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    }
                ],
                "name": "Abstrakte Maschinen",
                "wahl": true
            },
            {
                "ects": "3,0, 7,0 oder 10,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen die Studierenden Folgendes beschreiben:\n\u2022   Gemeinsamkeiten und Unterschiede die bei der Softwareentwicklung f\u00fcr \u2018normale\u2019\nSysteme und Embedded Systems auftreten.\n\u2022   Aspekte und Probleme, die unterhalb der Abstraktion von Hochsprachen-Programmierung auftreten.\n\u2022   Herausforderungen in der Entwicklung von Systemkomponenten.\n\u2022   Die Abstraktion die hinter typischen Betriebssystem-Interfaces, wie POSIX, verborgen sind.\nKognitive und praktische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen\ndie Studierenden\n\u2022   komplexere Aufgabenstellungen analysieren,\n\u2022   Inhalte nat\u00fcrlichsprachiger Projektbeschreibungen von hardwarenahen Projekten\numsetzen,\n\u2022   Vorgehensweisen und Werkzeuge beim Programmieren von Embedded Systems\nund systemnahen Komponenten systematisch anwenden,\n\u2022   systematische Fehlersuche und -beseitigung in Embedded Systems und Betriebssystemen durchf\u00fchren,\n\u2022   Datenbl\u00e4tter von Hardwarekomponenten interpretieren,\n\u2022   Programmoptimierungen mit Fokus auf eingeschr\u00e4nkte Ressourcen durchf\u00fchren,\n\u2022   eigenverantwortliche Detailplanung eines Embedded-Systems-Projekts durchf\u00fchren.\nInhalt:\n\u2022   Microcontroller-Architekturen\n\u2022   Peripheriemodule von Microcontrollern\n\u2022   Serielle und parallele digitale Kommunikation\n\u2022   Analog-Digital- und Digital-Analog-Interfaces\n\u2022   Entwicklungs-Toolchain\n\u2022   Microcontroller-Programmierung in Assembler und einer Hochsprache (C)\n\u2022   Microcontroller-Programmierung unter einem Embedded Systems Betriebssystem\n\u2022   Systematisches Debugging in Embedded Systems\n\u2022   Interne Strukturen eines Betriebssystems\n\u2022   Detailwissen prim\u00e4rer Betriebssystem-Komponenten\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen:\n\u2022   Physikalische Grundlagen elektrischer Komponenten und elektrischer Netzwerke\n\u2022   Analyse elektrischer Netzwerke\n\u2022   Wissen \u00fcber und Verst\u00e4ndnis von elementaren elektrischen Schaltungen\n\u2022   Fundierte Kenntnisse von Zahlendarstellungen in Computern\n\u2022   Grundlagen der booleschen Algebra und Schaltlogik\n\u2022   Aufbau digitaler Schaltungen, Implementierung von Registern, Speicher und Logik\n\u2022   Fundierte Kenntnisse in Rechnerarchitekturen\n\u2022   Fundamentale Algorithmen und Datenstrukturen\n\u2022   Methoden zur Bewertung und Analyse von Algorithmen\n\u2022   Grundkenntnisse der Funktionsweise eines Betriebssystems, dessen typischer Architektur und Dienste.\nKognitive und praktische Kompetenzen:\n\u2022   F\u00e4higkeit zur Abstraktion elektrischer Vorg\u00e4nge\n\u2022   Fertigkeiten in der Verwendung der Rechenverfahren der Elektrotechnik\n\u2022   Fertigkeiten bei der praktischen Realisierung einfacher elektrischer Schaltungen\nund deren messtechnischer Untersuchung\n\u2022   F\u00e4higkeit zum praktischen Entwurf und zur Modellierung von sequenziellen und\nparallelen Systemen\n\u2022   F\u00e4higkeit zum Einsatz formaler und informeller Methoden zur Spezifikation, Modellierung und Analyse von Algorithmen\n\u2022   Fundierte Fertigkeiten in der Programmierung in C\n\u2022   Kenntnisse \u00fcber die Programmentwicklung unter Unix und Linux\nSoziale Kompetenzen und Selbstkompetenzen:\n\u2022   Selbstorganisation und Eigenverantwortlichkeit\n\u2022   Interdisziplin\u00e4res Denken\nDiese Voraussetzungen werden in folgenden Modulen vermittelt: Algebra und Diskrete\nMathematik, Analysis, Algorithmen und Datenstrukturen, Betriebssysteme, Technische\nGrundlagen der Informatik\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Dieses Modul setzt sich aus zwei Teilen zusammen. Der erste Teil (Microcontroller) ist eine\nLabor\u00fcbung mit begleitender Vorlesung. Hierbei werden in einer einst\u00fcndigen Vorlesung\ndie theoretischen Konzepte erarbeitet und in der Labor\u00fcbung praktische \u00dcbungsprojekte entwickelt werden. Die Inhalte der Vorlesung, und notwendiges theoretisches Wissen\naus dem \u00dcbungsteil, werden in schriftlichen Tests \u00fcberpr\u00fcft. Weiters erfolgen praktische\nTests die mit Kurzbeispielen die Anwendung der in der \u00dcbung erlernten F\u00e4higkeiten\nerfordern. Der zweite Teil (Programmieren von Betriebssystemen) ist als Labor\u00fcbung\norganisiert. Es wird in Kleingruppen selbstst\u00e4ndige testgetriebene Softwareentwicklung\nvon Betriebssystemkomponenten durchgef\u00fchrt. Zur Beurteilung wird die Implementierung, als auch die schriftliche Dokumentation, welche relevanter Designentscheidungen\nund Erkenntnisse festh\u00e4lt, herangezogen.",
                "lvas": [
                    {
                        "ects": "7,0",
                        "lva_typ": "VU",
                        "name": "Microcontroller",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "7,0"
                    },
                    {
                        "ects": "3,0",
                        "lva_typ": "UE",
                        "name": "Programmierung von Betriebssystemen",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    }
                ],
                "name": "Microcontroller und Betriebssysteme",
                "wahl": true
            },
            {
                "ects": "6,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Nach positiver Absolvierung des Moduls verstehen die Studierenden die theoretische Grundlagen des \u00dcbersetzerbaus und k\u00f6nnen\ndiese erkl\u00e4ren und anwenden.\nKognitive und praktische Kompetenzen: Durch die Auseinandersetzung mit Methoden\nund Werkzeugen des \u00dcbersetzerbaus erwerben die Studierenden\n\u2022   die praktische F\u00e4higkeit zur Assemblerprogrammierung und\n\u2022   die praktische F\u00e4higkeit zur Konstruktion von Parsern und \u00dcbersetzern\nSoziale Kompetenzen und Selbstkompetenzen:\n\u2022   Neugierde am \u00dcbersetzerbau\nInhalt:\n\u2022   Grundlagen von \u00dcbersetzern und Interpretern, Struktur von \u00dcbersetzern\n\u2022   Computerarchitektur\n\u2022   lexikalische Analyse (regul\u00e4re Definition, endlicher Automat)\n\u2022   Syntax-Analyse (Top-Down, Bottom-Up)\n\u2022   syntaxgesteuerte \u00dcbersetzung (attributierte Grammatik)\n\u2022   semantische Analyse, Zwischencode (Symboltabelle)\n\u2022   Zwischendarstellungen\n\u2022   Codeerzeugung (Befehlsauswahl, Befehlsanordnung, Registerbelegung)\n\u2022   Laufzeitsystem (Stackverwaltung, Heapverwaltung)\n\u2022   Optimierungen (Programmanalysen, skalare Optimierungen, Schleifenoptimierungen)\n\u2022   \u00dcbersetzung objektorientierter Konzepte (Klassendarstellung und Methodenaufruf,\nTyp\u00fcberpr\u00fcfung, Analysen)\nErwartete Vorkenntnisse:\n\u2022   theoretische Grundlagen der Informatik\n\u2022   alle zur Erstellung von Programmen notwendigen Kenntnisse\n\u2022   die praktische F\u00e4higkeit zur Konstruktion von Programmen\nDiese Voraussetzungen werden in folgenden Modulen vermittelt: Algorithmen und Datenstrukturen, Einf\u00fchrung in die Programmierung, Modellierung, Programmierparadigmen\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Vortrag und selbst\u00e4ndiges Erlernen der eher theoretischen Grundlagen. Labor\u00fcbung in gef\u00fchrten Kleingruppen zur Entwicklung praktischer \u00dcbersetzerentwicklungsf\u00e4higkeiten.\nDie Beurteilung erfolgt durch Pr\u00fcfung oder Tests und die Beurteilung der L\u00f6sungen von\nProgrammieraufgaben plus Abschlussgespr\u00e4ch.",
                "lvas": [
                    {
                        "ects": "6,0",
                        "lva_typ": "VU",
                        "name": "\u00dcbersetzerbau",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "4,0"
                    }
                ],
                "name": "\u00dcbersetzerbau",
                "wahl": true
            },
            {
                "ects": "6,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Nach Absolvierung dieses Moduls k\u00f6nnen Studierende:\n\u2022   Grundlegende Algorithmen der Computergraphik verstehen und implementieren,\n\u2022   Grundlegende Algorithmen der Computer Vision verstehen und anwenden,\n\u2022   Grundlegende Algorithmen der Digitalen Bildverarbeitung verstehen und implementieren,\nKognitive und praktische Kompetenzen: Durch die praktische Auseinandersetzung mit aktuellen Technologien, Methoden und Werkzeugen (wie modernen Programmiersprachen\nund Entwicklungsumgebungen) k\u00f6nnen Studierende nach Absolvierung des Moduls:\n\u2022   Formale Grundlagen und Methoden zur Modellbildung einsetzen,\n\u2022   L\u00f6sungen zu Visual Computing Problemen finden und evaluieren,\n\u2022   Grundlegende Algorithmen der Computergraphik implementieren,\n\u2022   Grundlegende Algorithmen der Computer Vision anwenden,\n\u2022   Grundlegende Algorithmen der Digitalen Bildverarbeitung implementieren,\nSoziale Kompetenzen und Selbstkompetenzen: Das Modul f\u00f6rdert die Erh\u00f6hung der Kreativit\u00e4ts- und Innovationspotentiale, insbesondere\n\u2022   Die Eigeninitiative und Neugierde,\n\u2022   Die Selbstorganisation, Eigenverantwortlichkeit,\n\u2022   Die Problemformulierungs- und Probleml\u00f6sungskompetenz,\n\u2022   Kenntnisse der eigenen F\u00e4higkeiten und Grenzen, Kritikf\u00e4higkeit.\nInhalt:\n\u2022   Digitale Bilder: Aufl\u00f6sung, Abtastung, Quantisierung, Farbrepr\u00e4sentation\n\u2022   Bildoperationen: Punktoperationen, lokale und globale Operationen\n\u2022   Segmentierung\n\u2022   Bewegungserkennung\n\u2022   Repr\u00e4sentation: konturbasiert, regionenbasiert (Momente, Graphen)\n\u2022   Kodierung: Entropie-Kodierung, Source-Kodierung\n\u2022   Komprimierung: Prediktive Kodierung, Vektorquantisierung, JPEG, MPEG\n\u2022   Hardware: Ein- und Ausgabeger\u00e4te, Bildgebende Verfahren, Sensoren\n\u2022   Radiometrische und Geometrische Transformationen\n\u2022   Graphikprimitive und deren Attribute\n\u2022   2D- und 3D-Viewing, Graphikarchitektur (Rendering Pipeline, etc)\n\u2022   Sichtbarkeitsverfahren\n\u2022   3D Objektrepr\u00e4sentationen\n\u2022   Kurven und Fl\u00e4chen\n\u2022   Licht und Schattierung\n\u2022   Ray-Tracing und Globale Beleuchtung\n\u2022   Texturen und andere Mappings\n\u2022   Farben und Farbmodelle\n\u2022   Computational Photography\n\u2022   Non-photorealistic Rendering\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen: Um dieses Modul erfolgreich absolvieren zu\nk\u00f6nnen, sind die Kenntnisse aus dem Modul Einf\u00fchrung in Visual Computing erforderlich.\nKognitive und praktische Kompetenzen: Es werden fortgeschrittene Programmierkenntnisse erwartet.\nSoziale Kompetenzen und Selbstkompetenzen: Es werden die sozialen Kompetenzen, Innovationskompetenz und Kreativit\u00e4t eines interessierten Maturanten erwartet.\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung:\n\u00dcbungen: Die Studierenden m\u00fcssen alleine oder in kleinen Gruppen facheinschl\u00e4gige\nProgrammieraufgaben l\u00f6sen, die zum Teil Implementierungen von Inhalten aus dem\nModul Einf\u00fchrung in Visual Computing sind, zum Teil darauf aufbauende Anwendungsbeispiele. Die Beurteilung erfolgt in pers\u00f6nlichen Abgabegespr\u00e4chen und auf der Basis\nvon abgegebenen Programmcodes.",
                "lvas": [
                    {
                        "ects": "3,0",
                        "lva_typ": "UE",
                        "name": "Einf\u00fchrung in die Computergraphik",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    },
                    {
                        "ects": "3,0",
                        "lva_typ": "UE",
                        "name": "Einf\u00fchrung in die digitale Bildverarbeitung",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    }
                ],
                "name": "\u00dcbungen zu Visual Computing",
                "wahl": true
            },
            {
                "ects": "5,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen die Studierenden:\n\u2022   Methoden zur Konstruktion und Modellierung von zuverl\u00e4ssigen Systemen, die\nstrikten zeitlichen Vorgaben gehorchen m\u00fcssen, beschreiben und anwenden. Dazu\nbenutzen sie die erworbenen Kenntnisse \u00fcber Fehlerarten, Fehlermodelle, Fehlererkennung, Fehleranalyse, Redundanzverfahren, Zuverl\u00e4ssigkeitsmodellierung.\n\u2022   Konzepte und Methoden der zeitabh\u00e4ngigen Information, Uhrensynchronisation,\nEchtzeitscheduling und Echtzeitkommunikation erkl\u00e4ren und benutzen.\n\u2022   Risiken des Einsatzes von Computersystemen in sicherheitskritischen und zeitkritischen Anwendungen diskutieren und beurteilen.\nKognitive und praktische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen\ndie Studierenden:\n\u2022   Fehlerwahrscheinlichkeiten und Ausfallrisiken einsch\u00e4tzen und modellieren,\n\u2022   Verfahren zur Erh\u00f6hung der Zuverl\u00e4ssigkeit von Computersystemen anwenden,\n\u2022   zeitliche Anforderungen an Computersysteme analysieren,\n\u2022   Computersysteme mit Echtzeitanforderungen entwerfen und modellieren.\nInhalt:\n\u2022   Grundlagen: Zuverl\u00e4ssigkeit, Wartbarkeit, Verf\u00fcgbarkeit, MTTF\n\u2022   Quantitative Analysen: Blockdiagramme, Fehlerb\u00e4ume, Markov-Prozesse\n\u2022   Sicherheit, Fehlermodelle, Wartung, Alterungsfehler, Entwurfsfehler\n\u2022   Fehlertolerante Computersysteme: Redundanz, Fehlerlatenz, Synchronisation, Voting, Recovery Blocks, N-Version-Programming\n\u2022   Fallstudien von zuverl\u00e4ssigen bzw. fehlertoleranten Systemen\n\u2022   Fehler und Zuverl\u00e4ssigkeitsmodellierung/analyse mit Tools\n\u2022   Grundlagen Echtzeitsysteme, Zeitabh\u00e4ngigkeit von Information, logische und temporale Ordnung\n\u2022   Modellbildung von Echtzeitsystemen: Zustand und Ereignis, Komponenten, Interfaces, Echtzeitinformation\n\u2022   Echtzeitkommunikation, Kommunikationsprotokolle f\u00fcr Echtzeitsysteme\n\u2022   Uhrensynchronisation\n\u2022   Fehlertoleranz in Echtzeitsystemen\n\u2022   Echtzeitbetriebsysteme: Taskstruktur, Ressourcenmanagement, I/O, Scheduling,\nWorst-Case Zeitanalyse von Tasks\n\u2022   Energieverbrauch und Energiemanagement in Echtzeitsystemen\n\u2022   Design von Echtzeitsystemen: Architekturmodelle, Composability, Designprinzipien, Zertifizierung\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen: Kenntnisse in Boole\u2019scher Algebra, theoretischer Informatik und Logik, Wahrscheinlichkeitsrechnung, Beschreibung und Modellierung stochastischer Prozesse, Aufbau und Funktionsweise von Microcomputern, Betriebssystemen und Netzwerken.\nKognitive und praktische Kompetenzen: Wahrscheinlichkeitsrechnung und Modellierung,\nSystematisches Arbeiten mit Softwaretools, Abstraktionsverm\u00f6gen.\nSoziale Kompetenzen und Selbstkompetenzen: Analyse komplexer Zusammenh\u00e4nge und\nWechselwirkungen, Probleml\u00f6sung im Team.\nDiese Voraussetzungen werden in folgenden Modulen vermittelt: Technische Grundlagen\nder Informatik, Theoretische Informatik und Logik, Statistik und Wahrscheinlichkeitstheorie, Betriebssysteme\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Die\nGrundlagen und theoretischen Inhalte werden im Vorlesungsteil vermittelt. Praktische\nFertigkeiten der Fehler- und Zuverl\u00e4ssigkeitsmodellierung werden in einem \u00dcbungsteil\nerworben, in dem die Studierenden Softwaretools verwenden und Ergebnisse in Form\nvon Laborberichten dokumentieren.",
                "lvas": [
                    {
                        "ects": "2,0",
                        "lva_typ": "VO",
                        "name": "Echtzeitsysteme",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    },
                    {
                        "ects": "3,0",
                        "lva_typ": "VU",
                        "name": "Dependable Systems",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    }
                ],
                "name": "Zuverl\u00e4ssige Echtzeitsysteme",
                "wahl": true
            }
        ],
        "name": "Computersysteme"
    },
    {
        "module": [
            {
                "ects": "6,5",
                "lernergebnisse": "Denkweisen der Informatik bietet eine Einf\u00fchrung und einen \u00dcberblick \u00fcber die Informatik aus der Sicht ihrer Arbeits- und Denkweisen, vermittelt als eine\nArt angewandter Wissenschaftstheorie. Die LVA soll Interesse am weiteren Studium wecken, und die Studierenden in die Lage versetzen, die im weiteren Studium pr\u00e4sentierte\nInhalte besser einzuordnen. Die Studierenden sollen so in die Lage versetzt werden, die\nInformatik sowohl als Wissenschaft als auch als Praxis nachhaltiger zu verstehen, und\ndieses Wissen im Rahmen des Studiums produktiv umzusetzen.\nFachliche und methodische Kompetenzen: Studierende k\u00f6nnen \u2026\n\u2022   erkl\u00e4ren, was Informatik ist;\n\u2022   die Strukturen und Prozesse einer Universit\u00e4t darstellen;\n\u2022   Lernmethoden und Organisationsformen f\u00fcr das erfolgreiche Fortkommen im eigenen Studium anwenden;\n\u2022   ableiten, dass es bei Problemformulierung und Probleml\u00f6sung unterschiedliche und\nzum Teil in Konflikt zueinander stehende Sichtweisen, Herangehensweisen und Motive gibt;\n\u2022   die Str\u00f6mungen und Perspektiven des Denkens seit der vorwissenschaftlichen Zeit\nbis in die Gegenwart aufz\u00e4hlen, sowie die jeweils wesentlichen Grundbegriffe, Probleml\u00f6sungsans\u00e4tze und -methoden diskutieren;\n\u2022   die Notwendigkeit ethischen Handelns begr\u00fcnden, und k\u00f6nnen Methoden anwenden, mit denen ethische Fragestellungen systematisch behandelt werden;\n\u2022   die Verantwortung der Informatik bei der Gestaltung von Technologien im gesellschaftlichen Wandel diskutieren;\n\u2022   wesentliche Ereignisse und Ideen aus der Geschichte der Informationstechnologien\naufz\u00e4hlen und deren Relevanz kritisch reflektieren.\nKognitive und praktische Kompetenzen: Durch die theoretische und praktische Auseinandersetzung mit den Inhalten werden folgende kognitive Fertigkeiten vermittelt:\n\u2022   Auswahl und Einsatz von Strategien, Methoden und Werkzeugen zur Anwendung\nverschiedener Denk- und Probleml\u00f6sungsformen;\n\u2022   Formulierung von Kritik aus unterschiedlichen Perspektiven, rationale Auseinandersetzung im kritischen Dialog;\n\u2022   Einbettung aktueller Entwicklungen und Technologien in einen historischkritischen Kontext\n\u2022   selbst\u00e4ndige Wissenssuche und Wissenserwerb\n\u2022   Kritische Reflexion\nSoziale Kompetenzen und Selbstkompetenzen: Gruppenarbeiten in verschiedenen Zusammensetzungen und Gruppengr\u00f6\u00dfen erlauben Studierenden Erfahrungen zu sammeln, wie\nan Problemstellungen gemeinschaftlich herangegangen werden kann. In peer-review Aufgaben lernen Studierende, konstruktive Kritik an der Arbeit anderer zu \u00fcben, solche\nauch anzunehmen, und diese effektiv in ihre eigene Arbeit einfliessen zu lassen. Die unterschiedlichen Herangehensweisen an Probleme er\u00f6ffnen Studierenden dar\u00fcber hinaus\nHandlungsoptionen und Sichtweisen, die einen kreativen und innovativen Zugang zur\nGestaltung von Technologie erlauben. Dadurch wird auch zu ethischem Verhalten in\nInformatik und Gesellschaft angeregt.\nInhalt:\n\u2022   Vorwissenschaftliche Denkweisen\n\u2022   Denkweisen der naturwissenschaftlichen Revolution\n\u2022   Mathematisches Denken, insbesondere Rekursion, Abstraktion, Induktion und Deduktion\n\u2022   Computational Thinking inklusive der Fragen der Berechenbarkeit\n\u2022   Design Thinking, mit einem Schwerpunkt des Mottos der TU, \"Technik f\u00fcr Menschen\"\n\u2022   Kreativit\u00e4t und Innovation\n\u2022   Kritisches Denken, mit besonderer Betonung von Bias und algorithmic Bias\n\u2022   Verantwortung und Ethik, Verhaltensregeln, code of conducts, Freiheit der Forschung\n\u2022   Organisation und Struktur der TU Wien sowie der Fakult\u00e4t f\u00fcr Informatik\n\u2022   Bachelor- und Masterstudien der Informatik\n\u2022   Forschungsgebiete der Informatik (der Fakult\u00e4t und allgemein)\n\u2022   Strategien f\u00fcr einen erfolgreichen Studienabschluss (Lernen und Lernstrategien,\nsoziales Lernen, Stressbew\u00e4ltigung, Umgang mit Krisen)\nIn die Behandlung dieser Themen werden folgende Inhalte \u00fcbergreifend behandelt:\n\u2022   Geschichte der Informatik\n\u2022   Informatik und Gesellschaft\n\u2022   Lernen und Forschen an der TU Wien\n\u2022   Informatik als Wissenschaft\n\u2022   Diversit\u00e4t und Genderkompetenz\nErwartete Vorkenntnisse: Keine.\nVerpflichtende Voraussetzungen: Keine.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Inhalte werden in Vortr\u00e4gen von unterschiedlichen Vortragenden vorgestellt und teilweise\nvon Studierenden selbst erarbeitet. In selbstorganisierter Arbeit bearbeiten die Studierenden in einem eigenen Online-System \u00dcbungsaufgaben und begutachten im double\nblind peer reviewing-Verfahren die Arbeit von Mitstudierenden. Zur Bewertung werden nicht nur die Leistungen in den \u00dcbungsaufgaben, sondern auch die Qualit\u00e4t des\nReviewing herangezogen. Die Beurteilung des Orientierungsteils erfolgt auf Basis eines\nOnline-Tests.",
                "lvas": [
                    {
                        "ects": "5,5",
                        "lva_typ": "VU",
                        "name": "Denkweisen der Informatik",
                        "not_steop_constrained": true,
                        "semester": "1. Semester (WS)",
                        "sst": "4,0"
                    },
                    {
                        "ects": "1,0",
                        "lva_typ": "VU",
                        "name": "Orientierung Informatik und Wirtschaftsinformatik",
                        "not_steop_constrained": true,
                        "semester": "1. Semester (WS)",
                        "sst": "1,0"
                    }
                ],
                "name": "Denkweisen der Informatik",
                "wahl": false
            },
            {
                "ects": "6,0",
                "lernergebnisse": "Das Ziel dieses Moduls ist es, ein Verst\u00e4ndnis f\u00fcr die Wichtigkeit\nverschiedener Kontexte - Gesellschaft, Ethik, Design, menschliche Arbeit und Freizeit f\u00fcr die Software-Entwicklung zu schaffen. Studierende sollen in die Lage versetzt werden,\nAspekte der Software-Entwicklung jenseits der rein technischen und prozessorientierten\nSichtweisen zu adressieren. Studierende entwickeln ein nachhaltiges Verst\u00e4ndnis f\u00fcr die\nKonzepte, Fertigkeiten und Prozesse, um in der Software-Entwicklung mit inkonsistenten,\ndiversen und uneindeutigen Requirements umzugehen, wie sie in solchen Situationen\n\u00fcblicherweise auftreten.\nFachliche und methodische Kompetenzen: Nach dem absolvieren dieses Moduls k\u00f6nnen\nStudierende:\n\u2022   Kritische Reflexion einsetzen, um soziale, kognitive und kulturelle Auswirkungen\nvon Technologie auf die Welt in das Design von interaktiven Systemen einfliessen\nzu lassen;\n\u2022   Design thinking und Designmethoden einsetzen, um komplexe und ungewisse Problemsituationen produktiv aufzul\u00f6sen;\n\u2022   einfache qualitative und partizipative Ans\u00e4tze nutzen, um Probleme zu formulieren\nund zu l\u00f6sen;\n\u2022   offene und umspezifizierte Problemsituationen auf konstruktive Weise behandeln;\n\u2022   Fortgeschrittene HCI-Techniken nutzen, um Designstrategien zu planen und einzusetzen;\n\u2022   die komplexen Kontexte von anwendungsnahen Problemsituationen verstehen;\n\u2022   n\u00fctzliche, gebrauchstaugliche und fesselnde Systeme implementieren;\n\u2022   die grundlegenden rechtlichen Rahmenbedingungen von Mediennutzung in der\nSoftwareentwicklung aufz\u00e4hlen;\n\u2022   ethische Prinzipien in der Technologieentwicklung ber\u00fccksichtigen;\nKognitive und praktische Kompetenzen:\n\u2022   Verwendung einfacher qualitative oder partizipative Herangehensweisen f\u00fcr die\nProblemformulierung und Probleml\u00f6sung;\n\u2022   Kritische Reflexion der eigenen Arbeit in relevanten Kontexten;\n\u2022   Grundlegendes Wissen um juristische, ethische und sozialwissenschaftliche Grundlagen f\u00fcr die Systemgestaltung;\n\u2022   Grundkompetenzen zur Einbettung der eigenen Arbeit in soziale, kulturelle, juristische und organisatorische Kontexte.\nSoziale Kompetenzen und Selbstkompetenzen: Studierende verstehen die Komplexit\u00e4t der\nBed\u00fcrfnisse der Nutzer_innen, f\u00fcr die sie Gestalten, und die vielf\u00e4ltigen Anforderungen\nvon Gesellschaft und Staat an die Umsetzung technischer Systeme. Sie k\u00f6nnen kreative\nund innovative Ideen entwickeln, um so aussergew\u00f6hnliche L\u00f6sungen zu finden. Sie \u00fcben\ndie Arbeit in Gruppen, und \u00fcbernehmen Verantwortung f\u00fcr die Gestaltung technischer\nSysteme, und verstehen den Wert der mehrdimensionalen Analyse von Situationen f\u00fcr\ndas Design von Technologie.\nInhalt: Die Inhalte umfassen u.a.\n\u2022   Soziale und ethische Aspekte von Informations- und Kommunikationstechnologien;\n\u2022   User Experience und Interaction Design;\n\u2022   Participatory Design;\n\u2022   Methoden des User Research und der Evaluation.\nErwartete Vorkenntnisse:\nDieses Modul baut auf den Kenntnissen, Fertigkeiten und Kompetenzen folgender Module auf: Denkweisen der Informatik, Einf\u00fchrung in die Programmierung, Modellierung,\nSoftware Engineering und Projektmanagement.\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Dieses Modul wird in Form von VU abgehalten. In dieser Vorlesung mit \u00dcbungen werden\neinerseits die theoretischen Inhalte vermittelt, welche wiederum in Form von \u00dcbungen\nin Kleingruppen mit unterschiedlichen \u00dcbungsbeispielen praktisch erlernt werden.",
                "lvas": [
                    {
                        "ects": "3,0",
                        "lva_typ": "VU",
                        "name": "Gesellschaftswissenschaftliche Grundlagen der Informatik",
                        "not_steop_constrained": false,
                        "semester": "5. Semester (WS)",
                        "sst": "2,0"
                    },
                    {
                        "ects": "3,0",
                        "lva_typ": "VU",
                        "name": "Interface and Interaction Design",
                        "not_steop_constrained": false,
                        "semester": "5. Semester (WS)",
                        "sst": "2,0"
                    }
                ],
                "name": "Kontexte der Systementwicklung",
                "wahl": false
            },
            {
                "ects": "6,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen die Studierenden die Grundstrukturen nationalen Rechts, des EU-Rechts und des\nV\u00f6lkerrechts sowie einschl\u00e4gige Zusammenh\u00e4nge beschreiben und wichtige Teilgebiete\ndes Informatikrechts bzw. aktuelle Aspekte der rechtlichen Problematik des Internet erkl\u00e4ren. Sie sind in der Lage, die juristischen Interpretationsmethoden zu benennen und\ndie Vorgangsweise bei der Subsumtion von Sachverhalten unter rechtliche Tatbest\u00e4nde\ndarzustellen. Nach dieser Einf\u00fchrung in die IT-Security haben Studierende das Wissen\n\u00fcber typische Sicherheitsprobleme und k\u00f6nnen diese beseitigen.\nKognitive und praktische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen\ndie Studierenden in wichtigen informatikrechtlichen Zusammenh\u00e4ngen argumentieren\nund einfache Sachverhalte aus rechtlicher Perspektive analysieren. Sie sind weiters in\nder Lage, solche Sachverhalte unter einschl\u00e4gige Tatbest\u00e4nde zu subsumieren und die\nma\u00dfgeblichen Rechtsfolgen abzuleiten. Sie haben ein Einf\u00fchlungsverm\u00f6gen in die Sichtweise potentieller Angreifer, Erfahrung in Angriff und Sicherung von Systemen und die\nrichtige Anwendung von kryptographischen Techniken\nSoziale Kompetenzen und Selbstkompetenzen: Nach positiver Absolvierung des Moduls\nsind die Studierenden in der Lage, mit Fachjurist/inn/en \u00fcber zentrale rechtliche Aspekte IT-bezogener Sachverhalte kompetent zu diskutieren. Sie sind f\u00fcr IT-Security in\nForschung und Wirtschaft sensibilisiert und haben ein Gef\u00fchl f\u00fcr wissenschaftliche und\nwirtschaftliche Herausforderungen, L\u00f6sungsans\u00e4tze und ihre Beurteilung entwickelt.\nInhalt:\n\u2022   Einf\u00fchrung in die Security\n\u2013   Grundlagen der Security\n\u2013   Zugriffskontrolle\n\u2013   Betriebssystemsecurity\n\u2013   Netzwerksecurity\n\u2013   Grundlagen der Kryptographie\n\u2013   Security von Anwendungsprogrammen\n\u2013   Websecurity\n\u2013   Auffinden von Schwachstellen\n\u2022   Daten und Informatikrecht\n\u2013   Grundlagen zu Staat und nationalem Recht\n\u2013   Grundlagen des internationalen Rechts und des EU-Rechts\n\u2013   Problematik der Regulierung von Technik (insb. IT) durch Recht\n\u2013   Grundrechte in der Informationsgesellschaft\n\u2013   ausgew\u00e4hlte Probleme des materiellen Internetrechts\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Inhalte werden in Vorlesungseinheiten pr\u00e4sentiert und in begleitenden \u00dcbungseinheiten\nvon den Studierenden angewendet sowie vertiefend erarbeitet. Die Beurteilung setzt sich\nzusammen aus den bei schriftlichen Klausuren einerseits und \u00dcbungsabgaben andererseits erbrachten Leistungen.\nEs werden verschiedene Techniken des Blended Learning eingesetzt:\n\u2022   Unterst\u00fctzung durch ein e-learning-System (TUWEL)\n\u2022   Frontalunterricht f\u00fcr die theoretischen Grundlagen\n\u2022   Aufzeichnung/Podcasts von Vortr\u00e4gen (technische Vortr\u00e4ge, CERIAS-Seminare)\n\u2022   Praktische Arbeiten am Computer\n\u2022   Unterst\u00fctzung durch Tutoren",
                "lvas": [
                    {
                        "ects": "3,0",
                        "lva_typ": "VU",
                        "name": "Introduction to Security",
                        "not_steop_constrained": false,
                        "semester": "5. Semester (WS)",
                        "sst": "2,0"
                    },
                    {
                        "ects": "3,0",
                        "lva_typ": "VU",
                        "name": "Daten- und Informatikrecht",
                        "not_steop_constrained": false,
                        "semester": "4. Semester (SS)",
                        "sst": "2,0"
                    }
                ],
                "name": "Security und Recht",
                "wahl": false
            },
            {
                "ects": "mindestens 6,0",
                "lernergebnisse": "Durch die Absolvierung des Moduls erhalten die Studierenden Grundkenntnisse der IT-Sicherheit. Die Studierenden lernen Aspekte der IT-Sicherheit in Projekten zu identifizieren und Ma\u00dfnahmen zu setzen, um diese zu ber\u00fccksichtigen.\nFachliche und methodische Kompetenzen: Das Modul vermittelt\n\u2022   die theoretische Grundlagen der IT-Sicherheit,\n\u2022   die theoretische Grundlagen der Kryptographie,\n\u2022   wichtige Sicherheitsaspekte in IT-Projekten, und\n\u2022   Wissen \u00fcber wichtige Best-Practice Sicherheitsma\u00dfnahmen.\nKognitive und praktische Kompetenzen:\n\u2022   Umsetzung von wichtigen Best-Practice Sicherheitsma\u00dfnahmen\n\u2022   Verstehen der Denkweise von AngreiferInnen\n\u2022   Entwicklung kryptographischer Verfahren und Sicherheitsbeweisen\nSoziale Kompetenzen und Selbstkompetenzen:\n\u2022   Aufmerksamkeit f\u00fcr Sicherheitsaspekte in IT-Projekten\n\u2022   Aufmerksamkeit f\u00fcr beweisbare Sicherheit\n\u2022   Kommunikation der Relevanz von IT-Sicherheit und von L\u00f6sungsideen f\u00fcr ITSicherheitsprobleme\nInhalt:\n\u2022   Operating systems\n\u2022   Access control\n\u2022   Network security\n\u2022   Application security\n\u2022   Database security\n\u2022   Web (application) security\n\u2022   Modern Cryptography\n\u2022   Security definitions\n\u2022   Security proofs\n\u2022   Privacy\n\u2022   Security and usability\n\u2022   Operations security\n\u2022   Physical security\n\u2022   Security architecture\n\u2022   Forensics\n\u2022   Exploiting vulnerabilities\n\u2022   Malware\n\u2022   System security\n\u2022   Standards, policies, best practices\n\u2022   Ethics, Compliance, Legal investigations\n\u2022   Risk management\n\u2022   Information security\n\u2022   Business continuity, disaster recovery\nErwartete Vorkenntnisse:\nDieses Modul baut auf den Kenntnissen und Fertigkeiten folgender Module auf: Einf\u00fchrung in die Programmierung, Security und Recht, Technische Grundlagen der Informatik\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.",
                "lvas": [
                    {
                        "ects": "3,0",
                        "lva_typ": "VU",
                        "name": "Internet Security",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    },
                    {
                        "ects": "3,0",
                        "lva_typ": "VU",
                        "name": "Introduction to Modern Cryptography",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    },
                    {
                        "ects": "3,0",
                        "lva_typ": "VU",
                        "name": "Privacy Enhancing Technologies",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    },
                    {
                        "ects": "3,0",
                        "lva_typ": "VU",
                        "name": "Security for Systems Engineering",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    }
                ],
                "name": "Security",
                "wahl": true
            },
            {
                "ects": "6,0",
                "lernergebnisse": "Eine AbsolventIn des Moduls ist dazu bef\u00e4higt, konkrete Probleme\ndes materiellen Internetrechts als solche zu erkennen, selbst zumindest grunds\u00e4tzlich\nzu beurteilen sowie mit Jurist/inn/en bei der L\u00f6sung der Rechtsprobleme effektiv und\nkritisch auf interdisziplin\u00e4rer Ebene zusammenzuarbeiten sowie grundlegende Probleme\ndes (privatrechtlichen) Vertrags- und Haftungsrechts selbst\u00e4ndig beurteilen und l\u00f6sen zu\nk\u00f6nnen.\nFachliche und methodische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen die Studierenden im Zusammenhang mit gegebenen Sachverhalten konkrete Probleme des materiellen Internetrechts und grundlegende Probleme des privatrechtlichen\nVertrags- und Haftungsrechts ableiten und beschreiben.\nKognitive und praktische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen\ndie Studierenden in ausgew\u00e4hlten informatikrechtlichen sowie vertrags- und haftungsrechtlichen Zusammenh\u00e4ngen argumentieren, Rechtsinformationen online recherchieren\nund gegebene (einfache) Sachverhalte aus rechtlicher Perspektive analysieren. Sie sind\nweiters in der Lage, solche Sachverhalte unter einschl\u00e4gige Tatbest\u00e4nde zu subsumieren\nund die ma\u00dfgeblichen Rechtsfolgen abzuleiten.\nSoziale Kompetenzen und Selbstkompetenzen: Nach positiver Absolvierung des Moduls\nsind die Studierenden in der Lage, mit Fachjurist/inn/en \u00fcber grundlegende rechtliche\nAspekte IT-bezogener Sachverhalte sowie \u00fcber vertrags- und haftungsrechtliche Momente kompetent zu diskutieren.\nInhalt:\n\u2022   Daten- und Informatikrecht\n\u2013 Pr\u00e4sentation aktueller Fallkonstellationen mit Bezug zum Informatikrecht\n\u2013 Anleitung zur selbstst\u00e4ndigen Analyse von Sachverhalten und zur Rechtsinformationsrecherche\n\u2013 eigenst\u00e4ndige schriftliche Ausarbeitung der rechtlichen Beurteilung konkreter\nF\u00e4lle bzw. Rechtsfragen\n\u2022   Vertrags- und Haftungsrecht\n\u2013   Grundlagen des Privatrechts\n\u2013   allgemeines Vertragsrecht\n\u2013   Rechtsgesch\u00e4ftslehre und Probleme beim Vertragsschluss\n\u2013   Leistungsst\u00f6rungen\n\u2013   Gew\u00e4hrleistungsrecht\n\u2013   Schadenersatzrecht\n\u2013   Gef\u00e4hrdungshaftung\n\u2013   Grundz\u00fcge des Sachenrechts\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen: Grundlagen des Daten- und Informatikrechts\nKognitive und praktische Kompetenzen: Bereitschaft zur Auseinandersetzung mit rechtlichen Konzepten und Methoden\nSoziale Kompetenzen und Selbstkompetenzen: Bef\u00e4higung zur selbst\u00e4ndigen Recherche\nund Probleml\u00f6sung\nDiese Voraussetzungen werden im Modul Security und Recht vermittelt.\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung:\nInhalte werden in Vorlesungseinheiten pr\u00e4sentiert bzw. in \u00dcbungseinheiten von den\nStudierenden angewendet oder selbstst\u00e4ndig erarbeitet; teils kommt Blended Learning\n(TUWEL-Kurs) zum Einsatz. Die Beurteilung setzt sich zusammen aus den bei schriftlichen Klausuren bzw. \u00dcbungsabgaben erbrachten Leistungen.",
                "lvas": [
                    {
                        "ects": "3,0",
                        "lva_typ": "UE",
                        "name": "Daten- und Informatikrecht",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    },
                    {
                        "ects": "3,0",
                        "lva_typ": "VU",
                        "name": "Vertrags- und Haftungsrecht",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    }
                ],
                "name": "Vertrags-, Daten- und Informatikrecht",
                "wahl": true
            }
        ],
        "name": "Informatik und Gesellschaft"
    },
    {
        "module": [
            {
                "ects": "6,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen die Studierenden die unter \"Inhalt\" angef\u00fchrten Konzepte und Techniken mit fachspezifischer Terminologie beschreiben.\nKognitive und praktische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen\ndie Studierenden\n\u2022   Datenmodelle mittels ER- und EER-Diagrammen erstellen,\n\u2022   EER-Diagramme in ein relationales Schema in 3. Normalform umsetzen,\n\u2022   SQL f\u00fcr die Manipulation und Abfrage von Daten verwenden,\n\u2022   einfache Anfragen in relationaler Algebra und Relationenkalk\u00fcl verstehen und\nselbst formulieren,\n\u2022   Programmieraufgaben mit einer prozeduralen Datenbankprogrammiersprache l\u00f6sen,\n\u2022   unterschiedliche Isolations-Levels im Mehrbenutzerbetrieb gezielt einsetzen.\nSoziale Kompetenzen und Selbstkompetenzen: Nach positiver Absolvierung des Moduls\nk\u00f6nnen die Studierenden\n\u2022   gestellte Aufgaben selbst\u00e4ndig und fristgerecht l\u00f6sen,\n\u2022   die erstellten L\u00f6sungen kommunizieren und begr\u00fcnden,\n\u2022   ein deklaratives Programmierparadigma (SQL) anwenden.\nInhalt:\n\u2022   Datenbankentwurf, Datenmodellierung mittels ER- und EER-Diagrammen,\n\u2022   relationales Datenmodell,\n\u2022   Umsetzung eines EER-Diagramms in ein relationales Schema in dritter Normalform,\n\u2022   funktionale Abh\u00e4ngigkeiten, Normalformen,\n\u2022   relationale Abfragesprachen (relationale Algebra, Relationenkalk\u00fcl, SQL),\n\u2022   komplexe Schemadefinitionen (Constraints, Views),\n\u2022   komplexe SQL Abfragen (Schachtelung, Rekursion),\n\u2022   prozedurale Datenbankprogrammierung,\n\u2022   Transaktionen,\n\u2022   Fehlerbehandlung/Recovery,\n\u2022   Mehrbenutzersynchronisation.\nErwartete Vorkenntnisse:\nKognitive und praktische Kompetenzen: Es wird erwartet, dass Studierende vor Absolvierung des Moduls\n\u2022   mathematische Notationen lesen und schreiben k\u00f6nnen,\n\u2022   grundlegende Datenstrukturen und Algorithmen verwenden k\u00f6nnen,\n\u2022   eine allgemeine imperative Programmiersprache anwenden k\u00f6nnen,\n\u2022   grundlegende Formalismen der Modellierung anwenden k\u00f6nnen,\n\u2022   grundlegende Begriffe und Konzepte der Logik (Aussagenlogik, Pr\u00e4dikatenlogik)\nbeschreiben und anwenden k\u00f6nnen.\nDiese Vorkenntnisse werden in folgenden Modulen vermittelt: Algebra und Diskrete Mathematik, Einf\u00fchrung in die Programmierung, Modellierung.\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Die\nInhalte werden in Vortr\u00e4gen vorgestellt und in begleitenden \u00dcbungen von den Studierenden erarbeitet. Die Beurteilung erfolgt auf Basis schriftlicher Tests und der kontinuierlich\nin den \u00dcbungen erbrachten Leistungen. Der \u00dcbungsbetrieb und die Tests k\u00f6nnen computerunterst\u00fctzt durchgef\u00fchrt werden.",
                "lvas": [
                    {
                        "ects": "6,0",
                        "lva_typ": "VU",
                        "name": "Datenbanksysteme",
                        "not_steop_constrained": false,
                        "semester": "3. Semester (WS)",
                        "sst": "4,0"
                    }
                ],
                "name": "Datenbanksysteme",
                "wahl": false
            },
            {
                "ects": "8,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen die Studierenden fundamentale Konzepte, die zum Verst\u00e4ndnis der Arbeitsweise als\nauch zur Erstellung intelligenter Systeme von Bedeutung sind benennen und erl\u00e4utern\nund theoretische Zusammenh\u00e4nge korrekt argumentieren.\nKognitive und praktische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen\ndie Studierenden\n\u2022   die eingesetzten Techniken und Methoden formal analysieren,\n\u2022   Methoden und Techniken f\u00fcr eine vorgegebene Aufgabenstellung zielgerichtet ausw\u00e4hlen,\n\u2022   Aufgabenstellungen analysieren und in eine geeignete Form der Wissensrepr\u00e4sentation mit dazugeh\u00f6rigem Verarbeitungsmechanismus umsetzen, sowie\n\u2022   L\u00f6sungen kritisch bewerten.\nSoziale Kompetenzen und Selbstkompetenzen: Nach positiver Absolvierung des Moduls\nk\u00f6nnen die Studierenden erarbeitete L\u00f6sungen und Ableitungen und Beweise pr\u00e4sentieren.\nInhalt: Einf\u00fchrung in die K\u00fcnstliche Intelligenz:\nEinf\u00fchrung in wissensbasierte Systeme:\n\u2022   Einf\u00fchrung und geschichtlicher Hintergrund\n\u2022   Pr\u00e4dikatenlogik als Spezifikationssprache\n\u2022   Nichtmonotones Schliessen\n\u2022   Answer-set Programmierung\n\u2022   Probabilistische Verfahren\n\u2022   Entwicklung von wissensbasierten Systemen\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen: Es wird erwartet, dass die Studierenden vor\nder Absolvierung des Moduls\n\u2022   die wesentlichen Konzepte der Aussagen- und Pr\u00e4dikatenlogik erster Stufe und\n\u2022   Deduktionskonzepte und Beweisprinzipien benennen und beschreiben k\u00f6nnen.\nKognitive und praktische Kompetenzen: Es wird erwartet, dass die Studierenden vor der\nAbsolvierung des Moduls\n\u2022   Deduktionskonzepte und Beweisprinzipien zur Erstellung eigener Beweise korrekt\nanwenden,\n\u2022   die Korrektheit der einzelnen Beweisschritte formal argumentieren, sowie\n\u2022   vorgegebene Problembeschreibungen algorithmisch umsetzen k\u00f6nnen.\nDiese Voraussetzungen werden in folgenden Modulen vermittelt: Algebra und Diskrete\nMathematik, Algorithmen und Datenstrukturen, Modellierung, Theoretische Informatik\nund Logik.\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: In\nden Lehrveranstaltungen des Moduls werden Inhalte im Rahmen von Vorlesungsteilen\n(Frontalvortrag) pr\u00e4sentiert. In den begleitenden \u00dcbungen erstellen Studierende individuell und selbst\u00e4ndig L\u00f6sungen zu den Aufgaben, pr\u00e4sentieren diese (inkl. der ben\u00f6tigten Theorie) in einem Abgabegespr\u00e4ch und diskutieren mit dem verantwortlichen\nLVA-Leiter die L\u00f6sung. Im Fall der Einf\u00fchrung in Wissensbasierte Systeme ist ein zus\u00e4tzliches Projekt zu bearbeiten, zu welchem es computergenerierte und/oder pers\u00f6nliche\nR\u00fcckmeldungen gibt.\nDie Leistungsbeurteilung erfolgt durch eine schriftliche Pr\u00fcfung sowie durch eine Bewertung des Abgabegespr\u00e4chs. Zus\u00e4tzlich wird die L\u00f6sung der Projektaufgabe bewertet.",
                "lvas": [
                    {
                        "ects": "3,0",
                        "lva_typ": "VU",
                        "name": "Einf\u00fchrung in die K\u00fcnstliche Intelligenz",
                        "not_steop_constrained": false,
                        "semester": "4. Semester (SS)",
                        "sst": "2,0"
                    },
                    {
                        "ects": "5,0",
                        "lva_typ": "VU",
                        "name": "Einf\u00fchrung in wissensbasierte Systeme",
                        "not_steop_constrained": false,
                        "semester": "5. Semester (WS)",
                        "sst": "3,0"
                    }
                ],
                "name": "Grundlagen intelligenter Systeme",
                "wahl": false
            },
            {
                "ects": "6,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen:\n\u2022   Das Modul vermittelt ein breites und integriertes Wissen und Verstehen der wissenschaftlichen Grundlagen der Entwicklung von Web-Anwendungen, welches wesentlich \u00fcber das auf der Ebene der Universit\u00e4tszugangsberechtigung vorhandene\nWissen hinausgeht.\n\u2022   Die Studierenden sind bef\u00e4higt Problemdom\u00e4nen zu beherrschen, die sich durch\nwenig strukturierte Information auszeichnen.\n\u2022   Die Studierenden verf\u00fcgen \u00fcber ein kritisches Verst\u00e4ndnis der wichtigsten Theorien, Prinzipien und Konzepte zur Entwicklung von Web-Anwendungen.\n\u2022   Das Wissen und Verst\u00e4ndnis der Studierenden entspricht dem Stand der Fachliteratur in diesem Bereich.\nKognitive und praktische Kompetenzen:\n\u2022   Die Studierenden k\u00f6nnen ihr Wissen und Verstehen praktisch zur L\u00f6sung von\nAufgaben im Bereich der Web-Anwendungsentwicklung umsetzen.\n\u2022   Die Studierenden k\u00f6nnen f\u00fcr die jeweilig vorliegende Aufgabenstellung relevante\nInformationen sammeln, strukturieren, bewerten und interpretieren.\nSoziale Kompetenzen und Selbstkompetenzen:\n\u2022   Die Studierenden sind in der Lage ihr Wissen selbst\u00e4ndig zu vertiefen.\n\u2022   Die Studierenden k\u00f6nnen entwicklungsbezogene Positionen und Probleml\u00f6sungen\nformulieren, sich mit InformatikerInnen und Dom\u00e4nenexpertInnen dar\u00fcber austauschen und Verantwortung in einem Team \u00fcbernehmen.\n\u2022   Die Studierenden lernen ihre eigenen F\u00e4higkeiten und Grenzen einzusch\u00e4tzen und\nerwerben die Kritikf\u00e4higkeit an der eigenen Arbeit.\n\u2022   Die Studierenden erlernen Selbstorganisation und Eigenverantwortlichkeit zum eigenst\u00e4ndigen L\u00f6sen von Aufgaben.\nInhalt:\n\u2022   Grundlagen: Begriffsdefinitionen; Grundlagen semistrukturierter Daten; Architekturelle Grundlagen des World Wide Web; Grundlagen von Web-Anwendungen.\n\u2022   Sprachen und Technologien: Grundlagen von Markup-Sprachen; Schemasprachen;\nAbfragesprachen; Web-Modellierungssprachen; Technologien f\u00fcr dynamische WebAnwendungen; Web Services.\n\u2022   Umsetzung und praktische Realisierung: Barrierefreie Web-Anwendungen; Entwicklungsprozess; Entwurfsmuster; Entwicklungs-APIs; Stylesheets.\nErwartete Vorkenntnisse:\nEs werden die Fertigkeiten und Kenntnisse folgender Module ben\u00f6tigt: Einf\u00fchrung in\ndie Programmierung, Modellierung.\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Die\nInhalte werden durch Vortragseinheiten vermittelt und durch theoretische und praktische\n\u00dcbungen ge\u00fcbt. Die Beurteilung basiert auf Test \u00fcber den vorgetragenen Stoff sowie auf\nden erbrachten Leistungen in den \u00dcbungen.",
                "lvas": [
                    {
                        "ects": "3,0",
                        "lva_typ": "VU",
                        "name": "Semistrukturierte Daten",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    },
                    {
                        "ects": "3,0",
                        "lva_typ": "VU",
                        "name": "Web Engineering",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    }
                ],
                "name": "Entwicklung von Web-Anwendungen",
                "wahl": true
            },
            {
                "ects": "mindestens 6,0",
                "lernergebnisse": "Vermittlung einer datenorientierten und explorativen Analyse von\nDaten\nFachliche und methodische Kompetenzen:\n\u2022   Grundlagen der statistischen Datenanalyse\n\u2022   Detailierte Kenntnisse und Hintergrundwissen \u00fcber statistische Methodik\n\u2022   Exploration und Analyse statistischer Daten\n\u2022   Computergest\u00fctzte Verfahren der Statistik, Sch\u00e4tzungen, statistische Tests, Varianzanalyse, Regression\n\u2022   Kritische Sicht im Umgang und Anwendung mit statistischer Software\nKognitive und praktische Kompetenzen:\n\u2022   Anwendung von statistischer Methodik und Software auf konkrete Problemstellungen\n\u2022   Programmentwicklung mit statistischer Software\n\u2022   Computerorientierte L\u00f6sung von statistischen Problemen\n\u2022   Anwendung von statistischen Methodiken mit Hilfe des Computers auf konkrete\nProblemstellung\nSoziale Kompetenzen und Selbstkompetenzen:\n\u2022   Datenorientierte L\u00f6sung von statistischen Problemstellungen\n\u2022   L\u00f6sungen von Problemen mit open-source Software\nInhalt: Stichprobendesign, Planung der statistischen Datenerhebung, Elemente der explorativen Datenanalyse, Grundbegriffe parametrischer/nichtparametrischer und robuster Verfahren, lineare Modelle, Einf\u00fchrung in multivariate statistische Methoden, Einf\u00fchrung in die Zeitreihenanalyse, effiziente Programmierung in der statistischen Softwareumgebung R, Datenmanipulation, statistische Graphiken, graphische Systeme in R,\ndynamische reports mit statistischer Software, Testen mittels statistischer Simulation.\nExploration und Analyse statistischer Daten, computergest\u00fctzte Verfahren der Statistik,\nVertiefung in und kritischer Vergleich von kommerzieller Statistiksoftware (SPSS, SAS,\nSPLUS, S, R). Einsatz von spezieller Software, insbesondere Neuentwicklungen, Schwergewicht liegt aber auf R. Arbeiten mit gr\u00f6\u00dferen Fallbeispielen. Der Methodenkatalog\numfasst: Beschreibende Statistik, Vergleich von Gruppen von Daten, Varianzanalyse,\nRegressionsanalyse, Geostatistik, Ausblick in Multivariate Methoden, Simulation.\nErwartete Vorkenntnisse: Grundlegende Kenntnisse der Mathematik und Statistik\nDiese Voraussetzungen werden in im Modul Algebra und Diskrete Mathematik, Analysis,\nStatistik und Wahrscheinlichkeitstheorie vermittelt.\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Die\nLehrveranstaltung Datenanalyse vermittelt sowohl den theoretischen Zugang zu den\nMethoden, demonstriert aber auch die praktische L\u00f6sung mittels Statistik-Software. Die\nStudierenden sollen selbst\u00e4ndig Problemstellungen mit dem Computer l\u00f6sen.\nDie Lehrveranstaltung Statistical Computing vermittelt einen computerorientierten\nZugang zur Statistik. Ziel ist einerseits detaillierte Kenntnisse in der State-of-the-art\nSoftware R zu vermitteln, als auch statistische Probleme mittels statistischer Simulation\nzu l\u00f6sen. L\u00f6sungen sollen durch eigenst\u00e4ndiges Programmieren erarbeitet werden.\nDie Lehrveranstaltung Computerstatistik ist ein Mix aus einem theoretischen Vorlesungsteil und einem \u00dcbungsteil, wobei die Teile in nat\u00fcrlicher Weise ineinander \u00fcbergehen. Die theoretischen Darstellungen werden m\u00f6glichst zeitnahe mit praktischen \u00dcbungen am Computer erl\u00e4utert und ge\u00fcbt.",
                "lvas": [
                    {
                        "ects": "3,0",
                        "lva_typ": "VU",
                        "name": "Datenanalyse",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    },
                    {
                        "ects": "3,0",
                        "lva_typ": "VU",
                        "name": "Statistical Computing",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    },
                    {
                        "ects": "4,5",
                        "lva_typ": "VU",
                        "name": "Computerstatistik",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "3,0"
                    }
                ],
                "name": "Statistische Datenanalyse",
                "wahl": true
            },
            {
                "ects": "6,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen die Studierenden unterschiedliche Logiken bzw. logikbasierte Formalismen zur Wissensrepr\u00e4sentation benennen und erl\u00e4utern, sowie theoretische Zusammenh\u00e4nge korrekt\nargumentieren.\nKognitive und praktische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen\ndie Studierenden\n\u2022   die eingesetzten Techniken und Methoden formal analysieren,\n\u2022   Methoden und Techniken f\u00fcr eine vorgegebene Aufgabenstellung zielgerichtet ausw\u00e4hlen, sowie\n\u2022   L\u00f6sungen und Formalismen kritisch bewerten.\nSoziale Kompetenzen und Selbstkompetenzen: Nach positiver Absolvierung des Moduls\nk\u00f6nnen die Studierenden erarbeitete L\u00f6sungen kommunizieren.\nInhalt:\n\u2022   Klassische Logik zur Wissensrepr\u00e4sentation (inkl. Probleme, Limitierungen und\nontologische Aspekte)\n\u2022   Formalismen zum Nichtmonotonen Schlie\u00dfen\n\u2022   Parakonsistente Logiken\n\u2022   Wissensrevision (Belief Revision)\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen: Es wird erwartet, dass die Studierenden vor der\nAbsolvierung des Moduls die wesentlichen Konzepte der Aussagen- und Pr\u00e4dikatenlogik\nerster Stufe benennen und beschreiben k\u00f6nnen.\nKognitive und praktische Kompetenzen: Es wird erwartet, dass die Studierenden vor der\nAbsolvierung des Moduls Deduktionskonzepte und Beweisprinzipien zur Erstellung eigener Beweise korrekt anwenden und die Korrektheit der einzelnen Beweisschritte formal\nargumentieren k\u00f6nnen.\nSoziale Kompetenzen und Selbstkompetenzen: Keine speziellen Voraussetzungen.\nDiese Voraussetzungen werden in folgenden Modulen vermittelt: Algebra und Diskrete\nMathematik, Modellierung, Theoretische Informatik und Logik, Grundlagen intelligenter\nSysteme\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung:\n\u2022   Pr\u00e4sentation der Lehrinhalte in einem Vorlesungsteil (Frontalvortrag)\n\u2022   Selbst\u00e4ndiges Ausarbeiten von Aufgabenstellungen durch Studierende\n\u2022   Pr\u00e4sentation der L\u00f6sungen (inkl. der ben\u00f6tigten Theorie)\nLeistungsbeurteilung:\n\u2022   M\u00fcndliche Pr\u00fcfung des Vorlesungsteil,\n\u2022   Bewertung der Ausarbeitungen (inkl. der Pr\u00e4sentation)",
                "lvas": [
                    {
                        "ects": "3,0",
                        "lva_typ": "VO",
                        "name": "Logik f\u00fcr Wissensrepr\u00e4sentation",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    },
                    {
                        "ects": "3,0",
                        "lva_typ": "UE",
                        "name": "Logik f\u00fcr Wissensrepr\u00e4sentation",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    }
                ],
                "name": "Wissensrepr\u00e4sentation",
                "wahl": true
            }
        ],
        "name": "Information Engineering"
    },
    {
        "module": [
            {
                "ects": "9,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Reproduzieren bzw. Herleiten der wichtigsten\nmathematischen Definitionen, Theoreme und Beweismethoden der Algebra und Diskreten Mathematik.\nKognitive und praktische Kompetenzen: Finden von Beweisen f\u00fcr mathematische Problemstellungen aus Algebra und Diskreter Mathematik; Modellieren einfacher Anwendungsprobleme aus Informatik, Naturwissenschaften und Technik als mathematische\nProblemstellungen und L\u00f6sen derselben mit geeigneten mathematischen Methoden.\nSoziale Kompetenzen und Selbstkompetenzen: Pr\u00e4sentieren von Probleml\u00f6sungen vor einer \u00dcbungsgruppe.\nInhalt:\n\u2022   Grundlagen: elementare Logik (Aussagen, Implikation, Kontraposition, Verneinung, Quantoren); elementare Beweistechniken (direkter und indirekter Beweis,\nGegenbeispiele); elementare Zahlentheorie.\n\u2022   Mengenlehre: Grundlagen (Venn-Diagramme, Komplemente, kartesisches Produkt, Potenzmenge); Funktionen (Mengenrelationen, surjektive, injektive, bijektive Funktionen, Komposition); Relationen (\u00c4quivalenzrelation, Partitionen, Ordnungsrelation, Maximumsprinzip); Kardinalit\u00e4t und Abz\u00e4hlbarkeit (endliche, unendlichen und abz\u00e4hlbare Mengen).\n\u2022   Induktion: Induktionsprizip (vollst\u00e4ndige Ind., transfinite Ind.); rekursive Definitionen.\n\u2022   Grundlagen der Kombinatorik: Abz\u00e4hlprinzipien (Summen- und Produktregel);\nSchubfachschluss; Inklusions-Exklusions-Prinzip; kombinatorische Grundaufgaben\n(Permutationen, Auswahlen, Partitionen); elementare Identit\u00e4ten (Binomischer\nLehrsatz, binomische Identit\u00e4ten); Rekursionen (Fibonacci-Zahlen, Derangements,\nTurm von Hanoi); L\u00f6sungsmethoden f\u00fcr Rekursionen (Rekursionen erster Ordnungen, lineare Rekursionen mit konstanten Koeffizienten).\n\u2022   Graphentheorie: Grundlagen (gerichtete, ungerichtete, bipartite Graphen, Wege,\netc.); Handshake-Lemma; Eulersche und Hamiltonsche Linien; Graphrelationen\n(Isomorphie, Subgraphen, Minore); Zusammenhang (Zusammenhangskomponenten, Menger\u2019s theorem); azyklische Graphen; ebene Graphen (inkl. Eulersche Polyederformel); elementare Graph-Algorithmen (Azyklizit\u00e4t, Kruskal-Alg., minimaler\nSpannbaum, Dijkstra-Alg.).\n\u2022   Algebraische Strukturen: Gruppentheorie (inkl. Faktorgruppen, Homomorphiesatz,\nzyklische Gruppen, direkte Produkte); Ringe (Integrit\u00e4tsbereiche, Ideale); K\u00f6rper\n(Polynomringe \u00fcber K\u00f6rpern); Verb\u00e4nde.\n\u2022   Lineare Algebra: Vektoren; Matrizen; lineare Abbildungen; lineare Gleichungssysteme; Determinanten; Eigenwerte und Eigenvektoren; Skalarprodukte, Orthogonalit\u00e4t.\n\u2022   Grundlagen algebraische Codierungstheorie: Gruppencodes, Linearcodes.\nErwartete Vorkenntnisse: Fundierte Mathematik-Kenntnisse auf AHS/BHS-Maturaniveau.\nVerpflichtende Voraussetzungen: Keine.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: W\u00f6chentliche Vorlesung mit kontinuierlicher begleitender \u00dcbung (individuell auszuarbeitende \u00dcbungsbeispiele, L\u00f6sungspr\u00e4sentation an der Tafel), wodurch die in der Vorlesung\nvermittelten Inhalte effizient erlernt und die mathematische Probleml\u00f6sungskompetenz\ntrainiert wird. Leistungsfeststellung durch mehrere L\u00f6sungspr\u00e4sentationen, \u00dcbungstests,\nAbschlusspr\u00fcfung.",
                "lvas": [
                    {
                        "ects": "4,0",
                        "lva_typ": "VO",
                        "name": "Algebra und Diskrete Mathematik f\u00fcr Informatik und Wirtschaftsinformatik",
                        "not_steop_constrained": true,
                        "semester": "1. Semester (WS)",
                        "sst": "4,0"
                    },
                    {
                        "ects": "5,0",
                        "lva_typ": "UE",
                        "name": "Algebra und Diskrete Mathematik f\u00fcr Informatik und Wirtschaftsinformatik",
                        "not_steop_constrained": true,
                        "semester": "1. Semester (WS)",
                        "sst": "2,0"
                    }
                ],
                "name": "Algebra und Diskrete Mathematik",
                "wahl": false
            },
            {
                "ects": "6,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Reproduzieren bzw. Herleiten der wichtigsten mathematischen Definitionen, Theoreme und Beweismethoden der mathematischen\nAnalysis.\nKognitive und praktische Kompetenzen: Finden von Beweisen f\u00fcr mathematische Problemstellungen aus der Analysis; Modellieren einfacher Anwendungsprobleme aus Informatik, Naturwissenschaften und Technik als mathematische Problemstellungen und\nL\u00f6sen derselben mit geeigneten Verfahren zur analytischen und numerischen Probleml\u00f6sung.\nSoziale Kompetenzen und Selbstkompetenzen: Pr\u00e4sentieren von Probleml\u00f6sungen vor einer \u00dcbungsgruppe.\nInhalt:\n\u2022   Folgen, Reihen und Funktionen: Folgen reeller Zahlen (Grenzwert, Monotonie und\nBeschr\u00e4nktheit, Konvergenzuntersuchungen); unendliche Reihen (Konvergenzkriterien, Cauchyprodukt und Potenzreihen); asymptotischer Vergleich von Folgen\n(Landausymbole: O(), o(), \u2126()).\n\u2022   Elementare Funktionen: Potenzen mit reellen Exponenten; Exponentialfunktion\nund Logarithmus; Darstellung der Exponentialfunktion; Winkelfunktionen und Arcusfunktionen.\n\u2022   Grenzwerte und Nullstellen von Funktionen, Stetigkeit: metrische und topologische\nGrundbegriffe (offene, geschlossene Mengen, Umgebungen, Basis, H\u00e4ufungspunkte); Umgebungs und Folgenstetigkeit Eigenschaften stetiger Funktionen: Nullstellensatz, Zwischenwertsatz, Monotonie.\n\u2022   Differentialrechnung in einer Variablen: Differenzenquotient und Differenzierbarkeit; Ableitung einfacher Funktionen; Eigenschaften und Ableitungsregeln; Mittelwertsatz der Differentialrechnung; Taylorreihen; Monotonie und die erste Ableitung; h\u00f6here Ableitungen; verallgemeinerter Mittelwertsatz und die Regel von de\nl\u2019Hospital.\n\u2022   Integralrechnung in einer Variablen: Definition und Eigenschaften Riemann-Integral; Integration als Umkehrung der Differentiation, Fl\u00e4che unter Kurven; Techniken des Integrierens; Mittelwert- und Hauptsatz der Differential- und Integralrechnung; uneigentliche Integrale.\n\u2022   Elementare Differentialgleichungen: lineare Differentialgleichungen erster Ordnung.\n\u2022   Grundlagen Differentialrechnung in mehreren Variablen: Funktionen in mehreren\nVariablen; partielle Ableitungen, totale Ableitung; Ableitungsregeln; Richtungsableitung; Taylorentwicklung; Hauptsatz \u00fcber implizite Funktionen; lokale Extrema.\n\u2022   Computer-Numerik: Zahlendarstellungsfehler; Konversionsfehler; Fehlerfortpflanzung (Summe, Produkte, Polynome, elementare Funktionen); algorithmische Fehlerfortpflanzung, Konditionszahlen.\nErwartete Vorkenntnisse: Fundierte Mathematik-Kenntnisse auf AHS/BHS-Maturaniveau.\nVerpflichtende Voraussetzungen: Keine.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: W\u00f6chentliche Vorlesungen mit kontinuierlich begleitender \u00dcbung (individuell auszuarbeitende \u00dcbungsbeispiele, L\u00f6sungspr\u00e4sentation an der Tafel), wodurch die in der Vorlesung\nvermittelten Inhalte effizient erlernt und die mathematische Probleml\u00f6sungskompetenz\ntrainiert wird. Leistungsfeststellung durch mehrere L\u00f6sungspr\u00e4sentationen, \u00dcbungstests,\nAbschlusspr\u00fcfung.",
                "lvas": [
                    {
                        "ects": "2,0",
                        "lva_typ": "VO",
                        "name": "Analysis f\u00fcr Informatik und Wirtschaftsinformatik",
                        "not_steop_constrained": true,
                        "semester": "2. Semester (SS)",
                        "sst": "2,0"
                    },
                    {
                        "ects": "4,0",
                        "lva_typ": "UE",
                        "name": "Analysis f\u00fcr Informatik und Wirtschaftsinformatik",
                        "not_steop_constrained": true,
                        "semester": "2. Semester (SS)",
                        "sst": "2,0"
                    }
                ],
                "name": "Analysis",
                "wahl": false
            },
            {
                "ects": "6,0",
                "lernergebnisse": "Vermittlung der statistischen Denk- und Arbeitsweise\nFachliche und methodische Kompetenzen: Grundlagen der Wahrscheinlichkeitstheorie;\nKenntnisse von statistischer Sch\u00e4tzung und statistischem Testen; Kenntisse wichtiger\nstatistischer Methoden\nKognitive und praktische Kompetenzen: Anwendung von statistischen Methodiken auf\nkonkrete Problemstellungen; Kenntnisse im Umgang mit statistischer Software\nSoziale Kompetenzen und Selbstkompetenzen: Umsetzung von konkreten Aufgaben in\nstatistische Problemstellungen; L\u00f6sung statistischer Problemstellungen sowohl formal\nals auch mit dem Computer\nInhalt: Dieses Modul vermittelt im Einzelnen folgende Themen: Beschreibende Statistik,\nGrundlagen der Wahrscheinlichkeitstheorie, Elementare Informationstheorie, Zufallsvariablen und Verteilungen, Punkt- und Intervallsch\u00e4tzungen, Tests von Hypothesen, Varianzanalyse, Regression, Korrelation, Z\u00e4hlstatistik.\nErwartete Vorkenntnisse: Grundkenntnisse der Analysis und Algebra.\nDiese Voraussetzungen werden in folgenden Modulen vermittelt: Algebra und Diskrete\nMathematik, Analysis\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Die\nLehrveranstaltung Statistik und Wahrscheinlichkeitstheorie besteht aus einem Vorlesungsteil und einem \u00dcbungsteil. Die beschriebenen Inhalte und Konzepte werden im\nRahmen der Vorlesungseinheit erl\u00e4utert. Der \u00dcbungsteil besteht aus einem Teil, bei\ndem Beispiele analytisch gel\u00f6st werden, und einem Teil, bei dem praktische Problemstellungen mit Hilfe statistischer Software gel\u00f6st werden. Diese Veranstaltungen sollen\nsowohl im Winter- als auch im Sommersemester angeboten werden.",
                "lvas": [
                    {
                        "ects": "3,0",
                        "lva_typ": "VO",
                        "name": "Statistik und Wahrscheinlichkeitstheorie",
                        "not_steop_constrained": false,
                        "semester": "3. Semester (WS)",
                        "sst": "2,0"
                    },
                    {
                        "ects": "3,0",
                        "lva_typ": "UE",
                        "name": "Statistik und Wahrscheinlichkeitstheorie",
                        "not_steop_constrained": false,
                        "semester": "3. Semester (WS)",
                        "sst": "2,0"
                    }
                ],
                "name": "Statistik und Wahrscheinlichkeitstheorie",
                "wahl": false
            },
            {
                "ects": "6,0",
                "lernergebnisse": "Dieses Modul befasst sich mit den theoretischen und logischen Grundlagen der Informatik.\nFachliche und methodische Kompetenzen: Fundamentale Konzepte und Resultate der\nMathematischen Logik, Automaten und formalen Sprachen, Berechenbarkeit und Komplexit\u00e4t sowie der formalen Semantik von Programmiersprachen.\nKognitive und praktische Kompetenzen: Die Studierenden erwerben die F\u00e4higkeit, formale\nBeschreibungen lesen und vestehen und Konzepte formal-mathematisch beschreiben zu\nk\u00f6nnen. Weiters lernen sie, die Struktur von Beweisen und Argumentationen zu verstehen\nund selber solche zu f\u00fchren.\nSoziale Kompetenzen und Selbstkompetenzen: Selbst\u00e4ndiges L\u00f6sen von Problemen.\nInhalt:\n\u2022   Mathematische Logik: Aussagenlogik, Pr\u00e4dikatenlogik, elementare Modallogiken\nwie LTL, Kripkemodelle, Kalk\u00fclbegriff, logische Struktur formaler Beweise\n\u2022   Automatentheorie: endliche Automaten, B\u00fcchiautomaten, Transducer, Operationen auf Automaten\n\u2022   Formale Sprachen: Chomsky Hierarchie\n\u2022   Berechenbarkeit und Komplexit\u00e4t: universelle Berechenbarkeit, Unentscheidbarkeit, NP-Vollst\u00e4ndigkeit\n\u2022   Grundlagen der operationalen und axiomatischen Semantik von Programmiersprachen\n\u2022   Grundlagen von Prozessalgebren und Concurrency (CSP, CCS)\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen: Automaten, regul\u00e4re Ausdr\u00fccke, Grammatiken\nsowie Aussagen- und Pr\u00e4dikatenlogik als Spezifikationssprachen, Syntax und Semantik,\nModellbegriff.\nDiese Voraussetzungen werden in der Lehrveranstaltung Formale Modellierung des Moduls Modellierung vermittelt.\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Die\nInhalte werden in einem Vorlesungsteil vorgestellt und in begleitenden \u00dcbungen von den\nStudierenden erarbeitet. Die \u00dcbungsaufgaben k\u00f6nnen zeitlich und \u00f6rtlich weitgehend ungebunden einzeln oder in Gruppen gel\u00f6st werden. Die L\u00f6sungen werden bei regelm\u00e4\u00dfigen\nTreffen mit Lehrenden und TutorInnen besprochen und korrigiert. Die Beurteilung erfolgt auf Basis schriftlicher Tests und der kontinuierlich in den \u00dcbungen erbrachten\nLeistungen. Der \u00dcbungsbetrieb und die Tests k\u00f6nnen computerunterst\u00fctzt durchgef\u00fchrt\nwerden.",
                "lvas": [
                    {
                        "ects": "6,0",
                        "lva_typ": "VU",
                        "name": "Theoretische Informatik und Logik",
                        "not_steop_constrained": false,
                        "semester": "3. Semester (WS)",
                        "sst": "4,0"
                    }
                ],
                "name": "Theoretische Informatik und Logik",
                "wahl": false
            },
            {
                "ects": "6,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen die Studierenden die wesentlichen mathematischen Schlussweisen und Beweistechniken benennen, die Korrektheit der Schlussweisen argumentieren und den Zusammenhang\nder Beweistechniken mit Kalk\u00fclen der formalen Logik herstellen.\nKognitive und praktische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen\ndie Studierenden die Korrektheit gegebener Beweise argumentieren, (auch komplexere)\nBeweise selbst erstellen und strukturieren, unterschiedliche Induktionsprinzipien korrekt\nanwenden, sowie Induktionshypothesen kreativ erstellen.\nSoziale Kompetenzen und Selbstkompetenzen: Nach positiver Absolvierung des Moduls\nk\u00f6nnen die Studierenden die Beweisideen und Beweise kommunizieren.\nInhalt:\n\u2022   Was ist ein Beweis? Welche Aufgaben hat er?\n\u2022   Einfache Beweistechniken\n\u2022   Beweis von All- und Existenzaussagen, Konjunktionen, Disjunktionen, Implikationen, \u00c4quivalenzen\n\u2022   Nutzung dieser Aussagen in einem Beweis\n\u2022   Zusammenhang zum Kalk\u00fcl des nat\u00fcrlichen Schliessens\n\u2022   Was ist Induktion? Wozu wird sie ben\u00f6tigt?\n\u2022   Arten der Induktion (mathematische, starke, strukturelle, Noether\u2019sche), jeweils\nmit Diskussion des entsprechenden Induktionsschemas und Anwendungsf\u00e4lle (ausf\u00fchrlich demonstriert an Beispielen)\n\u2022   Wie schreibt man einen Induktionsbeweis?\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen: Es wird erwartet, dass die Studierenden vor der\nAbsolvierung des Moduls die grundlegenden Beweisprinzipien benennen und beschreiben\nk\u00f6nnen.\nKognitive und praktische Kompetenzen: Es wird erwartet, dass die Studierenden vor\nder Absolvierung des Moduls einfache nat\u00fcrlichsprachlich gegebene Sachverhalte korrekt formalisieren und diese beweisen k\u00f6nnen. Desweiteren sollen die Studierenden vor\nder Absolvierung des Moduls einfache Programmieraufgaben als rekursives Programm\nformulieren k\u00f6nnen.\nSoziale Kompetenzen und Selbstkompetenzen: Keine speziellen Voraussetzungen.\nDiese Voraussetzungen werden im Modul Algebra und Diskrete Mathematik vermittelt.\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Geblockte Einf\u00fchrungsvorlesung (im Gesamtumfang von knapp 1,5 ECTS), danach umfangreiche individuell auszuarbeitende Aufgaben zum Argumentieren und Beweisen (im\nUmfang von 4,5 ECTS). Ausf\u00fchrliche Pr\u00e4sentation der Beweise (alle L\u00f6sungen durch jede Teilnehmerin/jeden Teilnehmer). Exemplarische Ausarbeitung einiger L\u00f6sungen, Korrektur durch LVA Leiter/Tutoren zwecks R\u00fcckmeldung. Leistungsermittlung auf Grund\nder Pr\u00e4sentationen und der berichtigten schriftlichen Ausarbeitungen.",
                "lvas": [
                    {
                        "ects": "6,0",
                        "lva_typ": "VU",
                        "name": "Argumentieren und Beweisen",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "4,0"
                    }
                ],
                "name": "Argumentieren und Beweisen",
                "wahl": true
            },
            {
                "ects": "4,5",
                "lernergebnisse": "Vertrautheit der Studierenden mit den grundlegenden Konzepten algorithmisch-numerischer L\u00f6sungsmethoden, \u00fcberlegte Auswahl und der effiziente Einsatz\nkommerzieller oder frei verf\u00fcgbarer numerischer Software; Die Studierenden lernen zu\nerkennen, ob ein Programm eine angemessene L\u00f6sung geliefert hat und was zu tun ist,\nwenn dies nicht der Fall ist; Interpretation und Analyse numerisch erhaltener L\u00f6sungen.\nInhalt: Grundlegende Fehlerbegriffe: Datenfehler, Verfahrens- oder Diskretisierungsfehler, Rundungsfehler; Kondition mathematischer Probleme, numerische L\u00f6sung linearer\nund nichtlinearer Gleichungssysteme, polynomiale Interpolation und Approximation, numerische Integration, numerische L\u00f6sung von Differentialgleichungen, Design und Verwendung numerischer Algorithmen bzw. numerischer Software.\nDie praktische Umsetzung und Vertiefung des Stoffes der Vorlesung erfolgt in den\n\u00dcbungen durch (realit\u00e4tsnahe) numerische \u00dcbungsbeispiele. Diese beinhalten sowohl\ntheoretische Aufgabenstellungen, etwa was das Design oder die Analyse numerisch stabiler Algorithmen betrifft, als auch die praktische Implementierung und das Testen und\nBewerten am Computer. Standardsoftware kommt zum Einsatz (z.B. MATLAB).\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen: Mathematische Grundkenntnisse\nKognitive und praktische Kompetenzen: Programmierung mit MATLAB\nDiese Voraussetzungen werden in folgenden Modulen vermittelt: Algebra und Diskrete\nMathematik, Analysis, Einf\u00fchrung in die Programmierung, Technische Grundlagen der\nInformatik\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Die\nVermittlung der theoretischen Grundlagen erfolgt in der Vorlesung, die Erarbeitung der\npraktische Fertigkeiten erfolgt in den w\u00f6chentlichen \u00dcbungen.\nDie Pr\u00fcfung ist m\u00fcndlich und beinhaltet eher theoretisch gehaltene Fragen zum Vorlesungsstoff, teilweise auch kurz gehaltene praktische Beispiele; die Beurteilung der\n\u00dcbungsleistung erfolgt aufgrund der Anzahl der gekreuzten Beispiele, der Tafelleistungen\nund der schriftlichen Ausarbeitung von Beispielen.",
                "lvas": [
                    {
                        "ects": "3,0",
                        "lva_typ": "VO",
                        "name": "Computernumerik",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    },
                    {
                        "ects": "1,5",
                        "lva_typ": "UE",
                        "name": "Computernumerik",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "1,0"
                    }
                ],
                "name": "Computernumerik",
                "wahl": true
            },
            {
                "ects": "9,0",
                "lernergebnisse": "Vermittlung von datenorientierten, computerintensiven Methoden zur\nverarbeitung komplexer Daten\nFachliche und methodische Kompetenzen:\n\u2022   Multivariate Methoden\n\u2022   Grundlagen der statistischen Simulation\nKognitive und praktische Kompetenzen:\n\u2022   Anwendung multivariater Methoden auf konkrete Problemstellungen\n\u2022   Anwendung von computerintensiven Methoden und Software auf komplexe Problemstellungen\nSoziale Kompetenzen und Selbstkompetenzen:\n\u2022   Datenorientierte L\u00f6sung von statistischen Problemstellungen\n\u2022   L\u00f6sungen von Problemen mit open-source Software\nInhalt: Clusteranalyse, Hauptkomponenten- und Faktorenanalyse, Diskriminanzanalyse, Zufallszahlengeneratoren und Reproduzierbarkeit, MCMC (Markov Chain Monte\nCarlo) Methoden, Resamplingverfahren (Bootstrap, Jackknife, Kreuzvalidierung), Testen mittels statistischer Simulation, Anwendungen von Resamplingverfahren in Zeitreihen, Datenimputation und Regression.\nErwartete Vorkenntnisse: Grundlegende Kenntnisse der computerorientieren Statistik.\nDiese Voraussetzungen werden im Modul Statistik und Wahrscheinlichkeitstheorie vermittelt.\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: In\nder Lehrveranstaltung Multivariate Statistik werden die g\u00e4ngigen multivariaten Methoden formal vermittelt, und mit der Statistiksoftware R an konkreten Daten angewandt\nsowie Ergebnisse diskutiert.\nIn der Lehrveranstaltung Statistische Simulation und computerintensive Methoden\n(VU) werden simulationsbasierte L\u00f6sungsstrategien f\u00fcr komplexe Problemstellungen gelehrt. Die Verfahren der statistischen Simulation und computerintensiver Methoden werden theoretisch als auch praktisch mittels moderner freier open-source Statistiksoftware\n(R) vermittelt.",
                "lvas": [
                    {
                        "ects": "4,5",
                        "lva_typ": "VO",
                        "name": "Multivariate Statistik",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "3,0"
                    },
                    {
                        "ects": "1,5",
                        "lva_typ": "UE",
                        "name": "Multivariate Statistik",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "1,0"
                    },
                    {
                        "ects": "3,0",
                        "lva_typ": "VU",
                        "name": "Statistische Simulation und computerintensive Methoden",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    }
                ],
                "name": "Multivariate und computerintensive statistische Methoden",
                "wahl": true
            }
        ],
        "name": "Mathematik, Statistik und Theoretische Informatik"
    },
    {
        "module": [
            {
                "ects": "6,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen die Studierenden\n\u2022   geeignete Modellierungskonzepte zur Modellierung eines Systems w\u00e4hlen,\n\u2022   ein System mit Hilfe von geeigneten Modellen beschreiben,\n\u2022   syntaktische und semantische Fehler in einem Modell erkennen und korrigieren.\nKognitive und praktische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen\ndie Studierenden\n\u2022   Inhalte nat\u00fcrlichsprachiger Aufgaben in entsprechenden Modellen abbilden,\n\u2022   Modelle eines Systems analysieren und kritisieren,\n\u2022   verschiedene alternative Modelle f\u00fcr ein System beurteilen.\nSoziale Kompetenzen und Selbstkompetenzen: Nach positiver Absolvierung des Moduls\nk\u00f6nnen die Studierenden\n\u2022   Modellierungsaufgaben selbst\u00e4ndig l\u00f6sen,\n\u2022   anderen ihre Modelle kommunizieren,\n\u2022   Modelle gemeinsam in Kleingruppen erarbeiten.\nInhalt:\n\u2022   Aussagenlogik\n\u2022   Pr\u00e4dikatenlogik als Spezifikationssprache\n\u2022   Endliche Automaten und regul\u00e4re Ausdr\u00fccke\n\u2022   Formale Grammatiken\n\u2022   Petri-Netze\n\u2022   Klassen- und Objektdiagramm\n\u2022   Sequenzdiagramm\n\u2022   Zustandsdiagramm\n\u2022   Aktivit\u00e4tsdiagramm\n\u2022   Anwendungsfalldiagramm\nErwartete Vorkenntnisse: Keine.\nVerpflichtende Voraussetzungen: Keine.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Inhalte werden in Vortr\u00e4gen vorgestellt und in begleitenden \u00dcbungen von Studierenden\nerarbeitet. Die Beurteilung erfolgt auf Basis schriftlicher Tests und kontinuierlich in\n\u00dcbungen erbrachter Leistungen.",
                "lvas": [
                    {
                        "ects": "3,0",
                        "lva_typ": "VU",
                        "name": "Formale Modellierung",
                        "not_steop_constrained": true,
                        "semester": "2. Semester (SS)",
                        "sst": "2,0"
                    },
                    {
                        "ects": "3,0",
                        "lva_typ": "VU",
                        "name": "Objektorientierte Modellierung",
                        "not_steop_constrained": true,
                        "semester": "2. Semester (SS)",
                        "sst": "2,0"
                    }
                ],
                "name": "Modellierung",
                "wahl": false
            },
            {
                "ects": "9,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen die Studierenden die unter \"Inhalt\" angef\u00fchrten Konzepte und Techniken erkl\u00e4ren.\nKognitive und praktische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen\ndie Studierenden:\n\u2022   Ein praxisrelevantes Software-Prozessmodell (z.B. Unified Process oder Scrum)\nanwenden\n\u2022   Konzepte und Methoden f\u00fcr die einzelnen Phasen eines Software-EngineeringProjekts anwenden (etwa Algorithmen, Datenstrukturen und Programmierung,\nDatenbanken)\n\u2022   Konzepte, Modelle und Werkzeuge im Rahmen eines mittelgro\u00dfen Software-Entwicklungsprojekts ausw\u00e4hlen und anwenden\n\u2022   Techniken f\u00fcr Abstraktion und Modellbildung in der Softwaretechnik anwenden\n\u2022   Hochwertige Planung und Dokumentation herstellen bzw. anpassen\nSoziale Kompetenzen und Selbstkompetenzen: Nach positiver Absolvierung des Moduls\nk\u00f6nnen die Studierenden:\n\u2022   Software Engineering Probleme in einem verteilt arbeitenden Team l\u00f6sen\n\u2022   Entscheidungen einer Rolle in einem Projekt verantworten, etwa Teamkoordinator,\nTechnischer Architekt, Tester\n\u2022   Wissen in einem mittelgro\u00dfen Team sammeln und pflegen\n\u2022   Projektergebnisse pr\u00e4sentieren\nInhalt: Inhalte des Vorlesungsteils:\n\u2022   Einf\u00fchrung in Software Engineering: Projekttypen\n\u2022   Vorgehensmodelle und Rollen im Software Engineering\n\u2022   Methoden der Softwaretechnik (aus dem IEEE Software Engineering Body of\nKnowledge)\n\u2022   Anforderungsanalyse und Spezifikation\n\u2022   Modellierung von Anwendungsszenarien: Daten- und Kontrollflussmodelle in UML\n\u2022   Systementwurf, Methoden der Implementierung\n\u2022   Grundkenntnisse der Qualit\u00e4tssicherung im Kontext der Softwareentwicklung\n\u2022   Integration und Test\n\u2022   Technische Grundlagen: Techniken und Werkzeuge\n\u2022   Test Driven Development (TDD)\n\u2022   Projektmanagement: Projektauftrag, Umfeldanalyse; Strukturpl\u00e4ne und Planungsablauf; Team Management\nInhalte des \u00dcbungsteils:\n\u2022   Einen agilen Software-Prozess, etwa Scrum, anwenden\n\u2022   Siehe praktische Kompetenzen des Moduls\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen:\n\u2022   Objektorientierte Analyse, Design und Programmierung\n\u2022   Grundlagen der Unified Modeling Language (UML)\n\u2022   Grundkenntnisse aus Algorithmen und Datenstrukturen\n\u2022   Grundkenntnisse zu Datenbanksystemen\nKognitive und praktische Kompetenzen:\n\u2022   Eine praxisrelevante Programmiersprache und -werkzeuge (z.B. Java oder C++)\nanwenden\n\u2022   Eine Integrierten Entwicklungsumgebung und Quellcodeverwaltung anwenden\nDiese Voraussetzungen werden in folgenden Modulen vermittelt: Einf\u00fchrung in die Programmierung, Modellierung\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Inhalte (theoretische Konzepte und methodische Grundlagen) werden in Vortr\u00e4gen vorgestellt und in begleitenden \u00dcbungen von Studierenden erarbeitet. Auffrischung der\nVorkenntnisse in Tutorien zu Beginn des Projekts. In der Vorlesung werden Erfahrungen\naus der praktischen \u00dcbung reflektiert. \u00dcbungsaufgaben ergeben sich aus der Entwicklung eines mittelgro\u00dfes Software Engineering Projekt mit dem Ziel eines real brauchbaren Software-Prototyps und zugeh\u00f6riger Dokumentation. Diese \u00dcbungsaufgaben sind\ninnerhalb vereinbarter Fristen individuell und im Team von 4 bis 6 Personen zu l\u00f6sen. Intensive Betreuung der Teams in w\u00f6chentlichen Treffen mit dem Tutor. Intensiver\nEinsatz von entsprechenden Werkzeugen z.B. Integrierten Entwicklungsumgebung und\nQuellcodeverwaltung sowie Testautomatisierung zur Umsetzung der SE-Konzepte und\n-Methoden. Die Beurteilung erfolgt auf Basis eines Eingangstests, um die Vorkenntnisse\nzu \u00fcberpr\u00fcfen, einer kontinuierlichen \u00dcberpr\u00fcfung der L\u00f6sungen der \u00dcbungsaufgaben,\ndurch Reviews der Ergebnisse sowie durch Pr\u00fcfungen bzw. Tests.",
                "lvas": [
                    {
                        "ects": "3,0",
                        "lva_typ": "VO",
                        "name": "Software Engineering und Projektmanagement",
                        "not_steop_constrained": false,
                        "semester": "4. Semester (SS)",
                        "sst": "2,0"
                    },
                    {
                        "ects": "6,0",
                        "lva_typ": "PR",
                        "name": "Software Engineering und Projektmanagement",
                        "not_steop_constrained": false,
                        "semester": "4. Semester (SS)",
                        "sst": "4,0"
                    }
                ],
                "name": "Software Engineering und Projektmanagement",
                "wahl": false
            },
            {
                "ects": "6,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen:\n\u2022   Kenntnis unterschiedlicher Spezifikationsformalismen, ihrer Semantik und ihrer\nAnwendungsgebiete\n\u2022   Kenntnis unterschiedlicher Verifikationstools\n\u2022   Verst\u00e4ndnis grundlegender Methoden der Modellierung in Hinsicht auf Verifikationsfragen\n\u2022   Beispielhafte Kenntnisse zu Zertifikation und Industriestandards in Hinsicht auf\nVerifikation\nKognitive und praktische Kompetenzen:\n\u2022   Praktischer Umgang mit Spezifikationsformalismen hinsichtlich ihrer Semantik\nund hinsichtlich Requirement Engineering\n\u2022   Praktischer Umgang mit Verifikationstools\n\u2022   Praktische Modellierung und Verifikation von Systemen und Interpretation der\nErgebnisse\nSoziale Kompetenzen und Selbstkompetenzen:\n\u2022   Verst\u00e4ndnis f\u00fcr das Gefahrenpotential fehlerhafter Software und Hardware\n\u2022   Verst\u00e4ndnis f\u00fcr die Bedeutung formaler Methoden in der Produktentwicklung\n\u2022   Anwendung theoretischer Konzepte auf angewandte Fragestellungen\nInhalt:\n\u2022   Methoden der Modellierung und Spezifikation durch Logik, Automaten, Assertions,\nCoverage Kriterien\n\u2022   Verifikationswerkzeuge, insbesonders Model Checker, Statische Analyse, Theorembeweisen, Testen\n\u2022   Praktischer Umgang mit Verifikationswerkzeugen\n\u2022   Grundlagen zur Zertifizierung und zu Standards in der industriellen Validierung\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen: Einf\u00fchrung in die Programmierung, Modellierung, theoretische Informatik und Mathematik.\nKognitive und praktische Kompetenzen: Ge\u00fcbter, fachgerechter Umgang mit Computerprogrammen und Konzepten der theoretischen Informatik und Mathematik.\nSoziale Kompetenzen und Selbstkompetenzen: F\u00e4higkeit zur selbst\u00e4ndigen Einarbeitung\nin Tools anhand schriftlicher Unterlagen.\nDiese Voraussetzungen werden in folgenden Modulen vermittelt: Algebra und Diskrete\nMathematik, Einf\u00fchrung in die Programmierung, Modellierung, Theoretische Informatik\nund Logik\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Die\nin der Vorlesung vermittelten Grundlagen und Methoden werden in praktischen \u00dcbungen\nam Computer und auf Papier vertieft und angewandt. Die Leistungsfeststellung erfolgt\ndurch Beispiel-Abgaben und schriftliche Tests/Pr\u00fcfungen.",
                "lvas": [
                    {
                        "ects": "6,0",
                        "lva_typ": "VU",
                        "name": "Programm- und Systemverifikation",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "4,5"
                    }
                ],
                "name": "Programm- und Systemverifikation",
                "wahl": true
            },
            {
                "ects": "6,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Dieses Modul befasst sich mit der strategischen qualit\u00e4tserzeugenden Supervision von SW- und IT-Projekten in den vielf\u00e4ltigen\nAnwendungsbereichen der Informatik (z.B. Betriebliche Informationssysteme, InternetPlattformen, Versicherungs-IT, Medizinische Informatik). Einige typische methodische\nSchwachstellen in der Praxis sollen anhand von konkreten Projekt- und System-Beobachtungen identifiziert und erlebt werden. Ihre Behebung im konkreten Umfeld soll konzipiert und diskutiert werden. Ziel ist, den Studierenden die Ursachen des Abstandes\nzwischen SE-Theorie und konkreter Praxis verst\u00e4ndlich zu machen und in Form konkreter Fallbeispiele die Behebung erfahrbar zu machen.\nKognitive und praktische Kompetenzen: Das Modul vermittelt Kenntnisse \u00fcber Strategien\nund Konzepte zur Begleitung, Bewertung und Steuerung von Software-Projekten. Es\nvermittelt Kenntnisse \u00fcber Kriterien f\u00fcr erfolgreiche Projekte sowie deren Evaluierung\nund Beurteilung anhand etablierter Software Engineering- und Projekt-ManagementMethoden.\nSoziale Kompetenzen und Selbstkompetenzen: Das Modul behandelt die Notwendigkeit\neffektiver Kommunikation zur Bewertung und Steuerung von Softwareentwicklungsprojekten. Es wird die Bedeutung von pragmatischem Risikomanagement, realit\u00e4tsbezogenen Projektkennzahlen und interdisziplin\u00e4rem Denken f\u00fcr den Projekterfolg vermittelt\nund auf die M\u00f6glichkeiten und Herausforderungen bei der Einbindung agiler SoftwareEntwicklungsmethoden wie z.B. Scrum eingegangen.\nInhalt:\n\u2022   Basisinhalte aus Qualit\u00e4tssicherung (QS) und Usablility\n\u2022   Fallbeispiele aus konkreten Softwareprojekten, Schwerpunkt auf Erhebungsmethoden aus QS und Usability\nErwartete Vorkenntnisse:\nDiese Modul baut auf den Kenntnissen, Fertigkeiten und Kompetenzen des Moduls Softwarequalit\u00e4tssicherung auf.\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: In\nForm von Vorlesungen mit \u00dcbungen werden die vertiefenden Inhalte vermittelt.",
                "lvas": [
                    {
                        "ects": "6,0",
                        "lva_typ": "VU",
                        "name": "Softwareprojekt-Beobachtung und -Controlling",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "4,0"
                    }
                ],
                "name": "Softwareprojekt-Beobachtung und -Controlling",
                "wahl": true
            },
            {
                "ects": "6,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen die Studierenden Folgendes erkl\u00e4ren:\n\u2022   Motivation und Ziele der Softwarequalit\u00e4tssicherung\n\u2022   Definition und Messung von Qualit\u00e4t\n\u2022   Organisatorische Qualit\u00e4tssicherung\n\u2022   Statische und dynamische Methoden der Qualit\u00e4tssicherung\n\u2022   Methoden zur Sicherstellung und Verbesserung der Qualit\u00e4t von Produkten.\nKognitive und praktische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen\ndie Studierenden:\n\u2022   Passende QS-Methoden in einem Entwicklungsprojekt ausw\u00e4hlen\n\u2022   Statische und dynamische Methoden zur Software-Qualit\u00e4tssicherung anwenden\nSoziale Kompetenzen und Selbstkompetenzen: Nach positiver Absolvierung des Moduls\nk\u00f6nnen die Studierenden:\n\u2022   Einen Qualit\u00e4tsplan pr\u00e4sentieren\nInhalt: Inhalte des Vorlesungsteils:\n\u2022   Grundlagen der Software-Qualit\u00e4tssicherung\n\u2022   Qualit\u00e4tskontrolle und Fehlerreduktion: Reviews und Inspektionen\n\u2022   Dynamische Qualit\u00e4tssicherung\n\u2022   Organisatorische Qualit\u00e4tssicherung\n\u2022   Qualit\u00e4tssicherungs-Standards\n\u2022   Testprozess\nInhalte des \u00dcbungsteils:\n\u2022   Review von Software-Modellen\n\u2022   Kollaborative Code-Inspektionen\n\u2022   Statische Code Analyse / Antipattern Analyse\n\u2022   Test-Driven Development\n\u2022   Testplanerstellung inkl. Methoden f\u00fcr das Ableiten von Testf\u00e4llen\n\u2022   Testautomatisierung Blackbox/Whitebox\n\u2022   Testen in agilen Prozessen\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen: Es wird erwartet, dass Studierende vor Absolvierung des Moduls kennen:\n\u2022   Grundlagen der Mathematik und Statistik\n\u2022   Grundlagen der Unified Modeling Language (UML)\n\u2022   Objektorientierte Analyse, Design und Programmierung\n\u2022   Grundlegende Design-Patterns in der Programmierung\n\u2022   Grundkenntnisse zu Datenbanksystemen\nKognitive und praktische Kompetenzen: Es wird erwartet, dass Studierende vor Absolvierung des Moduls k\u00f6nnen:\n\u2022   Beherrschung einer praxisrelevanten Programmiersprache und -werkzeuge (z.B. Java oder C++)\n\u2022   Umgang mit einer Integrierten Entwicklungsumgebung, Build Management und\nQuellcodeverwaltung\nSoziale Kompetenzen und Selbstkompetenzen: Es wird erwartet, dass Studierende vor\nAbsolvierung des Moduls k\u00f6nnen:\n\u2022   Programmieraufgaben selbst\u00e4ndig l\u00f6sen\nDiese Vorkenntnisse werden in folgenden Modulen vermittelt: Einf\u00fchrung in die Programmierung, Modellierung, Software Engineering und Projektmanagement\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Inhalte (theoretische Konzepte und methodische Grundlagen) werden in Vortr\u00e4gen vorgestellt und in begleitenden \u00dcbungen von Studierenden erarbeitet. \u00dcbungsaufgaben sind\nvorwiegend praktische Beispiele aus den Bereichen Reviews und Testen am Computer,\ndie innerhalb vorgegebener Fristen individuell zu l\u00f6sen sind. Intensiver Einsatz von entsprechenden Werkzeugen z.B. Testautomatisierung zur Umsetzung der QS-Konzepte und\n-Methoden. In Workshops mit Gruppenarbeiten werden organisatorische Themen wie agile Organisation von Software-Teams erarbeitet. Die Beurteilung erfolgt auf Basis einer\nkontinuierlichen \u00dcberpr\u00fcfung der L\u00f6sungen dieser Aufgaben, durch aktive Teilnahme an\nden Workshops sowie durch Pr\u00fcfung(en) bzw. Test(s).",
                "lvas": [
                    {
                        "ects": "6,0",
                        "lva_typ": "VU",
                        "name": "Software-Qualit\u00e4tssicherung",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "4,0"
                    }
                ],
                "name": "Softwarequalit\u00e4tssicherung",
                "wahl": true
            },
            {
                "ects": "6,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Das Modul befasst sich mit der User-Research\ngetriebenen Konzeption, Gestaltung und Evaluierung von Benutzerschnittstellen. Das\nModul gliedert sich in zwei gro\u00dfe Teilgebiete: Im ersten Teil werden die grundlegenden\nKonzepte von Usability Engineering gelehrt. Anhand von praxisnahen Beispielen sollen\nStudierende den Einsatz von Usability Engineering erlernen. Die gelehrten Methoden\ndecken den gesamten Design Prozess von Requirements Engineering (z.B. Kontextuelle\nInterviews), Prototyping bis hin zum Testen von Systemen (z.B. Usability Test, Heuristische Evaluierung) ab. Der zweite Teil dieses Moduls ist den Methoden der Mobile\nInteraction Research gewidmet, mit besonderem Fokus auf aktuellen Entwicklungen und\nTrends. Aufbauend auf den Grundlagen des Usability Engineerings werden Besonderheiten und Spezifika sowohl im Design als auch in der Evaluierung von mobilen Anwendungen hervorgehoben.\nKognitive und praktische Kompetenzen: Das Modul vermittelt Kenntnisse \u00fcber Qualit\u00e4tskriterien f\u00fcr gute Usability sowie deren Evaluierung und Beurteilung anhand etablierter Usability Engineering Methoden und zeigt aktuelle Entwicklungen und zuk\u00fcnftige\nTrends im Bereich der Mobile Interaction auf.\nSoziale Kompetenzen und Selbstkompetenzen: Das Modul vermittelt die Bedeutung von\nUsability Engineering f\u00fcr den Erfolg von Softwareentwicklungsprojekten und geht auf\ndie M\u00f6glichkeiten und Herausforderungen der Einbindung von Usability Engineering\nMethoden in Software Engineering Prozessen ein.\nInhalt: Usability Engineering:\n\u2022   Einf\u00fchrung in Usability Engineering\n\u2022   Qualit\u00e4tskriterien f\u00fcr Usability Engineering und deren Messung und Beurteilung\n\u2022   Usability Engineering Lifecycle\n\u2022   Methoden des Usability Engineerings in Anlehnung an die Phasen des Human Centered Design Prozesses: Kontextanalyse, Requirementsanalyse, Design and Prototyping, Evaluierung\n\u2022   Praktische Anwendung der vorgestellten Methoden in einem \u00dcbungsteil\nPilots in Mobile Interaction: User-centered Interaction Research and Evaluation:\n\u2022   Einf\u00fchrung in User-centered Interaction Research\n\u2022   Quality of Experience Methods and Applications\n\u2022   Perceptual Quality for Mediated Interaction\n\u2022   Cognitive User Interfaces\n\u2022   Audio-Visual Speech Synthesis\n\u2022   Advanced Mobile Spatial Interaction\n\u2022   Rapid Prototyping for Future Mobile Interactions\n\u2022   Case Study of Mobile Interfaces in Large IT Projects\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: In\nForm von Vorlesungen mit \u00dcbungen werden die vertiefenden Inhalte vermittelt. In der\nVorlesung werden theoretische Grundlagen vermittelt. Die in der Vorlesung vorgestellten\nMethoden sind in einem praktischen \u00dcbungsteil umzusetzen.",
                "lvas": [
                    {
                        "ects": "3,0",
                        "lva_typ": "VU",
                        "name": "Usability Engineering",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    },
                    {
                        "ects": "3,0",
                        "lva_typ": "VU",
                        "name": "Pilots in Mobile Interaction: User-centered Interaction Research and Evaluation",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    }
                ],
                "name": "Usability Engineering and Mobile Interaction",
                "wahl": true
            }
        ],
        "name": "Software Engineering"
    },
    {
        "module": [
            {
                "ects": "18,0",
                "lernergebnisse": "Die Lehrveranstaltungen dieses Moduls dienen der Vertiefung des Faches sowie der Aneignung au\u00dferfachlicher Kenntnisse, F\u00e4higkeiten und Kompetenzen.\nInhalt: Abh\u00e4ngig von den gew\u00e4hlten Lehrveranstaltungen.\nErwartete Vorkenntnisse: Abh\u00e4ngig von den gew\u00e4hlten Lehrveranstaltungen.\nVerpflichtende Voraussetzungen: Abh\u00e4ngig von den gew\u00e4hlten Lehrveranstaltungen.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Abh\u00e4ngig von den gew\u00e4hlten Lehrveranstaltungen.",
                "lvas": [],
                "name": "Freie Wahlf\u00e4cher und Transferable Skills",
                "wahl": false
            }
        ],
        "name": "Freie Wahlf\u00e4cher und Transferable Skills"
    },
    {
        "module": [
            {
                "ects": "13,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen:\n\u2022   Wissenschaftliche Methodik\n\u2022   Internationaler Wissenschaftsbetrieb\nKognitive und praktische Kompetenzen:\n\u2022   Systematische Recherche\n\u2022   Pr\u00e4sentationstechniken\n\u2022   Strukturierte und konzise Kommunikation von Inhalten in m\u00fcndlicher und schriftlicher Form\n\u2022   F\u00e4higkeit zur Anwendung der im Studium erworbenen Kenntnisse und Fertigkeiten\nim Kontext einer gr\u00f6\u00dferen Problemstellung\nSoziale Kompetenzen und Selbstkompetenzen:\n\u2022   Selbstorganisation\n\u2022   Eigenverantwortlichkeit und Eigeninitiative\n\u2022   Teamf\u00e4higkeit\n\u2022   Finden kreativer Probleml\u00f6sungen\n\u2022   Reflexion der eigenen Arbeit im technischen und gesellschaftlichen Kontext\nInhalt: Im Rahmen des Seminars Wissenschaftliches Arbeiten lernen die Studierenden\nwissenschaftliche Methoden und den Wissenschaftsbetrieb kennen. An Hand eines vorgegebenen Themas \u00fcben sie Recherche sowie schriftliche und m\u00fcndliche Pr\u00e4sentation.\nDarauf aufbauend wenden sie im Projekt Bachelorarbeit f\u00fcr Informatik und Wirtschaftsinformatik die im Studium erworbenen Kenntnisse und Fertigkeiten auf ein Thema an,\ndas dem Qualifikationsprofil des Studiums entspricht. Die erzielten Ergebnisse werden neben der Aufgabenstellung, den angewandten Methoden und dem Umfeld in einer schriftlichen Abschlussarbeit dargestellt.\nErwartete Vorkenntnisse: Die Arbeit an der Bachelorarbeit erfordert die Kenntnisse,\nFertigkeiten und Kompetenzen zumindest der Pflichtmodule des Bachelorstudiums.\nVerpflichtende Voraussetzungen: Positive Absolvierung der Studieneingangs- und\nOrientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Im\nSeminar besteht bei den Vortr\u00e4gen zu Wissenschaftsmethodik und -betrieb sowie bei der\nPr\u00e4sentation der Rechercheergebnisse Anwesenheitspflicht, ebenso bei der Pr\u00e4sentation\nder Bachelorarbeiten. Davon abgesehen k\u00f6nnen das Seminar- und das Bachelorarbeitsthema in Absprache mit den Lehrenden zeitlich und \u00f6rtlich weitgehend ungebunden\nbearbeitet werden. Die Beurteilung orientiert sich an der Qualit\u00e4t und Originalit\u00e4t der\nm\u00fcndlichen und schriftlichen Darstellung der Themen sowie der daf\u00fcr notwendigen Vorarbeiten und ber\u00fccksichtigt auch das Engagement bei der Diskussion der Arbeiten anderer Studierender.",
                "lvas": [
                    {
                        "ects": "10,0",
                        "lva_typ": "PR",
                        "name": "Bachelorarbeit f\u00fcr Informatik und Wirtschaftsinformatik",
                        "not_steop_constrained": false,
                        "semester": "6. Semester (SS)",
                        "sst": "5,0"
                    },
                    {
                        "ects": "3,0",
                        "lva_typ": "SE",
                        "name": "Wissenschaftliches Arbeiten",
                        "not_steop_constrained": false,
                        "semester": "5. Semester (WS)",
                        "sst": "2,0"
                    }
                ],
                "name": "Bachelorarbeit",
                "wahl": false
            }
        ],
        "name": "Bachelorarbeit"
    }
]