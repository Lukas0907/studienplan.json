[
    {
        "module": [
            {
                "ects": "6,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Die Studierenden k\u00f6nnen unterschiedliche Zahlendarstellungen im Computer beschreiben, die Grundlagen der Booleschen Algebra und\nMinimierungsverfahren erl\u00e4utern und Basiswissen zu Informations- und Codierungstheorie wiedergeben. Weiters sind sie in der Lage, einfache informell beschriebene Systeme\nzu analysieren, auf die relevanten Merkmale zu reduzieren und mit formalen Spezifikationsmethoden zu modellieren.\nKognitive und praktische Kompetenzen: Die Studierenden k\u00f6nnen methodische Ans\u00e4tze\nauf konkrete Beispiele umsetzen. Sie k\u00f6nnen die Konzepte zu den pr\u00e4sentierten Inhalten\nverstehen, die zugeh\u00f6rigen Methoden und Konzepte vergleichen, evaluieren und gezielt\nanwenden. Dar\u00fcber hinaus k\u00f6nnen sie formal-mathematische Beschreibungen lesen und\nverstehen, insbesondere die formalen Definitionen der in dem Modul vermittelten Methoden selbst, wie sie in der Fachliteratur \u00fcblich sind.\nSoziale Kompetenzen und Selbstkompetenzen: Die Studierenden k\u00f6nnen Aufgaben mit\nSelbstorganisation und in Eigenverantwortlichkeit l\u00f6sen, daf\u00fcr Zeitmanagement anwenden und Deadlines einhalten.\nInhalt:\n\u2022   Darstellung von Zahlen in Computern und Grundrechnungsarten in diesen Darstellungen\n\u2022   Boolesche Algebra und Minimierungsverfahren\n\u2022   Informations- und Codierungstheorie\n\u2022   Aussagen- und Pr\u00e4dikatenlogik\n\u2022   Endliche Automaten, insbesondere Moore- und Mealy-Automaten\n\u2022   Regul\u00e4re Ausdr\u00fccke und kontextfreie Grammatiken\n\u2022   Petri-Netze\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen: Es wird erwartet, dass Studierende vor Absolvierung des Moduls Mathematik auf AHS/BHS-Maturaniveau verstehen.\nKognitive und praktische Kompetenzen: Es wird erwartet, dass Studierende vor Absolvierung des Moduls diese Mathematik-Kenntnisse anwenden und geeignete Rechenwege\nausw\u00e4hlen, sowie fachliche Texte auf AHS/BHS-Maturaniveau verstehen k\u00f6nnen.\nSoziale Kompetenzen und Selbstkompetenzen: Es wird erwartet, dass Studierende vor\nAbsolvierung des Moduls grundlegendes Selbstmanagement anwenden k\u00f6nnen.\nVerpflichtende Voraussetzungen: Keine.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Vortr\u00e4ge und Repetitorien; Unterst\u00fctzung durch eine Online-Plattform mit betreutem Forum und Streaming; \u00dcbung in Gruppen zur Festigung des Lehrstoffes; Beurteilung der\n\u00dcbungsbeispiele; schriftliche Tests.",
                "lvas": [
                    {
                        "ects": "3,0",
                        "lva_typ": "VU",
                        "name": "Grundlagen digitaler Systeme",
                        "not_steop_constrained": true,
                        "semester": "1. Semester (WS)",
                        "sst": "2,0"
                    },
                    {
                        "ects": "3,0",
                        "lva_typ": "VU",
                        "name": "Formale Modellierung",
                        "not_steop_constrained": true,
                        "semester": "2. Semester (SS)",
                        "sst": "2,0"
                    }
                ],
                "name": "Grundlagen Digitaler Systeme",
                "wahl": false
            },
            {
                "ects": "6,5",
                "lernergebnisse": "Denkweisen der Informatik bietet eine Einf\u00fchrung und einen \u00dcberblick \u00fcber die Informatik aus der Sicht ihrer Arbeits- und Denkweisen, vermittelt als eine\nArt angewandter Wissenschaftstheorie. Die LVA soll Interesse am weiteren Studium wecken, und die Studierenden in die Lage versetzen, die im weiteren Studium pr\u00e4sentierte\nInhalte besser einzuordnen. Die Studierenden sollen so in die Lage versetzt werden, die\nInformatik sowohl als Wissenschaft als auch als Praxis nachhaltiger zu verstehen, und\ndieses Wissen im Rahmen des Studiums produktiv umzusetzen.\nFachliche und methodische Kompetenzen: Studierende k\u00f6nnen \u2026\n\u2022   erkl\u00e4ren, was Informatik ist;\n\u2022   die Strukturen und Prozesse einer Universit\u00e4t darstellen;\n\u2022   Lernmethoden und Organisationsformen f\u00fcr das erfolgreiche Fortkommen im eigenen Studium anwenden;\n\u2022   ableiten, dass es bei Problemformulierung und Probleml\u00f6sung unterschiedliche und\nzum Teil in Konflikt zueinander stehende Sichtweisen, Herangehensweisen und Motive gibt;\n\u2022   die Str\u00f6mungen und Perspektiven des Denkens seit der vorwissenschaftlichen Zeit\nbis in die Gegenwart aufz\u00e4hlen, sowie die jeweils wesentlichen Grundbegriffe, Probleml\u00f6sungsans\u00e4tze und -methoden diskutieren;\n\u2022   die Notwendigkeit ethischen Handelns begr\u00fcnden, und k\u00f6nnen Methoden anwenden, mit denen ethische Fragestellungen systematisch behandelt werden;\n\u2022   die Verantwortung der Informatik bei der Gestaltung von Technologien im gesellschaftlichen Wandel diskutieren;\n\u2022   wesentliche Ereignisse und Ideen aus der Geschichte der Informationstechnologien\naufz\u00e4hlen und deren Relevanz kritisch reflektieren.\nKognitive und praktische Kompetenzen: Durch die theoretische und praktische Auseinandersetzung mit den Inhalten werden folgende kognitive Fertigkeiten vermittelt:\n\u2022   Auswahl und Einsatz von Strategien, Methoden und Werkzeugen zur Anwendung\nverschiedener Denk- und Probleml\u00f6sungsformen;\n\u2022   Formulierung von Kritik aus unterschiedlichen Perspektiven, rationale Auseinandersetzung im kritischen Dialog;\n\u2022   Einbettung aktueller Entwicklungen und Technologien in einen historischkritischen Kontext\n\u2022   selbst\u00e4ndige Wissenssuche und Wissenserwerb\n\u2022   Kritische Reflexion\nSoziale Kompetenzen und Selbstkompetenzen: Gruppenarbeiten in verschiedenen Zusammensetzungen und Gruppengr\u00f6\u00dfen erlauben Studierenden Erfahrungen zu sammeln, wie\nan Problemstellungen gemeinschaftlich herangegangen werden kann. In peer-review Aufgaben lernen Studierende, konstruktive Kritik an der Arbeit anderer zu \u00fcben, solche\nauch anzunehmen, und diese effektiv in ihre eigene Arbeit einfliessen zu lassen. Die unterschiedlichen Herangehensweisen an Probleme er\u00f6ffnen Studierenden dar\u00fcber hinaus\nHandlungsoptionen und Sichtweisen, die einen kreativen und innovativen Zugang zur\nGestaltung von Technologie erlauben. Dadurch wird auch zu ethischem Verhalten in\nInformatik und Gesellschaft angeregt.\nInhalt:\n\u2022   Vorwissenschaftliche Denkweisen\n\u2022   Denkweisen der naturwissenschaftlichen Revolution\n\u2022   Mathematisches Denken, insbesondere Rekursion, Abstraktion, Induktion und Deduktion\n\u2022   Computational Thinking inklusive der Fragen der Berechenbarkeit\n\u2022   Design Thinking, mit einem Schwerpunkt des Mottos der TU, \"Technik f\u00fcr Menschen\"\n\u2022   Kreativit\u00e4t und Innovation\n\u2022   Kritisches Denken, mit besonderer Betonung von Bias und algorithmic Bias\n\u2022   Verantwortung und Ethik, Verhaltensregeln, code of conducts, Freiheit der Forschung\n\u2022   Organisation und Struktur der TU Wien sowie der Fakult\u00e4t f\u00fcr Informatik\n\u2022   Bachelor- und Masterstudien der Informatik\n\u2022   Forschungsgebiete der Informatik (der Fakult\u00e4t und allgemein)\n\u2022   Strategien f\u00fcr einen erfolgreichen Studienabschluss (Lernen und Lernstrategien,\nsoziales Lernen, Stressbew\u00e4ltigung, Umgang mit Krisen)\nIn die Behandlung dieser Themen werden folgende Inhalte \u00fcbergreifend behandelt:\n\u2022   Geschichte der Informatik\n\u2022   Informatik und Gesellschaft\n\u2022   Lernen und Forschen an der TU Wien\n\u2022   Informatik als Wissenschaft\n\u2022   Diversit\u00e4t und Genderkompetenz\nErwartete Vorkenntnisse: Keine.\nVerpflichtende Voraussetzungen: Keine.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Inhalte werden in Vortr\u00e4gen von unterschiedlichen Vortragenden vorgestellt und teilweise\nvon Studierenden selbst erarbeitet. In selbstorganisierter Arbeit bearbeiten die Studierenden in einem eigenen Online-System \u00dcbungsaufgaben und begutachten im double\nblind peer reviewing-Verfahren die Arbeit von Mitstudierenden. Zur Bewertung werden nicht nur die Leistungen in den \u00dcbungsaufgaben, sondern auch die Qualit\u00e4t des\nReviewing herangezogen. Die Beurteilung des Orientierungsteils erfolgt auf Basis eines\nOnline-Tests.",
                "lvas": [
                    {
                        "ects": "5,5",
                        "lva_typ": "VU",
                        "name": "Denkweisen der Informatik",
                        "not_steop_constrained": true,
                        "semester": "1. Semester (WS)",
                        "sst": "4,0"
                    },
                    {
                        "ects": "1,0",
                        "lva_typ": "VU",
                        "name": "Orientierung Informatik und Wirtschaftsinformatik",
                        "not_steop_constrained": true,
                        "semester": "1. Semester (WS)",
                        "sst": "1,0"
                    }
                ],
                "name": "Denkweisen der Informatik",
                "wahl": false
            },
            {
                "ects": "8,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen Studierende Folgendes beschreiben:\n\u2022   fundamentale Algorithmen und Datenstrukturen,\n\u2022   Methoden zur Bewertung und Analyse von Algorithmen, und\n\u2022   eine systematische Vorgehensweise zur Entwicklung von Algorithmen.\nKognitive und praktische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen\ndie Studierenden:\n\u2022   abstrakt und effizienzorientiert an die Entwicklung von Algorithmen herangehen,\n\u2022   theoretisch fundierte Methoden zur Analyse von Algorithmen benutzen, und\n\u2022   ihre Kenntnisse von fundamentalen Algorithmen und Datenstrukturen anwenden.\nSoziale Kompetenzen und Selbstkompetenzen: Nach positiver Absolvierung des Moduls\nk\u00f6nnen die Studierenden:\n\u2022   selbstorganisiert und eigenverantwortlich effiziente L\u00f6sungsans\u00e4tze entwickeln und\n\u2022   die eigenen L\u00f6sungsans\u00e4tze pr\u00e4sentieren.\nInhalt:\n\u2022   Fundamentale Prinzipien der Algorithmenanalyse\n\u2022   Asymptotische Schranken f\u00fcr Laufzeit und Speicherplatzbedarf\n\u2022   Fundamentale Datenstrukturen (z.B. Listen, Graphen, Suchb\u00e4ume)\n\u2022   Fundamentale algorithmische Prinzipien (z.B. Greedy, Divide-and-Conquer,\nBranch-and-Bound, Approximation, Dynamische Programmierung, Lokale Suche,\nHashing)\n\u2022   Probleml\u00f6sungsstrategien und Optimierung\n\u2022   Handhabbarkeit, Polynomialzeitreduktionen, NP-Vollst\u00e4ndigkeit\nErwartete Vorkenntnisse: Inhalte der LVA Einf\u00fchrung in die Programmierung 1 sowie\nfundierte Mathematik-Kenntnisse auf AHS/BHS-Maturaniveau.\nVerpflichtende Voraussetzungen: Keine.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Inhalte werden in Vortr\u00e4gen vorgestellt und in begleitenden \u00dcbungen von Studierenden\nerarbeitet. \u00dcbungsaufgaben bestehen vorwiegend aus Aufgaben die schriftlich ausgearbeitet werden. Sie werden \u00f6rtlich ungebunden innerhalb vorgegebener Fristen gel\u00f6st, die\nL\u00f6sungen werden in \u00dcbungsgruppen vorgestellt. Die Beurteilung erfolgt auf Basis mehrerer schriftlicher Tests und der kontinuierlich in den \u00dcbungen erbrachten Leistungen.",
                "lvas": [
                    {
                        "ects": "8,0",
                        "lva_typ": "VU",
                        "name": "Algorithmen und Datenstrukturen",
                        "not_steop_constrained": true,
                        "semester": "2. Semester (SS)",
                        "sst": "5,5"
                    }
                ],
                "name": "Algorithmen und Datenstrukturen",
                "wahl": false
            },
            {
                "ects": "6,0",
                "lernergebnisse": "Dieses Modul befasst sich mit den theoretischen und logischen Grundlagen der Informatik.\nFachliche und methodische Kompetenzen: Fundamentale Konzepte und Resultate der\nMathematischen Logik, Automaten und formalen Sprachen, Berechenbarkeit und Komplexit\u00e4t sowie der formalen Semantik von Programmiersprachen.\nKognitive und praktische Kompetenzen: Die Studierenden erwerben die F\u00e4higkeit, formale\nBeschreibungen lesen und vestehen und Konzepte formal-mathematisch beschreiben zu\nk\u00f6nnen. Weiters lernen sie, die Struktur von Beweisen und Argumentationen zu verstehen\nund selber solche zu f\u00fchren.\nSoziale Kompetenzen und Selbstkompetenzen: Selbst\u00e4ndiges L\u00f6sen von Problemen.\nInhalt:\n\u2022   Mathematische Logik: Aussagenlogik, Pr\u00e4dikatenlogik, elementare Modallogiken\nwie LTL, Kripkemodelle, Kalk\u00fclbegriff, logische Struktur formaler Beweise\n\u2022   Automatentheorie: endliche Automaten, B\u00fcchiautomaten, Transducer, Operationen auf Automaten\n\u2022   Formale Sprachen: Chomsky Hierarchie\n\u2022   Berechenbarkeit und Komplexit\u00e4t: universelle Berechenbarkeit, Unentscheidbarkeit, NP-Vollst\u00e4ndigkeit\n\u2022   Grundlagen der operationalen und axiomatischen Semantik von Programmiersprachen\n\u2022   Grundlagen von Prozessalgebren und Concurrency (CSP, CCS)\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen: Automaten, regul\u00e4re Ausdr\u00fccke, Grammatiken\nsowie Aussagen- und Pr\u00e4dikatenlogik als Spezifikationssprachen, Syntax und Semantik,\nModellbegriff.\nDiese Voraussetzungen werden in der Lehrveranstaltung Formale Modellierung des Moduls Grundlagen Digitaler Systeme vermittelt.\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Die\nInhalte werden in einem Vorlesungsteil vorgestellt und in begleitenden \u00dcbungen von den\nStudierenden erarbeitet. Die \u00dcbungsaufgaben k\u00f6nnen zeitlich und \u00f6rtlich weitgehend ungebunden einzeln oder in Gruppen gel\u00f6st werden. Die L\u00f6sungen werden bei regelm\u00e4\u00dfigen\nTreffen mit Lehrenden und TutorInnen besprochen und korrigiert. Die Beurteilung erfolgt auf Basis schriftlicher Tests und der kontinuierlich in den \u00dcbungen erbrachten\nLeistungen. Der \u00dcbungsbetrieb und die Tests k\u00f6nnen computerunterst\u00fctzt durchgef\u00fchrt\nwerden.",
                "lvas": [
                    {
                        "ects": "6,0",
                        "lva_typ": "VU",
                        "name": "Theoretische Informatik und Logik",
                        "not_steop_constrained": false,
                        "semester": "3. Semester (WS)",
                        "sst": "4,0"
                    }
                ],
                "name": "Theoretische Informatik und Logik",
                "wahl": false
            }
        ],
        "name": "Grundlagen der Informatik"
    },
    {
        "module": [
            {
                "ects": "7,5",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Erl\u00e4utern der physikalische Grundlagen elektrischer Komponenten und elektrischer Netzwerke; Erkl\u00e4ren der Methoden f\u00fcr die Analyse\nund den Entwurf von elektrischen Netzwerken; Erl\u00e4utern der Funktionsweise elementarer\nelektrischer Schaltungen.\nKognitive und praktische Kompetenzen: Modellierung elektrischer Vorg\u00e4nge und Einsch\u00e4tzung der Tragf\u00e4higkeit der gewonnenen Modelle; Verwendung der Rechenverfahren\nder Elektrotechnik zur L\u00f6sung einfacher Probleme; Umgang mit elektrotechnischen Laborinstrumenten; Praktische Realisierung einfacher elektrischer Schaltungen und deren\nmesstechnische Untersuchung.\nSoziale Kompetenzen und Selbstkompetenzen: Teamarbeit in Kleingruppen im Labor.\nInhalt: Physikalische Grundlagen von Bauelementen, Sensoren und Aktuatoren\n\u2022   Elektrisches und magnetisches Feld, Ausbreitung von Feldzust\u00e4nden\n\u2022   Vom Feld zum idealen elektrischen Bauelement (Widerstand, Induktivit\u00e4t, Kapazit\u00e4t)\n\u2022   Technische Bauelemente (Widerst\u00e4nde, Spulen/Transformatoren, Kondensatoren;\nErsatzschaltungen)\n\u2022   Ausn\u00fctzung elektrischer Eigenschaften in Sensoren\nEinfache elektrische Netzwerke\n\u2022   Erstellung der Netzwerkgleichungen (Kirchhoff\u2019sche S\u00e4tze)\n\u2022   L\u00f6sung der Netzwerkgleichungen (Gleichspannungsanalyse, Wechselspannungsanalyse, Laplace-Transformation)\nHalbleiter\n\u2022   Diode und MOS-Transistor\n\u2022   Operationsverst\u00e4rker\nSchaltungstechnik\n\u2022   Einfache lineare Schaltungen\n\u2022   Schaltungen mit OPV\n\u2022   Analoge Filter\nVon analogen zu digitalen Schaltungen\n\u2022   Abtasttheorem\n\u2022   A/D- und D/A-Wandler\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen: Fundierte Kenntnisse in Mathematik (Algebra, Analysis, inklusive Fourier-Transformation); grundlegende physikalische Kenntnisse\n(AHS/BHS-Niveau).\nKognitive und praktische Kompetenzen: Elementare mathematische Modellierung von\nAnwendungsproblemen, insbesondere aus der Physik; Anwendung mathematischer L\u00f6sungsmethoden.\nDiese Voraussetzungen werden in folgenden Modulen vermittelt: Analysis, Algebra und\nDiskrete Mathematik, Analysis 2\nVerpflichtende Voraussetzungen: Keine.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Das\nModul besteht aus einer Vorlesung mit integrierten Rechenbeispielen zur Vertiefung der\nLehrinhalte und zur Entwicklung der L\u00f6sungskompetenz f\u00fcr elektrotechnische Probleme und einer begleitenden Labor\u00fcbung. In der Labor\u00fcbung werden einfache elektrische\nSchaltungen entworfen, aufgebaut und gemessen. Dabei werden auch elementare Methoden der Messtechnik (Messung von Strom und Spannung, Oszilloskopmesstechnik) und\nder praktische Umgang mit Laborme\u00dfger\u00e4ten vermittelt.\nAufgrund der beschr\u00e4nkten Laborressourcen und der Situierung im 2. Semester, wodurch das Modul nicht durch die STEOP zugangsbeschr\u00e4nkt ist, besteht f\u00fcr die Lehrveranstaltung 182.692 (Labor\u00fcbungen) ein Kapazit\u00e4tslimit von maximal 54 TeilnehmerInnen.",
                "lvas": [
                    {
                        "ects": "4,0",
                        "lva_typ": "VU",
                        "name": "Elektrotechnische Grundlagen",
                        "not_steop_constrained": true,
                        "semester": "2. Semester (SS)",
                        "sst": "4,0"
                    },
                    {
                        "ects": "3,5",
                        "lva_typ": "LU",
                        "name": "Elektrotechnische Grundlagen",
                        "not_steop_constrained": true,
                        "semester": "2. Semester (SS)",
                        "sst": "3,5"
                    }
                ],
                "name": "Elektrotechnische Grundlagen",
                "wahl": false
            },
            {
                "ects": "15,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Absolventinnen und Absolventen dieses Moduls k\u00f6nnen\n\u2022   den Entwurfs- und den Fertigungsprozess eines CMOS ASIC beschreiben, deren\nSchritte begr\u00fcnden und deren Herausforderungen nennen,\n\u2022   die Abstraktion des Feldeffekt-Transistors als Schalter richtig verwenden und damit\ndie grundlegende Funktion einfacher logischer Gatter erkl\u00e4ren,\n\u2022   grundlegende Funktionselemente der digitalen Logik in Aufbau und Funktion beschreiben und richtig einsetzen,\n\u2022   Defekte und Funktionsfehler in digitalen integrierten Schaltungen in Verbindung\nmit den Schritten im Entwurfs- und Fertigungsprozess bringen, sowie deren wichtigste Einflussgr\u00f6\u00dfen qualitativ und, wo m\u00f6glich, auch quantitativ beschreiben,\n\u2022   die wichtigsten Komponenten von Prozessoren nennen sowie deren Funktion und\nZusammenspiel erkl\u00e4ren,\n\u2022   den Instruktionssatz als Sprache des Computers, hinsichtlich seiner Struktur und\nAuswirkung, erkl\u00e4ren sowie Beispiele nennen,\n\u2022   Entwurfsentscheidungen richtig treffen und deren Auswirkungen einsch\u00e4tzen,\n\u2022   den Einflu\u00df des techologischen Fortschritts auf Preis und Leitung digitaler Elektronik (insbesondere Computer) erkl\u00e4ren und auf zuk\u00fcnftige Entwicklungen projizieren.\nKognitive und praktische Kompetenzen: Absolventinnen und Absolventen dieses Moduls\nk\u00f6nnen\n\u2022   f\u00fcr eine gegebene Problemstellung eine (kombinatorische oder einfache sequenzielle) digitale Schaltung entwerfen und deren Implementierungsm\u00f6glichkeiten vergleichen,\n\u2022   die Grenzen der beim digitalen Schaltungsentwurf verwendeten Modelle und Abstraktionen in der Anwendung erkennen und ber\u00fccksichtigen,\n\u2022   den kompletten Entwurfsprozess einer digitalen Schaltung f\u00fcr die Zeilplattform\nFPGA, von der Modellierung \u00fcber Synthese und Download bis hin zu Simulation\nund systematischem, zielorientertem Debugging, eigenst\u00e4ndig anwenden, sowie die\ndaf\u00fcr ben\u00f6tigten Entwicklungswerkzeuge und Me\u00dfger\u00e4te (insbes. Logikanalysator)\nbedienen,\n\u2022   das Konzept des Pipelining erkl\u00e4ren und anwenden, sowie seine Grenzen geeignet\nber\u00fccksichtigen,\n\u2022   das Konzept von Speicherhierarchien erkl\u00e4ren und anwenden, sowie seine Grenzen\ngeeignet ber\u00fccksichtigen,\n\u2022   die Performance von Rechnern methodisch korrekt bewerten und optimieren.\nSoziale Kompetenzen und Selbstkompetenzen: Absolventinnen und Absolventen dieses\nModuls k\u00f6nnen\n\u2022   die komplexe physikalische Realit\u00e4t auf ein geeignetes vereinfachtes Modell abbilden und damit korrekt ein gegebenes Problem l\u00f6sen,\n\u2022   in einem kleineren Team f\u00fcr ein Projekt eine Verteilung von Zust\u00e4ndgkeiten vornehmen, einen gemeinsamen Zeitplan erstellen und Deadlines einhalten, sowie mit\nunvorhergesehenen Problemen umgehen,\n\u2022   kreativ aber unter Einhaltung gegebener Randbedingungen eine Designaufgabe\nl\u00f6sen.\nInhalt: Der inhaltliche Bogen spannt sich von der physikalischen Abbildung von Transistoren auf Chips (ASIC-Technologie) \u00fcber den Aufbau logischer Gatter aus Transistoren\nbis hin zu Pipelines und Instruction Set in Microprozessoren. Flankierend werden wichtige Aspekte wie Verifikation, Defekte und deren Erkennung mittels Test, Verlustleistung\nund W\u00e4rmeabfuhr, Modellierung von Hardware (in VHDL), Grenzen der Modelle und\nAbstraktionen und Performance-Analyse behandelt.\nKonkrete Inhalte aus dem Bereich des Digital Design:\n\u2022   Chiptechnologie (physikalische Abbildung von Transistoren und Verbindungen auf\nChips)\n\u2022   Aufbau logischer Gatter aus Transistoren\n\u2022   Modellierung von Hardware, speziell in VHDL\n\u2022   Design-Flow digitaler Schaltungen\n\u2013 Optimierung und Synthese\n\u2013 Verifikation durch Simulation\n\u2013 Test und Debugging\n\u2022   Zieltechnologien (CBIC, Gate-Array und programmierbare Logik, insbesondere\nFPGA)\n\u2022   Speichertechnologien\n\u2022   Defekte und deren Ursachen\n\u2022   Umgang mit Datenblattangaben\n\u2022   Verlustleistung und W\u00e4rmeabfuhr\n\u2022   synchrones Design-Paradigma und dessen Grenzen; ausf\u00fchrliche Behandlung von\nMetastabilit\u00e4t und deren Modellierung\n\u2022   Messger\u00e4te zum Debugging digitaler Schaltungen\nKonkrete Inhalte aus dem Bereich der Rechnerstrukturen:\n\u2022   Instruktionssatz und Assembler der MIPS32-Architektur\n\u2022   Rechnerarithmetik\n\u2013 Addressierung\n\u2013 ALU\n\u2013 Festkomma- und Gleitkomma-Darstellung\n\u2022   Prozessor\n\u2013 Data- und Control-Path\n\u2013 Pipelining und Pipelining Hazards\n\u2013 Superpipelining, Superskalar- und VLIW-Prozessoren\n\u2022   Speicherhierarchie\n\u2013 Register\n\u2013 Cache-Speicher\n\u2013 Hauptspeicher, virtuelle Speicherverwaltung\n\u2022   Platten- und I/O-Systeme\n\u2022   Multiprozessor-Systeme\n\u2013 Shared-Memory-Systeme\n\u2013 Message-Passing-Systeme\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen:\n\u2022   Boole\u2019sche Algebra, Entwurf und Minimierung von logischen Schaltungend und\nSchaltwerken, Grundlagen Metastabilit\u00e4t\n\u2022   Moore/Mealy-Automaten\n\u2022   Concurrency (CSP)\n\u2022   Elektrotechnische Bauelemente (Widerstand, Kapazit\u00e4t, Induktivit\u00e4t), Halbleiter\n(Diode, Feldeffekt-Transistor: Kennlinien und Funktion)\n\u2022   Zahlendarstellungen in Computern\n\u2022   Rechnerstrukturen\nKognitive und praktische Kompetenzen:\n\u2022   Erstellen und L\u00f6sen von elektrischen Netzwerken, reale und ideale Quellen, Arbeiten mit Kennlinien, differenzieller Widerstand\n\u2022   Mathematische Grundfertigkeiten: L\u00f6sung lineare Differentialgleichungen, Umformungen mit Exponentialfunktion/Logarithmus, etc.\n\u2022   Interpretieren und Arbeiten mit Zahlendarstellungen und logischen Ausdr\u00fccken.\nSoziale Kompetenzen und Selbstkompetenzen:\n\u2022   Analyse komplexer Zusammenh\u00e4nge und Wechselwirkungen, Strukturieren und\nEntwerfen von modularen, interagierenden Systemen\nDiese Voraussetzungen werden in folgenden Modulen vermittelt: Grundlagen Digitaler\nSysteme, Elektrotechnische Grundlagen, Theoretische Informatik und Logik\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase sowie\nentweder die Lehrveranstaltung Grundlagen digitaler Systeme oder die Lehrveranstaltung Technische Grundlagen der Informatik.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Der\ntheoretische Hintergrund und das Verst\u00e4ndnis f\u00fcr den Stoff werden in Vorlesungen vermittelt. In der begleitenden Labor\u00fcbung wird dieses Wissen durch ein umfassendes Designprojekt konkretisiert und vertieft. In einem ersten Schritt wird zun\u00e4chst der Umgang\nmit den Entwicklungswerkzeugen anhand von einfachen Aufgaben erlernt. Im Anschlu\u00df\ndaran wird ein komplexes Design entworfen, implementiert und in Betrieb genommen.\nDie entsprechenden Aufgabenstellungen stammen aus dem Kontext von Rechnerarchitekturen, soda\u00df das Modul Digital Design zugleich auch der Vertiefung und Konkretisierung\ndieser Kenntnisse dient. Die Vermittlung praktischer und sozialer Kompetenzen wird prim\u00e4r durch die Arbeit in Kleingruppen bewerkstelligt. Die Leistungsfeststellung erfolgt\ndurch Beispielabgaben sowie schriftliche und m\u00fcndliche Pr\u00fcfungen/Tests.",
                "lvas": [
                    {
                        "ects": "3,0",
                        "lva_typ": "VO",
                        "name": "Digital Design",
                        "not_steop_constrained": false,
                        "semester": "3. Semester (WS)",
                        "sst": "3,0"
                    },
                    {
                        "ects": "1,5",
                        "lva_typ": "VO",
                        "name": "Hardware Modeling",
                        "not_steop_constrained": false,
                        "semester": "4. Semester (SS)",
                        "sst": "1,5"
                    },
                    {
                        "ects": "3,0",
                        "lva_typ": "VO",
                        "name": "Rechnerstrukturen",
                        "not_steop_constrained": false,
                        "semester": "4. Semester (SS)",
                        "sst": "3,0"
                    },
                    {
                        "ects": "7,5",
                        "lva_typ": "LU",
                        "name": "Digital Design and Computer Architecture",
                        "not_steop_constrained": false,
                        "semester": "4. Semester (SS)",
                        "sst": "7,5"
                    }
                ],
                "name": "Digital Design",
                "wahl": false
            }
        ],
        "name": "Hardware"
    },
    {
        "module": [
            {
                "ects": "9,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Reproduzieren bzw. Herleiten der wichtigsten\nmathematischen Definitionen, Theoreme und Beweismethoden der Algebra und Diskreten Mathematik.\nKognitive und praktische Kompetenzen: Finden von Beweisen f\u00fcr mathematische Problemstellungen aus Algebra und Diskreter Mathematik; Modellieren einfacher Anwendungsprobleme aus Informatik, Naturwissenschaften und Technik als mathematische\nProblemstellungen und L\u00f6sen derselben mit geeigneten mathematischen Methoden.\nSoziale Kompetenzen und Selbstkompetenzen: Pr\u00e4sentieren von Probleml\u00f6sungen vor einer \u00dcbungsgruppe.\nInhalt:\n\u2022   Grundlagen: elementare Logik (Aussagen, Implikation, Kontraposition, Verneinung, Quantoren); elementare Beweistechniken (direkter und indirekter Beweis,\nGegenbeispiele); elementare Zahlentheorie.\n\u2022   Mengenlehre: Grundlagen (Venn-Diagramme, Komplemente, kartesisches Produkt, Potenzmenge); Funktionen (Mengenrelationen, surjektive, injektive, bijektive Funktionen, Komposition); Relationen (\u00c4quivalenzrelation, Partitionen, Ordnungsrelation, Maximumsprinzip); Kardinalit\u00e4t und Abz\u00e4hlbarkeit (endliche, unendlichen und abz\u00e4hlbare Mengen).\n\u2022   Induktion: Induktionsprizip (vollst\u00e4ndige Ind., transfinite Ind.); rekursive Definitionen.\n\u2022   Grundlagen der Kombinatorik: Abz\u00e4hlprinzipien (Summen- und Produktregel);\nSchubfachschluss; Inklusions-Exklusions-Prinzip; kombinatorische Grundaufgaben\n(Permutationen, Auswahlen, Partitionen); elementare Identit\u00e4ten (Binomischer\nLehrsatz, binomische Identit\u00e4ten); Rekursionen (Fibonacci-Zahlen, Derangements,\nTurm von Hanoi); L\u00f6sungsmethoden f\u00fcr Rekursionen (Rekursionen erster Ordnungen, lineare Rekursionen mit konstanten Koeffizienten).\n\u2022   Graphentheorie: Grundlagen (gerichtete, ungerichtete, bipartite Graphen, Wege,\netc.); Handshake-Lemma; Eulersche und Hamiltonsche Linien; Graphrelationen\n(Isomorphie, Subgraphen, Minore); Zusammenhang (Zusammenhangskomponenten, Menger\u2019s theorem); azyklische Graphen; ebene Graphen (inkl. Eulersche Polyederformel); elementare Graph-Algorithmen (Azyklizit\u00e4t, Kruskal-Alg., minimaler\nSpannbaum, Dijkstra-Alg.).\n\u2022   Algebraische Strukturen: Gruppentheorie (inkl. Faktorgruppen, Homomorphiesatz,\nzyklische Gruppen, direkte Produkte); Ringe (Integrit\u00e4tsbereiche, Ideale); K\u00f6rper\n(Polynomringe \u00fcber K\u00f6rpern); Verb\u00e4nde.\n\u2022   Lineare Algebra: Vektoren; Matrizen; lineare Abbildungen; lineare Gleichungssysteme; Determinanten; Eigenwerte und Eigenvektoren; Skalarprodukte, Orthogonalit\u00e4t.\n\u2022   Grundlagen algebraische Codierungstheorie: Gruppencodes, Linearcodes.\nErwartete Vorkenntnisse: Fundierte Mathematik-Kenntnisse auf AHS/BHS-Maturaniveau.\nVerpflichtende Voraussetzungen: Keine.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: W\u00f6chentliche Vorlesung mit kontinuierlicher begleitender \u00dcbung (individuell auszuarbeitende \u00dcbungsbeispiele, L\u00f6sungspr\u00e4sentation an der Tafel), wodurch die in der Vorlesung\nvermittelten Inhalte effizient erlernt und die mathematische Probleml\u00f6sungskompetenz\ntrainiert wird. Leistungsfeststellung durch mehrere L\u00f6sungspr\u00e4sentationen, \u00dcbungstests,\nAbschlusspr\u00fcfung.",
                "lvas": [
                    {
                        "ects": "4,0",
                        "lva_typ": "VO",
                        "name": "Algebra und Diskrete Mathematik f\u00fcr Informatik und Wirtschaftsinformatik",
                        "not_steop_constrained": true,
                        "semester": "1. Semester (WS)",
                        "sst": "4,0"
                    },
                    {
                        "ects": "5,0",
                        "lva_typ": "UE",
                        "name": "Algebra und Diskrete Mathematik f\u00fcr Informatik und Wirtschaftsinformatik",
                        "not_steop_constrained": true,
                        "semester": "1. Semester (WS)",
                        "sst": "2,0"
                    }
                ],
                "name": "Algebra und Diskrete Mathematik",
                "wahl": false
            },
            {
                "ects": "6,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Reproduzieren bzw. Herleiten der wichtigsten mathematischen Definitionen, Theoreme und Beweismethoden der mathematischen\nAnalysis.\nKognitive und praktische Kompetenzen: Finden von Beweisen f\u00fcr mathematische Problemstellungen aus der Analysis; Modellieren einfacher Anwendungsprobleme aus Informatik, Naturwissenschaften und Technik als mathematische Problemstellungen und\nL\u00f6sen derselben mit geeigneten Verfahren zur analytischen und numerischen Probleml\u00f6sung.\nSoziale Kompetenzen und Selbstkompetenzen: Pr\u00e4sentieren von Probleml\u00f6sungen vor einer \u00dcbungsgruppe.\nInhalt:\n\u2022   Folgen, Reihen und Funktionen: Folgen reeller Zahlen (Grenzwert, Monotonie und\nBeschr\u00e4nktheit, Konvergenzuntersuchungen); unendliche Reihen (Konvergenzkriterien, Cauchyprodukt und Potenzreihen); asymptotischer Vergleich von Folgen\n(Landausymbole: O(), o(), \u2126()).\n\u2022   Elementare Funktionen: Potenzen mit reellen Exponenten; Exponentialfunktion\nund Logarithmus; Darstellung der Exponentialfunktion; Winkelfunktionen und Arcusfunktionen.\n\u2022   Grenzwerte und Nullstellen von Funktionen, Stetigkeit: metrische und topologische\nGrundbegriffe (offene, geschlossene Mengen, Umgebungen, Basis, H\u00e4ufungspunkte); Umgebungs und Folgenstetigkeit Eigenschaften stetiger Funktionen: Nullstellensatz, Zwischenwertsatz, Monotonie.\n\u2022   Differentialrechnung in einer Variablen: Differenzenquotient und Differenzierbarkeit; Ableitung einfacher Funktionen; Eigenschaften und Ableitungsregeln; Mittelwertsatz der Differentialrechnung; Taylorreihen; Monotonie und die erste Ableitung; h\u00f6here Ableitungen; verallgemeinerter Mittelwertsatz und die Regel von de\nl\u2019Hospital.\n\u2022   Integralrechnung in einer Variablen: Definition und Eigenschaften Riemann-Integral; Integration als Umkehrung der Differentiation, Fl\u00e4che unter Kurven; Techniken des Integrierens; Mittelwert- und Hauptsatz der Differential- und Integralrechnung; uneigentliche Integrale.\n\u2022   Elementare Differentialgleichungen: lineare Differentialgleichungen erster Ordnung.\n\u2022   Grundlagen Differentialrechnung in mehreren Variablen: Funktionen in mehreren\nVariablen; partielle Ableitungen, totale Ableitung; Ableitungsregeln; Richtungsableitung; Taylorentwicklung; Hauptsatz \u00fcber implizite Funktionen; lokale Extrema.\n\u2022   Computer-Numerik: Zahlendarstellungsfehler; Konversionsfehler; Fehlerfortpflanzung (Summe, Produkte, Polynome, elementare Funktionen); algorithmische Fehlerfortpflanzung, Konditionszahlen.\nErwartete Vorkenntnisse: Fundierte Mathematik-Kenntnisse auf AHS/BHS-Maturaniveau.\nVerpflichtende Voraussetzungen: Keine.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: W\u00f6chentliche Vorlesungen mit kontinuierlich begleitender \u00dcbung (individuell auszuarbeitende \u00dcbungsbeispiele, L\u00f6sungspr\u00e4sentation an der Tafel), wodurch die in der Vorlesung\nvermittelten Inhalte effizient erlernt und die mathematische Probleml\u00f6sungskompetenz\ntrainiert wird. Leistungsfeststellung durch mehrere L\u00f6sungspr\u00e4sentationen, \u00dcbungstests,\nAbschlusspr\u00fcfung.",
                "lvas": [
                    {
                        "ects": "2,0",
                        "lva_typ": "VO",
                        "name": "Analysis f\u00fcr Informatik und Wirtschaftsinformatik",
                        "not_steop_constrained": true,
                        "semester": "1. Semester (WS)",
                        "sst": "2,0"
                    },
                    {
                        "ects": "4,0",
                        "lva_typ": "UE",
                        "name": "Analysis f\u00fcr Informatik und Wirtschaftsinformatik",
                        "not_steop_constrained": true,
                        "semester": "1. Semester (WS)",
                        "sst": "2,0"
                    }
                ],
                "name": "Analysis",
                "wahl": false
            },
            {
                "ects": "7,5",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Reproduzieren bzw. Herleiten der wichtigsten\nmathematischen Definitionen, Theoreme und Beweismethoden der h\u00f6heren mathematischen Analysis; Darstellen der Beziehungen zwischen den verschiedenen Resultaten und\nL\u00f6sungsmethoden.\nKognitive und praktische Kompetenzen: Anwenden von Beweistechniken der h\u00f6heren\nAnalysis zur L\u00f6sung einschl\u00e4giger mathematischer Problemstellungen; Modellieren von\nAnwendungsproblemen aus Informatik, Naturwissenschaften und Technik als mathematische Problemstellungen und L\u00f6sen derselben ohne und mit Computer-Unterst\u00fctzung.\nSoziale Kompetenzen und Selbstkompetenzen: Pr\u00e4sentieren komplexerer mathematischer\nProbleml\u00f6sungen vor einer \u00dcbungsgruppe.\nInhalt: Elementare Differentialgleichungen\n\u2022   Lineare Differentialgleichungen h\u00f6herer Ordnung mit konstanten Koeffizienten\nVertiefung der Differentialrechnung in mehreren Variablen\n\u2022   Inverse Funktionen\n\u2022   Kurven und Fl\u00e4chen (implizites Differenzieren)\n\u2022   Extrema mit Nebenbedingungen\nIntegralrechnung in mehreren Variablen\n\u2022   Gebietsintegrale\n\u2022   Integrationstechniken (Fubini, Substitution)\n\u2022   Vektorfelder und Kurvenintegrale\nFourier-Reihen\n\u2022   Periodische Funktionen, trigonometrisches Polynom, trigonometrische Reihe\n\u2022   Fourier-Reihe, Differentiation, Integration, Bessel-Ungleichung, Parseval\u2019sche Gleichung, Darstellungss\u00e4tze\n\u2022   Diskrete Fourier-Transformation (Definition, Parseval-Gleichung, FFTAlgorithmus)\nTransformationen\n\u2022   Fourier-Transformation (Definition, Konvergenzsatz, Integraltheorem, Umkehrund Eindeutigkeitssatz)\n\u2022   Laplace-Transformation (Definition, Existenz- und Eindeutigkeitssatz)\n\u2022   z-Transformation\nDifferentialgleichungen\n\u2022   Spezielle Typen gew\u00f6hnlicher Differentialgleichungen\n\u2022   Lineare und quasilineare partielle Differentialgleichungen erster Ordnung (Methode\nder Charakteristiken)\n\u2022   Lineare partielle Differentialgleichungen zweiter Ordnung (Normalformen)\n\u2022   L\u00f6sungsverfahren (Separationsansatz)\nVerfahren zur Fixpunkt- und Nullstellenbestimmung\n\u2022   Fixpunktsatz, Lipschitzbedingung\n\u2022   Newton\u2019sches N\u00e4herungsverfahren\n\u2022   Die regula falsi\nVerfahren zur L\u00f6sung linearer Gleichungssysteme\n\u2022   Gau\u00df\u2019sches Eliminationsverfahren mit Pivotisierung\n\u2022   Gesamtschrittverfahren von Jacobi\n\u2022   Einzelschrittverfahren von Gau\u00df-Seidel\nApproximation und Interpolation\n\u2022   Approximation mittels einer Ausgleichsgeraden\n\u2022   Allgemeiner Ansatz zur Interpolation mittels Polynomfunktionen\n\u2022   Interpolation nach Lagrange\n\u2022   Interpolation nach Newton\n\u2022   Spline-Interpolation\nSimulation von Differentialgleichungen\n\u2022   Euler\u2019sches Polygonzugverfahren\n\u2022   Verbessertes Euler\u2019sches Polygonzugverfahren\n\u2022   Klassisches Runge-Kutta-Verfahren\n\u2022   Die Methode der Finiten Elemente\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen: Grundlegende Konzepte, Theoreme und Beweistechniken der Analysis und Algebra.\nKognitive und praktische Kompetenzen: Finden mathematischer Beweise f\u00fcr einfache\nmathematische Probleme der Analysis und Algebra; Modellieren einfacher Anwendungsprobleme und L\u00f6sen derselben mit geeigneten mathematischen Methoden.\nSoziale Kompetenzen und Selbstkompetenzen: Pr\u00e4sentation der L\u00f6sung einfacher mathematischer Probleme.\nDiese Voraussetzungen werden in folgenden Modulen vermittelt: Analysis, Algebra und\nDiskrete Mathematik\nVerpflichtende Voraussetzungen: Keine.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: W\u00f6chentliche Vorlesung mit kontinuierlicher begleitender \u00dcbung (individuell auszuarbeitende \u00dcbungsbeispiele, L\u00f6sungspr\u00e4sentation an der Tafel), wodurch die in der Vorlesung\nvermittelten Inhalte effizient erlernt und die mathematische Probleml\u00f6sungskompetenz\ntrainiert wird. Leistungsfeststellung durch mehrere L\u00f6sungspr\u00e4sentationen, \u00dcbungstests,\nAbschlusspr\u00fcfung.",
                "lvas": [
                    {
                        "ects": "3,0",
                        "lva_typ": "VO",
                        "name": "Analysis 2 f\u00fcr Informatik",
                        "not_steop_constrained": true,
                        "semester": "2. Semester (SS)",
                        "sst": "3,0"
                    },
                    {
                        "ects": "4,5",
                        "lva_typ": "UE",
                        "name": "Analysis 2 f\u00fcr Informatik",
                        "not_steop_constrained": true,
                        "semester": "2. Semester (SS)",
                        "sst": "2,0"
                    }
                ],
                "name": "Analysis 2",
                "wahl": false
            },
            {
                "ects": "7,5",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Reproduzieren bzw. Ableiten der wichtigsten\nBegriffe, Resultate und Methoden aus der Wahrscheinlichkeitstheorie und Stochastischen\nProzesse; Erkl\u00e4ren der darauf aufbauenden theoretischen Methoden und praktischen\nVerfahren und deren Bezug zueinander.\nKognitive und praktische Kompetenzen: Auswahl und Verwendung problemad\u00e4quater\nVerfahren zur Modellierung und L\u00f6sung von Problemen in Anwendungsgebieten wie\nInformationstheorie und Statistik.\nSoziale Kompetenzen und Selbstkompetenzen: Pr\u00e4sentation von L\u00f6sungen vor einem Auditorium.\nInhalt: Elementare Wahrscheinlichkeitstheorie: diskrete Wahrscheinlichkeitsr\u00e4ume, Ereignisse, Additionstheorem, bedingte Wahrscheinlichkeiten, Unabh\u00e4ngigkeit, stetige R\u00e4ume (mit naiver Interpretation). Zufallsvariable: Verteilungsfunktion, Wahrscheinlichkeitsfunktion, Dichte, mehrdimensionale Verteilungen, bedingte Verteilungen und Dichten, Unabh\u00e4ngigkeit von Zufallsvariablen, Erwartungswert, Varianz, Kovarianz, Korrelationskoeffizient, Momente, charakteristische und momentenerzeugende Funktion, Ungleichungen von Markov und Chebychev, Chernov-Schranke, Quantile, Median, wichtige\ndiskrete und stetige Verteilungen. Folgen von Zufallsvariablen: Gesetze der gro\u00dfen Zahlen, zentraler Grenzwertsatz, Konvergenz fast sicher, in Wahrscheinlichkeit und in Verteilung, Definition von Markovketten und station\u00e4ren Folgen. Markovketten: ChapmanKolmogorov Gleichungen, Klassifikation der Zust\u00e4nde, station\u00e4re Verteilungen. Statistische Grundbegriffe: Sch\u00e4tzer, Konfidenzintervall, Test, Regression. Informationstheorie:\nEntropie, Information, relative Entropie, Informationsquellen mit Ged\u00e4chtnis (Markov,\nstation\u00e4r). Prozesse in stetiger Zeit: Markovketten, einfache Warteschlangenmodelle, Erneuerungsprozesse.\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen: Elementare Mengenlehre, Folgen und Reihen,\nDifferential- und Integralrechnung in mehreren Ver\u00e4nderlichen, Matrizenrechnung, elementare Kombinatorik, ma\u00dftheoretische Grundlagen.\nKognitive und praktische Kompetenzen: Mathematische Modellierung von Anwendungsproblemen; L\u00f6sung mathematischer Probleme in den vorausgesetzten Teilgebieten.\nDiese Voraussetzungen werden in folgenden Modulen vermittelt: Algebra und Diskrete\nMathematik, Analysis, Analysis 2\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Vorlesung \u00fcber die theoretischen Grundbegriffe und Methoden sowie deren Einsatz bei der\nL\u00f6sung praktischer Probleme. Schriftliche und m\u00fcndliche Pr\u00fcfung mit Rechenbeispielen\nund Theoriefragen, Vertiefung und Anwendung des gelernten Stoffes durch regelm\u00e4\u00dfiges\nL\u00f6sen von \u00dcbungsbeispielen. Leistungskontrolle durch Hausaufgaben und Pr\u00e4sentation\nder L\u00f6sungen.",
                "lvas": [
                    {
                        "ects": "4,0",
                        "lva_typ": "VO",
                        "name": "Wahrscheinlichkeitstheorie und Stochastische Prozesse f\u00fcr Informatik",
                        "not_steop_constrained": false,
                        "semester": "3. Semester (WS)",
                        "sst": "4,0"
                    },
                    {
                        "ects": "3,5",
                        "lva_typ": "UE",
                        "name": "Wahrscheinlichkeitstheorie und Stochastische Prozesse f\u00fcr Informatik",
                        "not_steop_constrained": false,
                        "semester": "3. Semester (WS)",
                        "sst": "2,0"
                    }
                ],
                "name": "Wahrscheinlichkeitstheorie und Stochastische Prozesse",
                "wahl": false
            }
        ],
        "name": "Mathematik"
    },
    {
        "module": [
            {
                "ects": "9,5",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen die Studierenden Folgendes beschreiben:\n\u2022   systematische Vorgehensweisen bei der Programmierung (einschlie\u00dflich Erstellen,\nNachvollziehen, Debuggen, Modifizieren und Dokumentieren von Programmen),\n\u2022   wichtige Konzepte einer aktuellen alltagstauglichen Programmiersprache,\n\u2022   ausgew\u00e4hlte Algorithmen, Datenstrukturen und Datenabstraktionen,\n\u2022   h\u00e4ufige Fehlerquellen und Techniken zur Qualit\u00e4tssicherung.\nKognitive und praktische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen\ndie Studierenden\n\u2022   Inhalte nat\u00fcrlichsprachiger Programmieraufgaben in ausf\u00fchrbare Programme umsetzen,\n\u2022   Vorgehensweisen und Werkzeuge beim Programmieren systematisch anwenden,\n\u2022   beschriebene Datenabstraktionen, Algorithmen und Datenstrukturen implementieren,\n\u2022   einfache Ma\u00dfnahmen zur Verbesserung der Qualit\u00e4t von Programmen anwenden.\nSoziale Kompetenzen und Selbstkompetenzen: Nach positiver Absolvierung des Moduls\nk\u00f6nnen die Studierenden\n\u2022   Programmieraufgaben selbst\u00e4ndig l\u00f6sen sowie in Zweierteams zusammenarbeiten,\n\u2022   Programmeigenschaften kommunizieren.\nInhalt:\n\u2022   Prozedurale Programmierkonzepte (Variablen, Datentypen, Operatoren, Verzweigungen, Schleifen, Arrays, Unterprogramme)\n\u2022   Fundamentale Entwicklungsmethoden (prozedurale Abstraktion, dynamisches und\nstatisches Programmverstehen, Pr\u00fcfen auf Korrektheit, Debugging) und Programmierwerkzeuge einschlie\u00dflich einer Programmierumgebung\n\u2022   Rekursion\n\u2022   Ein- und Ausgabe mit \u00dcberpr\u00fcfung von Eingaben\n\u2022   Datenabstraktion\n\u2022   Implementierung und wesentliche Eigenschaften rekursiver Datenstrukturen (Listen und B\u00e4ume)\n\u2022   Grundlegende Algorithmen (Einf\u00fcgen, L\u00f6schen, Suchen, Sortieren, Vergleichen,\nKonvertieren) f\u00fcr verschiedene Datenstrukturen\n\u2022   Abstraktion \u00fcber Datenstrukturen mit vergleichbaren Zugriffsfunktionen\n\u2022   Exception-Handling\n\u2022   Einfache Testmethoden und Code-Review\n\u2022   Ans\u00e4tze zur Programmoptimierung\n\u2022   Programmierstile und Programmdokumentation\nErwartete Vorkenntnisse: Keine.\nVerpflichtende Voraussetzungen: Keine.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Inhalte werden in Vortr\u00e4gen vorgestellt und in begleitenden \u00dcbungen von Studierenden\nerarbeitet. \u00dcbungsaufgaben sind vorwiegend Programmieraufgaben. Sie werden zu einem\nTeil \u00f6rtlich ungebunden (f\u00fcr einige Aufgaben in Zweierteams) innerhalb vorgegebener\nFristen, zum anderen Teil unter kontrollierten Bedingungen selbst\u00e4ndig gel\u00f6st. Die Beurteilung erfolgt auf Basis schriftlicher Tests und kontinuierlich in \u00dcbungen erbrachter\nLeistungen.",
                "lvas": [
                    {
                        "ects": "5,5",
                        "lva_typ": "VU",
                        "name": "Einf\u00fchrung in die Programmierung 1",
                        "not_steop_constrained": true,
                        "semester": "1. Semester (WS)",
                        "sst": "4,0"
                    },
                    {
                        "ects": "4,0",
                        "lva_typ": "VU",
                        "name": "Einf\u00fchrung in die Programmierung 2",
                        "not_steop_constrained": true,
                        "semester": "2. Semester (SS)",
                        "sst": "3,0"
                    }
                ],
                "name": "Einf\u00fchrung in die Programmierung",
                "wahl": false
            },
            {
                "ects": "9,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen die Studierenden:\n\u2022   die Aufgaben, Abstraktionen und zentralen Komponenten von Betriebssystemen\nund Computernetzwerken erkl\u00e4ren,\n\u2022   Designentscheidungen f\u00fcr Managementmechanismen von Systemressourcen, Netzwerkarchitekturen und Protokollen diskutieren bzw. aus gegebenen Anforderungen\nableiten,\n\u2022   Mechanismen zur Koordination und Synchronisation paralleler Prozesse verstehen\nund Koordinations- und Synchronisationsaufgaben mit diesen Mechanismen l\u00f6sen,\n\u2022   Prinzipien und Mechanismen des Zugriffsschutzes beschreiben,\n\u2022   Physikalische Grundlagen, Mechanismen und Algorithmen moderner Netzwerkprotokolle erkl\u00e4ren,\n\u2022   Wesentliche Performance-Ma\u00dfe und Methoden zur Leistungsanalyse aufz\u00e4hlen,\n\u2022   Entwicklungen von Betriebssystemtechnologien und Computernetzwerken diskutieren und bewerten.\nKognitive und praktische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen\ndie Studierenden:\n\u2022   Programmieraufgaben zur Argument- und Filebehandlung, sowie mit Prozessgenerierung/Prozesstermination unter Verwendung von Betriebssystemen und Betriebssystemservices l\u00f6sen,\n\u2022   gemeinsame Ressourcen und Kommunikations- sowie Synchronisationsmechanismen eines Betriebssystems (wie Shared Memory, Message Queues, Semaphore, Signale und Signalbehandlungsroutinen) bei der Programmierung paralleler Prozesse\nverwenden bzw. einsetzen,\n\u2022   Programme in einer Systemprogrammiersprache entwickeln und das Programmverhalten mittels Debugger analysieren,\n\u2022   grundlegende Aufgaben der Netzwerkprogrammierung (Sockets) und der Netzwerkkonfiguration l\u00f6sen,\n\u2022   die Performance eines Computernetzwerks und dessen Eignung f\u00fcr eine konkrete\nAnwendung einsch\u00e4tzen.\nSoziale Kompetenzen und Selbstkompetenzen: Nach positiver Absolvierung des Moduls\nk\u00f6nnen die Studierenden:\n\u2022   Konzepte und L\u00f6sungen pr\u00e4sentieren.\nInhalt: Betriebssysteme:\n\u2022   Grundkonzepte Betriebssysteme\n\u2022   Prozesse, Threads und Scheduling\n\u2022   Prozesssynchronisation und Deadlock\n\u2022   Speicherverwaltung\n\u2022   Ein/Ausgabe und Disk Management\n\u2022   Security und Protection\n\u2022   Arbeiten mit Betriebssystemen\nComputernetzwerke:\n\u2022   Ziele, Anforderungen, Anwendungsgebiete\n\u2022   Topologien und Netzstrukturen, Adressierung, Daten\u00fcbertragung, Vermittlung,\nManagement Modelle\n\u2022   OSI Schichtenmodell\n\u2013 Layer 1: Physikalische \u00dcbertragungskan\u00e4le, Daten\u00fcbertragung, Synchronisierung\n\u2013 Layer 2: Fehlersicherung, Zugriffsprotokolle, Flu\u00dfkontrolle, Switches\n\u2013 Layer 3: Routing, Nameservice, Autorisierung und Netzwerksicherheit, \u00dcberlastabwehr\n\u2013 Layer 4-7: Verbindungslose/Verbindungsorientierte Services, SessionManagement, Netzwerk-Management, Anwendungsbeispiele\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen: Kenntnisse von Zahlendarstellungen in Computern, der grundlegenden Funktionsweise von Computern, endlicher Automaten, Transducer, Grammatiken, Programmiersprachen, sowie Kenntnisse der systematischen Vorgehensweise bei der Programmerstellung. Elementare Grundlagen der Wahrscheinlichkeitsrechnung sowie elektrischer Signale und Systeme.\nKognitive und praktische Kompetenzen: Interpretieren und Arbeiten mit Zahlendarstellungen und Automaten. Kenntnisse der Programmierung in einer Programmiersprache\nund der systematischen Programmerstellung und Evaluation.\nDiese Voraussetzungen werden in folgenden Modulen vermittelt: Grundlagen Digitaler\nSysteme, Einf\u00fchrung in die Programmierung, Wahrscheinlichkeitstheorie und Stochastische Prozesse, Signale und Systeme.\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Das\nModul setzt sich aus einem Vorlesungsteil und einer Labor\u00fcbung Betriebssysteme sowie\naus einer integrierten Vorlesung und \u00dcbung Computer Networks zusammen. Die Grundlagen, zentralen Konzepte und theoretischen Inhalte zu Betriebsystemen werden im Vorlesungsteil pr\u00e4sentiert. Ausgew\u00e4hlte Inhalte und Problemstellungen aus dem Bereich der\nBetriebssystem- und Netzwerkprogrammierung werden in der Labor\u00fcbung unter UNIX\n(Linux) programmiert. Einf\u00fchrungswissen zu den zu l\u00f6senden Aufgabenstellungen wird\nin begleitenden Vortragsbl\u00f6cken angeboten. In der integrierten \u00dcbung zu Computer Networks sind zus\u00e4tzlich spezifische Aufgaben etwa im Bereich Netzwerkkonfiguration und\nLeistungsabsch\u00e4tzung zu l\u00f6sen.",
                "lvas": [
                    {
                        "ects": "2,0",
                        "lva_typ": "VO",
                        "name": "Betriebssysteme",
                        "not_steop_constrained": false,
                        "semester": "3. Semester (WS)",
                        "sst": "2,0"
                    },
                    {
                        "ects": "4,0",
                        "lva_typ": "UE",
                        "name": "Betriebssysteme",
                        "not_steop_constrained": false,
                        "semester": "3. Semester (WS)",
                        "sst": "2,0"
                    },
                    {
                        "ects": "3,0",
                        "lva_typ": "VU",
                        "name": "Computer Networks",
                        "not_steop_constrained": false,
                        "semester": "3. Semester (WS)",
                        "sst": "2,0"
                    }
                ],
                "name": "Betriebssysteme und Computernetzwerke",
                "wahl": false
            },
            {
                "ects": "7,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen die Studierenden Folgendes beschreiben:\n\u2022   Gemeinsamkeiten und Unterschiede die bei der Softwareentwicklung f\u00fcr \u2018normale\u2019\nSysteme und Embedded Systems auftreten.\n\u2022   Aspekte und Probleme, die unterhalb der Abstraktion von Hochsprachen-Programmierung auftreten.\nKognitive und praktische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen\ndie Studierenden\n\u2022   komplexere Aufgabenstellungen analysieren,\n\u2022   Inhalte nat\u00fcrlichsprachiger Projektbeschreibungen in Embedded Systems umsetzen,\n\u2022   Vorgehensweisen und Werkzeuge beim Programmieren von Embedded Systems\nsystematisch anwenden,\n\u2022   systematische Fehlersuche und -beseitigung in Embedded Systems durchf\u00fchren,\n\u2022   Datenbl\u00e4tter von Hardwarekomponenten interpretieren,\n\u2022   Programmoptimierungen mit Fokus auf eingeschr\u00e4nkte Ressourcen durchf\u00fchren,\n\u2022   eigenverantwortliche Detailplanung eines Embedded-Systems-Projekts durchf\u00fchren.\nInhalt:\n\u2022   Microcontroller-Architekturen\n\u2022   Peripheriemodule von Microcontrollern\n\u2022   Serielle und parallele digitale Kommunikation\n\u2022   Analog-Digital- und Digital-Analog-Interfaces\n\u2022   Entwicklungs-Toolchain\n\u2022   Microcontroller-Programmierung in Assembler und einer Hochsprache (C)\n\u2022   Microcontroller-Programmierung unter einem Embedded Systems Betriebssystem.\n\u2022   Systematisches Debugging in Embedded Systems\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen:\n\u2022   Physikalische Grundlagen elektrischer Komponenten und elektrischer Netzwerke\n\u2022   Analyse elektrischer Netzwerke\n\u2022   Wissen \u00fcber und Verst\u00e4ndnis von elementaren elektrischen Schaltungen\n\u2022   Fundierte Kenntnisse von Zahlendarstellungen in Computern\n\u2022   Grundlagen der booleschen Algebra und Schaltlogik\n\u2022   Aufbau digitaler Schaltungen, Implementierung von Registern, Speicher und Logik\n\u2022   Fundierte Kenntnisse in Rechnerarchitekturen\n\u2022   Fundamentale Algorithmen und Datenstrukturen\n\u2022   Methoden zur Bewertung und Analyse von Algorithmen\nKognitive und praktische Kompetenzen:\n\u2022   F\u00e4higkeit zur Abstraktion elektrischer Vorg\u00e4nge\n\u2022   Fertigkeiten in der Verwendung der Rechenverfahren der Elektrotechnik\n\u2022   Fertigkeiten bei der praktischen Realisierung einfacher elektrischer Schaltungen\nund deren messtechnischer Untersuchung\n\u2022   F\u00e4higkeit zum praktischen Entwurf und zur Modellierung von sequenziellen und\nparallelen Systemen\n\u2022   F\u00e4higkeit zum Einsatz formaler und informeller Methoden zur Spezifikation, Modellierung und Analyse von Algorithmen\n\u2022   Fundierte Fertigkeiten in der Programmierung in C\n\u2022   Kenntnisse \u00fcber die Programmentwicklung unter Unix und Linux\nSoziale Kompetenzen und Selbstkompetenzen:\n\u2022   Selbstorganisation und Eigenverantwortlichkeit\n\u2022   Interdisziplin\u00e4res Denken\nDiese Voraussetzungen werden in folgenden Modulen vermittelt: Elektrotechnische\nGrundlagen, Digital Design, Betriebssysteme und Computernetzwerke, Grundlagen Digitaler Systeme, Algebra und Diskrete Mathematik, Analysis, Algorithmen und Datenstrukturen\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase sowie\nentweder die Lehrveranstaltung Grundlagen digitaler Systeme oder die Lehrveranstaltung Technische Grundlagen der Informatik.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Das\nModul setzt sich aus einer Labor\u00fcbung mit begleitender Vorlesung zusammen, wobei in\nder einst\u00fcndigen Vorlesung die theoretischen Konzepte erarbeitet und in der Labor\u00fcbung\npraktische \u00dcbungsprojekte entwickelt werden. Die Inhalt der Vorlesung, und notwendiges\ntheoretisches Wissen aus dem \u00dcbungsteil, werden in schriftlichen Tests \u00fcberpr\u00fcft. Weiters erfolgen praktische Tests die mit Kurzbeispielen die Anwendung der in der \u00dcbung\nerlernten F\u00e4higkeiten erfordern.",
                "lvas": [
                    {
                        "ects": "7,0",
                        "lva_typ": "VU",
                        "name": "Microcontroller",
                        "not_steop_constrained": false,
                        "semester": "5. Semester (WS)",
                        "sst": "7,0"
                    }
                ],
                "name": "Microcontroller",
                "wahl": false
            }
        ],
        "name": "Programmierung"
    },
    {
        "module": [
            {
                "ects": "8,5",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Darstellen des Begriffssystems der Signal- und\nSystemtheorie und Erkl\u00e4ren der grundlegenden Modelle f\u00fcr die mathematische Beschreibung von Signalen und linearen Systemen im Zeit- und im Frequenzbereich.\nKognitive und praktische Kompetenzen: Formulieren und Klassifizieren von Problemen\nder Systemdynamik und der Signalverarbeitung; Beherrschen der erforderlichen mathematischen Standardmethoden; L\u00f6sen und Interpretieren der Ergebnisse konkreter Aufgaben; Erkennen der Beziehungen zwischen realen Objekten und deren mathematischen\nModellen.\nSoziale Kompetenzen und Selbstkompetenzen: Verstehen der Bedeutung des Erlernens\nund Anwendens theoretischer Konzepte; Probleml\u00f6sung im Team mit Unterst\u00fctzung\nvon Tutoren.\nInhalt: Zeitkontinuierliche Signale und Systeme:\n\u2022   Modellieren von Signalen und Systemen (determinierte Signale, Zufallssignale, Systemantworten, Linearit\u00e4t und Zeitinvarianz, Kausalit\u00e4t und Stabilit\u00e4t)\n\u2022   LTI-Systeme im Zeitbereich (Aufstellen der System-Differenzialgleichung, Eigenfunktionen, \u00dcbertragungsfunktion, Pole und Nullstellen, klassische L\u00f6sungstechniken, Sprungantwort und Sto\u00dfantwort)\n\u2022   Fourier-Transformation (Definition und anschauliche Bedeutung, Eigenschaften\nund Techniken, Faltungsprodukt, Korrelationsprodukt)\n\u2022   LTI-Systeme im Frequenzbereich (Systemantworten bei Sinuseing\u00e4ngen, komplexer\nFrequenzgang, Bode-Diagramm, Totzeitsysteme, Erregung durch Zufallssignale)\n\u2022   Fourier-Reihen (periodische Signale, Eigenschaften und Techniken, Systemantworten bei periodischen Eing\u00e4ngen)\n\u2022   Str\u00f6me und Spannungen mit Oberschwingungen (Charakterisierung von Mischgr\u00f6\u00dfen und Wechselgr\u00f6\u00dfen, Leistungsgr\u00f6\u00dfen, Entstehung von Oberschwingungen in\nnichtlinearen Systemen)\n\u2022   Laplace-Transformation (Definition und Beziehung zur Fourier-Transformation, Eigenschaften und Techniken, Faltungssatz, Anfangs- und Endwertsatz)\n\u2022   LTI-Systeme im Laplace-Bereich (Behandlung von Anfangsproblemen, Kombinieren von Systemen)\n\u2022   Systeme im Zustandsraum (Aufstellen der Zustandsgleichungen, L\u00f6sungsdarstellungen im Zustandsraum, Eigenwerte und Eigenvektoren, Transitionsmatrix, \u00dcbertragungsmatrix, Steuerbarkeit und Beobachtbarkeit)\nZeitdiskrete Signale und Systeme:\n\u2022   Zeitdiskrete Signale (elementare zeitdiskrete Signale und Signaleigenschaften, Zeitachsentransformationen, Fourierreihen)\n\u2022   Zeitdiskrete Systeme (Beschreibung im Zeit- und im Frequenzbereich)\n\u2022   Fouriertransformation f\u00fcr zeitdiskrete Signale und Systeme (Eigenschaften, Abtastung und Rekonstruktion analoger Tiefpass- und Bandpasssignale)\n\u2022   Differenzengleichungen und Z-Transformation (zeitdiskrete Netzwerke, Differenzengleichungen mit konstanten Koeffizienten, Z-Transformation, inverse ZTransformation, Eigenschaften der Z-Transformation, L\u00f6sung von Differenzengleichungen mit der Z-Transformation, Anfangs- und Endwerttheorem)\n\u2022   Digitale Filter (Idealisierte zeitdiskrete Filter, Hilberttransformator, FIR- und IIRFilterentwurf, Filterrealisierungen)\n\u2022   Diskrete Fouriertransformation (DFT) und schnelle DFT (Eigenschaften, Zusammenhang DFT und Z-Transformation, Fenstereffekt, Overlap-Add und OverlapSave Faltungsoperation, schnelle Fouriertransformation (FFT))\n\u2022   Multiratensignalverarbeitung (Interpolation, Dezimation, effiziente Multiratensysteme)\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen: Fundierte Kenntnisse aus linearer Algebra und\nAnalysis, einschlie\u00dflich lineare gew\u00f6hnliche Differenzialgleichungen; Kenntnis der idealisierten Eigenschaften elektrischer Stromkreiselemente und der Analysemethoden f\u00fcr\nelektrische Schaltungen.\nKognitive und praktische Kompetenzen: Sicheres Umgehen mit mathematischen Ideen,\nStrukturen und Werkzeugen; praktische Fertigkeit in der Analyse elektrischer Schaltungen; komplexe Wechselstromrechnung.\nDiese Voraussetzungen werden in folgenden Modulen vermittelt: Algebra und Diskrete\nMathematik, Analysis, Analysis 2, Elektrotechnische Grundlagen\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung:\n\u2022   Zeitkontinuierliche Signale und Systeme: Vorlesung mit integrierten Rechen\u00fcbungen; selbstst\u00e4ndiges L\u00f6sen bereitgestellter Aufgaben als begleitende Mitarbeit;\nschriftliche und m\u00fcndliche Abschlu\u00dfpr\u00fcfung.\n\u2022   Zeitdiskrete Signale und Systeme: Jedes Teilgebiet wird mit repr\u00e4sentativen Rechenbeispielen und Simulationsbeispielen mit MATLAB oder OCTAVE vorgestellt,\nmit Vorf\u00fchrung typischer Anwendungen der digitalen Signalverarbeitung (z.B. Abtastung und Filterentwurf). Die Leistungsfeststellung erfolgt durch studienbegleitende Pr\u00fcfungen \u00fcber den vorgestellten Stoff, durch die Beurteilung der Mitarbeit\nin der \u00dcbung (Kleingruppen, Betreuung mit Unterst\u00fctzung durch Tutoren) sowie\ndurch m\u00fcndliche Pr\u00fcfungen.",
                "lvas": [
                    {
                        "ects": "4,5",
                        "lva_typ": "VU",
                        "name": "Signale und Systeme 1",
                        "not_steop_constrained": false,
                        "semester": "3. Semester (WS)",
                        "sst": "3,0"
                    },
                    {
                        "ects": "4,0",
                        "lva_typ": "VU",
                        "name": "Signale und Systeme 2",
                        "not_steop_constrained": false,
                        "semester": "4. Semester (SS)",
                        "sst": "3,0"
                    }
                ],
                "name": "Signale und Systeme",
                "wahl": false
            },
            {
                "ects": "9,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Erkl\u00e4ren der Grundlagen und Methoden der\nmathematischen Modellierung physikalischer Systeme (Mechanik und W\u00e4rmelehre). Reproduktion bzw. Ableitung der wesentlichen mathematischen Grundlagen, Entwurfs- und\nAnalysemethoden der Regelungstechnik, beginnend bei den systemtheoretischen Grundlagen linearer zeitkontinuierlicher und zeitdiskreter Systeme \u00fcber den systematischen\nEntwurf linearer Regler im Frequenzbereich bis hin zum Beobachter- und Reglerentwurf\nim Zustandsraum.\nKognitive und praktische Kompetenzen: Analysieren regelungstechnischer Probleme; Ausf\u00fchren eines mathematisch fundierten Reglerentwurfs; Praktisches Implementieren von\nRegelungssystemen; Durchf\u00fchren einfacher Simulationen.\nInhalt: Einf\u00fchrung in die mathematische Modellierung mechanischer und thermischer\nphysikalischer Systeme: Punkt-Kinematik, Newtonsche Gesetze, Kr\u00e4ftesysteme, Schwerpunkt, Impulserhaltung, translatorische kinetische Energie und potentielle Energie, dissipative Kr\u00e4fte, Feder-Masse-D\u00e4mpfer System, K\u00f6rper mit ver\u00e4nderlicher Masse, Drehimpulserhaltung, Euler-Lagrange Gleichungen, W\u00e4rmeleitung, Randbedingungen, erzwungene Konvektion, freie Konvektion, W\u00e4rmestrahlung, W\u00e4rmequellen, station\u00e4re W\u00e4rme\u00fcbertragung, ebene Wand, zylinderf\u00f6rmige Wand, vorspringende Teile und Rippen,\nW\u00e4rmetauscher, transiente W\u00e4rme\u00fcbertragung, numerische L\u00f6sung von W\u00e4rme\u00fcbertragungsproblemen, Finite Differenzen Methode, konzentriert-parametrische Formulierung\nals RC-Netzwerk.\nEinf\u00fchrung in die Theorie zeitkontinuierlicher und zeitdiskreter Systeme, das Zustandskonzept, Linearit\u00e4t, Zeitinvarianz, Transitionsmatrix, Jordan-Form, Ruhelagen,\nLinearisierung (um eine Ruhelage bzw. eine Trajektorie), asymptotische Stabilit\u00e4t der\nRuhelage, Eingangs-Ausgangsbeschreibung (\u00dcbertragungsfunktion, \u00dcbertragungsmatrix), Realisierungsproblem f\u00fcr SISO-Systeme, Frequenzgang (Bode-Diagramm, NyquistOrtskurve), BIBO-Stabilit\u00e4t (Routh-Hurwitz-, Michaelov-, Nyquist-Kriterium), geschlossener und offener Regelkreis, Performance \u00dcberlegungen, interne Stabilit\u00e4t, asymptotisches F\u00fchrungsverhalten, St\u00f6runterdr\u00fcckung, Regelkreise mit einem und zwei Freiheitsgraden, Kaskadenregelung, Reglerentwurfsmethoden im Frequenzbereich: Frequenzkennlinienverfahren (P-, I-, PD-, PI-, PID-, Lead-, Lag-Regler, Notch-Filter), Erreichbarkeit und Beobachtbarkeit (Erreichbarkeits- und Beobachtbarkeitsmatrix, PBH-Test,\nGramsche Matrizen, Markov-Parameter und Hankelmatrix), Reglerentwurfsmethoden\nim Zustandsraum: Polvorgabe (Formel von Ackermann), Beobachterentwurf (trivialer\nBeobachter, vollst\u00e4ndiger Luenberger Beobachter), das Dualit\u00e4tsprinzip, das Separationsprinzip, Implementierung digitaler Regler.\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen: Fundierte Kenntnisse in h\u00f6herer Analysis und\nlinearer Algebra; Fundierte Kenntnisse \u00fcber zeitkontinuierliche und zeitdiskrete Signale\nund Systeme.\nKognitive und praktische Kompetenzen: Fertigkeiten in der Verwendung fortgeschrittener\nmathematischer Methoden (Analysis, Algebra); Fertigkeiten in der Analyse von zeitkontinuierlichen und zeitdiskreten Signalen und Systemen.\nDiese Voraussetzungen werden in folgenden Modulen vermittelt: Algebra und Diskrete\nMathematik, Analysis, Analysis 2, Elektrotechnische Grundlagen, Signale und Systeme\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Das\nModul setzt sich aus zwei Vorlesungsteilen, in denen die theoretischen Grundlagen\nund Methoden der Modellbildung und der Regelungstechnik vorgestellt werden, einem\n\u00dcbungsteil, bei dem einfache Rechenbeispiele auf der Tafel vorgerechnet werden, und einem Labor\u00fcbungsteil, bei dem das Computeralgebraprogramm Maple und das Numerikund Simulationsprogramm Matlab/Simulink sowie die Control System Toolbox zum\nEinsatz kommen, zusammen.",
                "lvas": [
                    {
                        "ects": "3,0",
                        "lva_typ": "VU",
                        "name": "Modellbildung",
                        "not_steop_constrained": false,
                        "semester": "4. Semester (SS)",
                        "sst": "2,0"
                    },
                    {
                        "ects": "4,5",
                        "lva_typ": "VU",
                        "name": "Automatisierung",
                        "not_steop_constrained": false,
                        "semester": "5. Semester (WS)",
                        "sst": "3,0"
                    },
                    {
                        "ects": "1,5",
                        "lva_typ": "LU",
                        "name": "Regelungstechnik",
                        "not_steop_constrained": false,
                        "semester": "5. Semester (WS)",
                        "sst": "1,5"
                    }
                ],
                "name": "Modellbildung und Regelungstechnik",
                "wahl": false
            }
        ],
        "name": "Signale und Systeme"
    },
    {
        "module": [
            {
                "ects": "6,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen:\n\u2022   Kenntnis unterschiedlicher Spezifikationsformalismen, ihrer Semantik und ihrer\nAnwendungsgebiete\n\u2022   Kenntnis unterschiedlicher Verifikationstools\n\u2022   Verst\u00e4ndnis grundlegender Methoden der Modellierung in Hinsicht auf Verifikationsfragen\n\u2022   Beispielhafte Kenntnisse zu Zertifikation und Industriestandards in Hinsicht auf\nVerifikation\nKognitive und praktische Kompetenzen:\n\u2022   Praktischer Umgang mit Spezifikationsformalismen hinsichtlich ihrer Semantik\nund hinsichtlich Requirement Engineering\n\u2022   Praktischer Umgang mit Verifikationstools\n\u2022   Praktische Modellierung und Verifikation von Systemen und Interpretation der\nErgebnisse\nSoziale Kompetenzen und Selbstkompetenzen:\n\u2022   Verst\u00e4ndnis f\u00fcr das Gefahrenpotential fehlerhafter Software und Hardware\n\u2022   Verst\u00e4ndnis f\u00fcr die Bedeutung formaler Methoden in der Produktentwicklung\n\u2022   Anwendung theoretischer Konzepte auf angewandte Fragestellungen\nInhalt:\n\u2022   Methoden der Modellierung und Spezifikation durch Logik, Automaten, Assertions,\nCoverage Kriterien\n\u2022   Verifikationswerkzeuge, insbesonders Model Checker, Statische Analyse, Theorembeweisen, Testen\n\u2022   Praktischer Umgang mit Verifikationswerkzeugen\n\u2022   Grundlagen zur Zertifizierung und zu Standards in der industriellen Validierung\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen: Programmkonstruktion, Modellierung, theoretische Informatik und Mathematik.\nKognitive und praktische Kompetenzen: Ge\u00fcbter, fachgerechter Umgang mit Computerprogrammen und Konzepten der theoretischen Informatik und Mathematik.\nSoziale Kompetenzen und Selbstkompetenzen: F\u00e4higkeit zur selbst\u00e4ndigen Einarbeitung\nin Tools anhand schriftlicher Unterlagen.\nDiese Voraussetzungen werden in folgenden Modulen vermittelt: Algebra und Diskrete\nMathematik, Theoretische Informatik und Logik, Einf\u00fchrung in die Programmierung,\nAlgorithmen und Datenstrukturen, Grundlagen Digitaler Systeme\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Die\nin der Vorlesung vermittelten Grundlagen und Methoden werden in praktischen \u00dcbungen\nam Computer und auf Papier vertieft und angewandt. Die Leistungsfeststellung erfolgt\ndurch Beispiel-Abgaben und schriftliche Tests/Pr\u00fcfungen.",
                "lvas": [
                    {
                        "ects": "6,0",
                        "lva_typ": "VU",
                        "name": "Programm- und Systemverifikation",
                        "not_steop_constrained": false,
                        "semester": "4. Semester (SS)",
                        "sst": "4,5"
                    }
                ],
                "name": "Programm- und Systemverifikation",
                "wahl": false
            },
            {
                "ects": "5,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen die Studierenden:\n\u2022   Methoden zur Konstruktion und Modellierung von zuverl\u00e4ssigen Systemen, die\nstrikten zeitlichen Vorgaben gehorchen m\u00fcssen, beschreiben und anwenden. Dazu\nbenutzen sie die erworbenen Kenntnisse \u00fcber Fehlerarten, Fehlermodelle, Fehlererkennung, Fehleranalyse, Redundanzverfahren, Zuverl\u00e4ssigkeitsmodellierung.\n\u2022   Konzepte und Methoden der zeitabh\u00e4ngigen Information, Uhrensynchronisation,\nEchtzeitscheduling und Echtzeitkommunikation erkl\u00e4ren und benutzen.\n\u2022   Risiken des Einsatzes von Computersystemen in sicherheitskritischen und zeitkritischen Anwendungen diskutieren und beurteilen.\nKognitive und praktische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen\ndie Studierenden:\n\u2022   Fehlerwahrscheinlichkeiten und Ausfallrisiken einsch\u00e4tzen und modellieren,\n\u2022   Verfahren zur Erh\u00f6hung der Zuverl\u00e4ssigkeit von Computersystemen anwenden,\n\u2022   zeitliche Anforderungen an Computersysteme analysieren,\n\u2022   Computersysteme mit Echtzeitanforderungen entwerfen und modellieren.\nInhalt:\n\u2022   Grundlagen: Zuverl\u00e4ssigkeit, Wartbarkeit, Verf\u00fcgbarkeit, MTTF\n\u2022   Quantitative Analysen: Blockdiagramme, Fehlerb\u00e4ume, Markov-Prozesse\n\u2022   Sicherheit, Fehlermodelle, Wartung, Alterungsfehler, Entwurfsfehler\n\u2022   Fehlertolerante Computersysteme: Redundanz, Fehlerlatenz, Voting, Recovery\nBlocks, N-Version-Programming, Synchronisation\n\u2022   Fallstudien von zuverl\u00e4ssigen bzw. fehlertoleranten Systemen\n\u2022   Fehler und Zuverl\u00e4ssigkeitsmodellierung/analyse mit Tools\n\u2022   Grundlagen Echtzeitsysteme, Zeitabh\u00e4ngigkeit von Information, logische und temporale Ordnung\n\u2022   Modellbildung von Echtzeitsystemen: Zustand und Ereignis, Komponenten, Interfaces, Echtzeitinformation\n\u2022   Echtzeitkommunikation, Kommunikationsprotokolle f\u00fcr Echtzeitsysteme\n\u2022   Uhrensynchronisation\n\u2022   Fehlertoleranz in Echtzeitsystemen\n\u2022   Echtzeitbetriebsysteme: Taskstruktur, Ressourcenmanagement, I/O, Scheduling,\nWorst-Case Zeitanalyse von Tasks\n\u2022   Energieverbrauch und Energiemanagement in Echtzeitsystemen\n\u2022   Design von Echtzeitsystemen: Architekturmodelle, Composability, Designprinzipien, Zertifizierung\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen: Kenntnisse in Boole\u2019scher Algebra, theoretischer Informatik und Logik, Wahrscheinlichkeitsrechnung, Beschreibung und Modellierung stochastischer Prozesse, Aufbau und Funktionsweise von Microcomputern, Betriebssystemen und Netzwerken.\nKognitive und praktische Kompetenzen: Wahrscheinlichkeitsrechnung und Modellierung,\nSystematisches Arbeiten mit Softwaretools, Abstraktionsverm\u00f6gen.\nSoziale Kompetenzen und Selbstkompetenzen: Analyse komplexer Zusammenh\u00e4nge und\nWechselwirkungen, Probleml\u00f6sung im Team.\nDiese Voraussetzungen werden in folgenden Modulen vermittelt: Grundlagen Digitaler\nSysteme, Theoretische Informatik und Logik, Wahrscheinlichkeitstheorie und Stochastische Prozesse, Betriebssysteme und Computernetzwerke\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Die\nGrundlagen und theoretischen Inhalte werden im Vorlesungsteil vermittelt. Praktische\nFertigkeiten der Fehler- und Zuverl\u00e4ssigkeitsmodellierung werden in einem \u00dcbungsteil\nerworben, in dem die Studierenden Softwaretools verwenden und Ergebnisse in Form\nvon Laborberichten dokumentieren.",
                "lvas": [
                    {
                        "ects": "2,0",
                        "lva_typ": "VO",
                        "name": "Echtzeitsysteme",
                        "not_steop_constrained": false,
                        "semester": "4. Semester (SS)",
                        "sst": "2,0"
                    },
                    {
                        "ects": "3,0",
                        "lva_typ": "VU",
                        "name": "Dependable Systems",
                        "not_steop_constrained": false,
                        "semester": "4. Semester (SS)",
                        "sst": "2,0"
                    }
                ],
                "name": "Zuverl\u00e4ssige Echtzeitsysteme",
                "wahl": false
            },
            {
                "ects": "6,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen:\n\u2022   Automatisierungssysteme und deren hierarchische Darstellung als \"Automationspyramide\"\n\u2022   Kommunikationsprotokolle in den verschiedenen Ebenen/Anwendungsbereichen\n\u2022   \u00dcberblick und Beispiele zu Softwareumgebungen und Entwicklungsprozessen aus\nder industriellen Praxis\n\u2022   Konkreter Aufbau industrielle Ger\u00e4te und Komponenten anhand von Beispielen\n\u2022   G\u00e4ngige Normen und Standards in der Automatisierungstechnik\nKognitive und praktische Kompetenzen:\n\u2022   Analyse technischer Prozesse\n\u2022   Ableiten geeigneter Prozessmodelle\n\u2022   Entwurf von Steuerungssystemen entsprechend einem Prozessmodell\n\u2022   Simulation und Verifikation von Steuerungssystemen unter einem gegebenen Prozessmodell\n\u2022   Vergleich und Auswahl industrieller Standards im Hinblick auf konkrete Anwendungsszenarien\n\u2022   Anwendung standardisierter Protokolle und Softwarekomponenten\n\u2022   Entwicklung von dezentralen/verteilten Steuerungssystemen\nSoziale Kompetenzen und Selbstkompetenzen:\n\u2022   Analytisches Denken (z.B. Bestimmen von Teilabl\u00e4ufen und deren Zusammenh\u00e4ngen innerhalb technischer Prozesse)\n\u2022   Abstraktes Denken (z.B. beim Erstellen und Verwenden von Prozessmodellen)\n\u2022   Strukturiertes Denken, Probleml\u00f6sungskompetenz (Spezifizieren und Implementieren von Steuerungssystemen)\n\u2022   Erweiterte Lesekompetenz (technisches Englisch): Arbeiten mit technischer Dokumentation und Datenbl\u00e4ttern\n\u2022   Selbstorganisation, Eigenverantwortlichkeit\n\u2022   Kommunikationsf\u00e4higkeit (Teamarbeit)\nInhalt: Das Modul vermittelt Kenntnisse, die f\u00fcr den Entwurf von Applikationen in der\n(verteilten) Automatisierungstechnik notwendig sind. Relevante Grundlagen der industriellen Kommunikationstechnik und ihre Funktionsweise werden adressiert. Applikationen zur Interaktion mit einem technischen Modellprozess werden von den Studierenden\neigenst\u00e4ndig entwickelt, dokumentiert und pr\u00e4sentiert.\n\u2022   Einsatzbereiche der Automatisierungstechnik mit dem Schwerpunkt auf industrieller Automation (Fertigungstechnik, Verfahrenstechnik), Automation im Kraftfahrzeugbereich, Heim- und Geb\u00e4udeautomation\n\u2022   Systemmodell in der verteilten Automation\n\u2022   Aufbau und Funktionsweise von verteilten Automatisierungssystemen: Kommunikation und Ger\u00e4te\n\u2022   Normen zur Modellierung und Programmierung speicherprogrammierbarer Steuerungen und verteilter Applikationen in der Automatisierungstechnik\n\u2022   Modelle zum Datenaustausch in der industriellen Kommunikation\n\u2022   Diskussion ausgew\u00e4hlter standardisierter Automationsnetzwerke\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen:\n\u2022   Grundlagen digitaler Systeme, Logikschaltungen und Rechnerarchitekturen\n\u2022   Grundkenntnisse in Elektrotechnik und Physik (Grundlage f\u00fcr das Verst\u00e4ndnis\nvon Sensoren/Aktoren)\n\u2022   Grundlegendes Wissen \u00fcber Netzwerke und Protokolle\n\u2022   Systematische, konstruktive Vorgehensweise bei der Erstellung und Evaluation von\nProgrammen\nKognitive und praktische Kompetenzen:\n\u2022   Interdisziplin\u00e4re und flexible/anpassungsf\u00e4hige Denkweise\n\u2022   Praktische F\u00e4higkeit zur Konstruktion von Programmen (auch f\u00fcr eingebettete\nSysteme)\nSoziale Kompetenzen und Selbstkompetenzen:\n\u2022   Selbstorganisation, Eigenverantwortlichkeit: selbstst\u00e4ndiges L\u00f6sen von Aufgabenstellungen\nDiese Voraussetzungen werden in folgenden Modulen vermittelt: Betriebssysteme und\nComputernetzwerke, Microcontroller, Elektrotechnische Grundlagen, Modellbildung und\nRegelungstechnik, Zuverl\u00e4ssige Echtzeitsysteme\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung:\n\u2022   Vorlesungsteil: Vortr\u00e4ge; Leistungs\u00fcberpr\u00fcfung durch Pr\u00fcfung\n\u2022   Labor\u00fcbungsteil: Gef\u00fchrte Kleingruppen; individuell auszuarbeitende \u00dcbungsbeispiele und Laborprotokolle; Pr\u00e4sentation der L\u00f6sungen im Rahmen von Abgabegespr\u00e4chen",
                "lvas": [
                    {
                        "ects": "2,0",
                        "lva_typ": "VO",
                        "name": "Dezentrale Automation",
                        "not_steop_constrained": false,
                        "semester": "5. Semester (WS)",
                        "sst": "2,0"
                    },
                    {
                        "ects": "4,0",
                        "lva_typ": "LU",
                        "name": "Dezentrale Automation",
                        "not_steop_constrained": false,
                        "semester": "5. Semester (WS)",
                        "sst": "4,0"
                    }
                ],
                "name": "Dezentrale Automation",
                "wahl": false
            }
        ],
        "name": "Zuverl\u00e4ssige verteilte Echtzeitsysteme"
    },
    {
        "module": [
            {
                "ects": "6,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen die Studierenden\n\u2022   alle theoretischen Grundlagen von abstrakten Maschinen verstehen und\n\u2022   Details konkreter abstrakter Maschinen erkl\u00e4ren.\nKognitive und praktische Kompetenzen: Die Auseinandersetzung mit konkreten Beispielen von abstrakten Maschinen und die Implementierung eigener abstrakter Maschinen\nerm\u00f6glicht die Studierenden\n\u2022   die Qualit\u00e4t von abstrakten Maschinen zu beurteilen,\n\u2022   eigene abstrakte Maschinen zu entwerfen und\n\u2022   abstrakte Maschinen zu implementieren.\nSoziale Kompetenzen und Selbstkompetenzen: Eigeninitiative und Neugierde auf innovative und kreative Konzepte und L\u00f6sungsans\u00e4tze werden besonders gef\u00f6rdert.\nInhalt:\n\u2022   reale Maschinen, Prozesssorarchitekturen\n\u2022   Interpretationstechniken (threaded code), Implementierung von Forth\n\u2022   Pascal P4 Maschine\n\u2022   Java Virtuelle Machine (just-in-time \u00dcbersetzung), Microsoft Intermediate Language\n\u2022   Registermaschinen und die DalvikVM\n\u2022   syntaxgesteuerte Editoren und Baummaschinen\n\u2022   Prologmaschinen (WAM, VAM)\n\u2022   funktionale Maschinen (Lamda Kalk\u00fcl, SECD Maschine)\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen: Grundlagen von Programmiersprachen und\n\u00dcbersetzerbau\nKognitive und praktische Kompetenzen: Programmierkenntnisse\nDiese Voraussetzungen werden in folgenden Modulen vermittelt: Einf\u00fchrung in die Programmierung, Programmierparadigmen, \u00dcbersetzerbau.\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung:\n\u2022   3 ECTS Vortrag und selbst\u00e4ndiges Erlernen der eher theoretischen Grundlagen.\nDie Beurteilung erfolgt durch Pr\u00fcfung.\n\u2022   3 ECTS \u00dcbung am Computer zur Entwicklung praktischer F\u00e4higkeiten zur Entwicklung von abstrakten Maschinen. Die Leistungsbeurteilung erfolgt durch die\nBeurteilung der Implementierung einer selbst entworfenen abstrakten Maschine\nund der Pr\u00e4sentation dieser Implementierung.",
                "lvas": [
                    {
                        "ects": "3,0",
                        "lva_typ": "VO",
                        "name": "Abstrakte Maschinen",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    },
                    {
                        "ects": "3,0",
                        "lva_typ": "UE",
                        "name": "Abstrakte Maschinen",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    }
                ],
                "name": "Abstrakte Maschinen",
                "wahl": true
            },
            {
                "ects": "6,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen die Studierenden die wesentlichen mathematischen Schlussweisen und Beweistechniken benennen, die Korrektheit der Schlussweisen argumentieren und den Zusammenhang\nder Beweistechniken mit Kalk\u00fclen der formalen Logik herstellen.\nKognitive und praktische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen\ndie Studierenden die Korrektheit gegebener Beweise argumentieren, (auch komplexere)\nBeweise selbst erstellen und strukturieren, unterschiedliche Induktionsprinzipien korrekt\nanwenden, sowie Induktionshypothesen kreativ erstellen.\nSoziale Kompetenzen und Selbstkompetenzen: Nach positiver Absolvierung des Moduls\nk\u00f6nnen die Studierenden die Beweisideen und Beweise kommunizieren.\nInhalt:\n\u2022   Was ist ein Beweis? Welche Aufgaben hat er?\n\u2022   Einfache Beweistechniken\n\u2022   Beweis von All- und Existenzaussagen, Konjunktionen, Disjunktionen, Implikationen, \u00c4quivalenzen\n\u2022   Nutzung dieser Aussagen in einem Beweis\n\u2022   Zusammenhang zum Kalk\u00fcl des nat\u00fcrlichen Schliessens\n\u2022   Was ist Induktion? Wozu wird sie ben\u00f6tigt?\n\u2022   Arten der Induktion (mathematische, starke, strukturelle, Noether\u2019sche), jeweils\nmit Diskussion des entsprechenden Induktionsschemas und Anwendungsf\u00e4lle (ausf\u00fchrlich demonstriert an Beispielen)\n\u2022   Wie schreibt man einen Induktionsbeweis?\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen: Es wird erwartet, dass die Studierenden vor der\nAbsolvierung des Moduls die grundlegenden Beweisprinzipien benennen und beschreiben\nk\u00f6nnen.\nKognitive und praktische Kompetenzen: Es wird erwartet, dass die Studierenden vor\nder Absolvierung des Moduls einfache nat\u00fcrlichsprachlich gegebene Sachverhalte korrekt formalisieren und diese beweisen k\u00f6nnen. Desweiteren sollen die Studierenden vor\nder Absolvierung des Moduls einfache Programmieraufgaben als rekursives Programm\nformulieren k\u00f6nnen.\nSoziale Kompetenzen und Selbstkompetenzen: Keine speziellen Voraussetzungen.\nDiese Voraussetzungen werden im Modul Algebra und Diskrete Mathematik vermittelt.\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Geblockte Einf\u00fchrungsvorlesung (im Gesamtumfang von knapp 1,5 ECTS), danach umfangreiche individuell auszuarbeitende Aufgaben zum Argumentieren und Beweisen (im\nUmfang von 4,5 ECTS). Ausf\u00fchrliche Pr\u00e4sentation der Beweise (alle L\u00f6sungen durch jede Teilnehmerin/jeden Teilnehmer). Exemplarische Ausarbeitung einiger L\u00f6sungen, Korrektur durch LVA Leiter/Tutoren zwecks R\u00fcckmeldung. Leistungsermittlung auf Grund\nder Pr\u00e4sentationen und der berichtigten schriftlichen Ausarbeitungen.",
                "lvas": [
                    {
                        "ects": "6,0",
                        "lva_typ": "VU",
                        "name": "Argumentieren und Beweisen",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "4,0"
                    }
                ],
                "name": "Argumentieren und Beweisen",
                "wahl": true
            },
            {
                "ects": "4,5",
                "lernergebnisse": "Vertrautheit der Studierenden mit den grundlegenden Konzepten\nalgorithmisch-numerischer L\u00f6sungsmethoden, \u00fcberlegte Auswahl und der effiziente Einsatz kommerzieller oder frei verf\u00fcgbarer numerischer Software; Die Studierenden lernen\nzu erkennen, ob ein Programm eine angemessene L\u00f6sung geliefert hat und was zu tun ist,\nwenn dies nicht der Fall ist; Interpretation und Analyse numerisch erhaltener L\u00f6sungen.\nInhalt: Grundlegende Fehlerbegriffe: Datenfehler, Verfahrens- oder Diskretisierungsfehler, Rundungsfehler; Kondition mathematischer Probleme, numerische L\u00f6sung linearer\nund nichtlinearer Gleichungssysteme, polynomiale Interpolation und Approximation, numerische Integration, numerische L\u00f6sung von Differentialgleichungen, Design und Verwendung numerischer Algorithmen bzw. numerischer Software.\nDie praktische Umsetzung und Vertiefung des Stoffes der Vorlesung erfolgt in den\n\u00dcbungen durch (realit\u00e4tsnahe) numerische \u00dcbungsbeispiele. Diese beinhalten sowohl\ntheoretische Aufgabenstellungen, etwa was das Design oder die Analyse numerisch stabiler Algorithmen betrifft, als auch die praktische Implementierung und das Testen und\nBewerten am Computer. Standardsoftware kommt zum Einsatz (z.B. MATLAB).\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen: Mathematische Grundkenntnisse\nKognitive und praktische Kompetenzen: Programmierung mit MATLAB\nDiese Voraussetzungen werden in folgenden Modulen vermittelt: Algebra und Diskrete\nMathematik, Analysis, Einf\u00fchrung in die Programmierung, Grundlagen Digitaler Systeme\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Die\nVermittlung der theoretischen Grundlagen erfolgt in der Vorlesung, die Erarbeitung der\npraktische Fertigkeiten erfolgt in den w\u00f6chentlichen \u00dcbungen.\nDie Pr\u00fcfung ist m\u00fcndlich und beinhaltet eher theoretisch gehaltene Fragen zum Vorlesungsstoff, teilweise auch kurz gehaltene praktische Beispiele; die Beurteilung der\n\u00dcbungsleistung erfolgt aufgrund der Anzahl der gekreuzten Beispiele, der Tafelleistungen\nund der schriftlichen Ausarbeitung von Beispielen.",
                "lvas": [
                    {
                        "ects": "3,0",
                        "lva_typ": "VO",
                        "name": "Computernumerik",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    },
                    {
                        "ects": "1,5",
                        "lva_typ": "UE",
                        "name": "Computernumerik",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "1,0"
                    }
                ],
                "name": "Computernumerik",
                "wahl": true
            },
            {
                "ects": "6,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Vertiefte Kenntnisse in den relevanten Teilgebieten.\nKognitive und praktische Kompetenzen: Verbesserte Fertigkeiten in der Anwendung relevanter Methoden und Verfahren sowie der L\u00f6sungsdokumentation.\nSoziale Kompetenzen und Selbstkompetenzen: Verbesserte Probleml\u00f6sungskompetenz.\nInhalt: L\u00f6sung individuell vergebener Problemstellungen, wie zum Beispiel\nImplementierungs- und Simulationsaufgaben oder Modellierungs- und Analyseproblemen in einem relevanten Teilgebiet der Technischen Informatik. Anwendung der in relevanten Grundlehrveranstaltungen vermittelten Kenntnisse und Methoden an realen\nAufgabenstellungen. Rechtfertigung/Reflexion und Dokumentation der L\u00f6sung in einer\nschriftlichen Arbeit.\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen: F\u00fcr die individuelle Problemstellung relevante\nGrundkenntnisse.\nKognitive und praktische Kompetenzen: F\u00fcr die individuelle Problemstellung relevante\nFertigkeiten.\nSoziale Kompetenzen und Selbstkompetenzen: Elementare Probleml\u00f6sungskompetenz.\nDie Module, in denen die erwarteten Vorkenntnisse vermittelt werden, sind abh\u00e4ngig\nvon der individuellen Problemstellung.\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Bearbeitung der individuell vergebenen Aufgabenstellung in Einzel- oder Gruppenarbeit,\nindividuelle Betreuung.",
                "lvas": [
                    {
                        "ects": "6,0",
                        "lva_typ": "PR",
                        "name": "Praktikum Technische Informatik",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "1,0"
                    }
                ],
                "name": "Praktikum Technische Informatik",
                "wahl": true
            },
            {
                "ects": "6,0",
                "lernergebnisse": "Das Modul vermittelt Pr\u00e4misse und Ziele des parallelen Rechnens und\ngibt Einblicke in die Leistungsbewertung und -analyse von parallelen Algorithmen und\nVerfahren. Vermittelt werden allgemeine algorithmische Techniken zur Parallelisierung,\ngrundlegende Eigenschaften paralleler Rechnerarchitekturen und elementare F\u00e4higkeiten\ndes parallelen Programmierens anhand konkreter Programmiermodelle, Programmiersprachen und -schnittstellen.\nFachliche und methodische Kompetenzen: Studierende erwerben fundierte Kenntnisse\ndes parallelen Rechnens, insbesondere der Leistungsbewertung eines parallelen Algorithmus und dessen Implementierung. Studierende erwerben Kenntnisse von Schnittstellen\nund Sprachen zur Implementierung von parallelen Algorithmen, sowie deren Zusammenspiel auf unterschiedlichen Parallelrechnerarchitekturen, einschlie\u00dflich einiger etablierter\nSchnittstellen, wie z.B. OpenMP, Cilk und MPI (das \"Message-Passing Interface\"). Studierende erwerben einf\u00fchrende Kenntnisse in grundlegende algorithmische Werkzeuge\nund die Grenzen der Parallelisierbarkeit werden er\u00f6rtert.\nKognitive und praktische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen\nStudierende selbst\u00e4ndig\n\u2022   angeben, wie die Leistung eines parallelen Algorithmus theoretisch und praktisch\nzu beurteilen ist,\n\u2022   anhand vorgegebener Algorithmen und Implementierungen beurteilen, inwieweit\ndiese effizient parallelisiert worden sind oder werden k\u00f6nnen,\n\u2022   anhand von Problembeschreibungen und existierenden sequentiellen Algorithmen,\nparallele L\u00f6sungsans\u00e4tze angeben, und eventuelle Grenzen dieser Ans\u00e4tze angeben,\n\u2022   einfache parallele Algorithmen selber f\u00fcr eine daf\u00fcr geeignete Schnittstelle entwerfen und hierbei unterschiedliche Parallelisierungskonzepte, Schnittstellen und\nSprachen ber\u00fccksichtigen,\n\u2022   entwickelte Algorithmen mit Hilfe einer Schnittstelle korrekt implementieren und\nzur Lauff\u00e4higkeit bringen,\n\u2022   mittels Experimenten und Messungen die G\u00fcte der Umsetzung beurteilen.\nSoziale Kompetenzen und Selbstkompetenzen: Studierenden lernen, algorithmische Probleme zu formulieren und Ans\u00e4tze der Parallelisierung zu entwickeln und diese selbst\u00e4ndig (oder in kleineren Gruppen) korrekt zu beschreiben.\nInhalt:\n\u2022   Asymptotische Komplexit\u00e4t, Speed-up, Effizienz, Amdahlsches Gesetz.\n\u2022   Parallelrechnerarchitekturen mit gemeinsamen und verteilten Speicher ( \"shared\nand distributed memory\"), Hochleistungsrechensysteme.\n\u2022   Algorithmische Muster und Probleme wie z.B. Schablone ( \"Stencil\"), Pr\u00e4fixsumme,\nMischen, Sortieren, und allgemeine Ans\u00e4tze zur Parallelisierung.\n\u2022   Theoretische und experimentelle Leistungsanalyse und -beurteilung.\n\u2022   Datenaustausch und Kommunikationsprobleme, kollektive Kommunikationsoperationen.\n\u2022   Synchronisationsprobleme und Vermeiden von Synchronisation.\n\u2022   Einfache untere und obere Schranken f\u00fcr wichtige Kommunikationsprobleme.\n\u2022   Modelle der Parallelit\u00e4t wie \"Threads\", Prozesse, Aufgaben ( \"Tasks\").\n\u2022   Unterscheidung zwischen Daten- und Aufgaben-Parallelit\u00e4t.\n\u2022   Die Schnittstelle und Spracherweiterung OpenMP.\n\u2022   Die Spracherweiterung Cilk.\n\u2022   Die Schnittstelle MPI.\n\u2022   Weitere Schnittstellen und Sprachen f\u00fcr das parallele Programmieren.\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen: Grundlegende Kenntnisse in Algorithmen\nund Datenstrukturen, Rechnerarchitekturen, Programmiersprachen und Betriebssysteme werden erwartet und zum Teil vorausgesetzt.\nKognitive und praktische Kompetenzen: Programmierung in C oder \u00e4hnlicher Sprache.\nGrundlegende Methoden der Software-Entwicklung. Einfache asymptotische Laufzeitanalyse von Algorithmen und Datenstrukturen.\nSoziale Kompetenzen und Selbstkompetenzen: Es wird erwartet, dass Studierende vor\nAbsolvierung des Moduls\n\u2022   Programmieraufgaben selbst\u00e4ndig l\u00f6sen und\n\u2022   in Zweierteams zusammenarbeiten k\u00f6nnen.\nDieses Modul baut auf den Kenntnissen und Fertigkeiten folgender Module auf: Algorithmen und Datenstrukturen, Einf\u00fchrung in die Programmierung, Betriebssysteme und\nComputernetzwerke, Grundlagen Digitaler Systeme\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Die\nInhalte werden durch obligatorische Vorlesungen vermittelt, welche durch einen Foliensatz und begleitende Literatur unterst\u00fctzt werden. Die Projekte sind kleinere Programmieraufgaben, in denen vorgegebene Probleme in mehreren der vorgestellten Schnittstellen implementiert sowie theoretisch und praktisch analysiert werden sollen. Vorgaben\nf\u00fcr die L\u00f6sungen sowie zur Art und Form der Abgabe werden gegeben. Abgabefristen\nwerden ebenfalls vorgegeben und sind bindend. F\u00fcr die experimentelle Auswertung wird\nder Zugriff auf Parallelrechner gew\u00e4hrleistet. Die Beurteilung erfolgt anhand der abgegebenen schriftliche Projektl\u00f6sungen, sowie einer m\u00fcndliche oder auch schriftlichen\nPr\u00fcfung.",
                "lvas": [
                    {
                        "ects": "6,0",
                        "lva_typ": "VU",
                        "name": "Parallel Computing",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "4,0"
                    }
                ],
                "name": "Einf\u00fchrung in paralleles Rechnen (Parallel Computing)",
                "wahl": true
            },
            {
                "ects": "6,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Nach positiver Absolvierung des Moduls verstehen die Studierenden die theoretische Grundlagen des \u00dcbersetzerbaus und k\u00f6nnen\ndiese erkl\u00e4ren und anwenden.\nKognitive und praktische Kompetenzen: Durch die Auseinandersetzung mit Methoden\nund Werkzeugen des \u00dcbersetzerbaus erwerben die Studierenden\n\u2022   die praktische F\u00e4higkeit zur Assemblerprogrammierung und\n\u2022   die praktische F\u00e4higkeit zur Konstruktion von Parsern und \u00dcbersetzern\nSoziale Kompetenzen und Selbstkompetenzen:\n\u2022   Neugierde am \u00dcbersetzerbau\nInhalt:\n\u2022   Grundlagen von \u00dcbersetzern und Interpretern, Struktur von \u00dcbersetzern\n\u2022   Computerarchitektur\n\u2022   lexikalische Analyse (regul\u00e4re Definition, endlicher Automat)\n\u2022   Syntax-Analyse (Top-Down, Bottom-Up)\n\u2022   syntaxgesteuerte \u00dcbersetzung (attributierte Grammatik)\n\u2022   semantische Analyse, Zwischencode (Symboltabelle)\n\u2022   Zwischendarstellungen\n\u2022   Codeerzeugung (Befehlsauswahl, Befehlsanordnung, Registerbelegung)\n\u2022   Laufzeitsystem (Stackverwaltung, Heapverwaltung)\n\u2022   Optimierungen (Programmanalysen, skalare Optimierungen, Schleifenoptimierungen)\n\u2022   \u00dcbersetzung objektorientierter Konzepte (Klassendarstellung und Methodenaufruf,\nTyp\u00fcberpr\u00fcfung, Analysen)\nErwartete Vorkenntnisse:\n\u2022   theoretische Grundlagen der Informatik\n\u2022   alle zur Erstellung von Programmen notwendigen Kenntnisse\n\u2022   die praktische F\u00e4higkeit zur Konstruktion von Programmen\nDiese Voraussetzungen werden in folgenden Modulen vermittelt: Algorithmen und Datenstrukturen, Einf\u00fchrung in die Programmierung, Grundlagen Digitaler Systeme, Programmierparadigmen\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Vortrag und selbst\u00e4ndiges Erlernen der eher theoretischen Grundlagen. Labor\u00fcbung in gef\u00fchrten Kleingruppen zur Entwicklung praktischer \u00dcbersetzerentwicklungsf\u00e4higkeiten.\nDie Beurteilung erfolgt durch Pr\u00fcfung oder Tests und die Beurteilung der L\u00f6sungen von\nProgrammieraufgaben plus Abschlussgespr\u00e4ch.",
                "lvas": [
                    {
                        "ects": "6,0",
                        "lva_typ": "VU",
                        "name": "\u00dcbersetzerbau",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "4,0"
                    }
                ],
                "name": "\u00dcbersetzerbau",
                "wahl": true
            },
            {
                "ects": null,
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Vertiefte Kenntnisse in den gew\u00e4hlten Teilgebieten.\nKognitive und praktische Kompetenzen: Verbesserte Fertigkeiten in der Anwendung relevanter Methoden und Verfahren in den gew\u00e4hlten Teilgebieten.\nInhalt: Aufgenommene Module/LVAs m\u00fcssen folgende Kriterien erf\u00fcllen:\n\u2022   Umfang, Niveau und Aufwand entsprechen jenen von Pflichtlehrveranstaltungen.\n\u2022   Lehrveranstaltungen ohne \u00dcbungsanteil nur in gut begr\u00fcndeten Ausnahmef\u00e4llen.\n\u2022   Thema passend zum Qualifikationsprofil des Bachelorstudiums Technische Informatik\n\u2022   Thematische und inhaltliche Distanz zu existierenden Pflicht- und Wahllehrveranstaltungen bzw. -modulen.\nListe aufgenommener Wahl-Module und Wahl-LVAs:\n\u2022   Module: Abstrakte Maschinen, Argumentieren und Beweisen, Computernumerik,\nPraktikum Technische Informatik, Einf\u00fchrung in paralleles Rechnen (Parallel Computing), \u00dcbersetzerbau\n\u2022   Lehrveranstaltungen:\n3,0/3,0 VU Einf\u00fchrung in die Telekommunikation\n3,0/2,0 UE Programmierung von Betriebssystemen\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen: F\u00fcr die gew\u00e4hlten Module/LVAs erforderliche\nKenntnisse.\nKognitive und praktische Kompetenzen: F\u00fcr die gew\u00e4hlten Module/LVAs erforderliche\nFertigkeiten.\nDiese Voraussetzungen k\u00f6nnen in Modulen erworben werden, die in den enthaltenen\nModulen/Lehrveranstaltungen individuell angegeben sind.\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.",
                "lvas": [],
                "name": "Vertiefung Bakkalaureat Technische Informatik",
                "wahl": true
            },
            {
                "ects": "6,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen die Studierenden die unter \"Inhalt\" angef\u00fchrten Konzepte und Techniken mit fachspezifischer Terminologie beschreiben.\nKognitive und praktische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen\ndie Studierenden\n\u2022   Datenmodelle mittels ER- und EER-Diagrammen erstellen,\n\u2022   EER-Diagramme in ein relationales Schema in 3. Normalform umsetzen,\n\u2022   SQL f\u00fcr die Manipulation und Abfrage von Daten verwenden,\n\u2022   einfache Anfragen in relationaler Algebra und Relationenkalk\u00fcl verstehen und\nselbst formulieren,\n\u2022   Programmieraufgaben mit einer prozeduralen Datenbankprogrammiersprache l\u00f6sen,\n\u2022   unterschiedliche Isolations-Levels im Mehrbenutzerbetrieb gezielt einsetzen.\nSoziale Kompetenzen und Selbstkompetenzen: Nach positiver Absolvierung des Moduls\nk\u00f6nnen die Studierenden\n\u2022   gestellte Aufgaben selbst\u00e4ndig und fristgerecht l\u00f6sen,\n\u2022   die erstellten L\u00f6sungen kommunizieren und begr\u00fcnden,\n\u2022   ein deklaratives Programmierparadigma (SQL) anwenden.\nInhalt:\n\u2022   Datenbankentwurf, Datenmodellierung mittels ER- und EER-Diagrammen,\n\u2022   relationales Datenmodell,\n\u2022   Umsetzung eines EER-Diagramms in ein relationales Schema in dritter Normalform,\n\u2022   funktionale Abh\u00e4ngigkeiten, Normalformen,\n\u2022   relationale Abfragesprachen (relationale Algebra, Relationenkalk\u00fcl, SQL),\n\u2022   komplexe Schemadefinitionen (Constraints, Views),\n\u2022   komplexe SQL Abfragen (Schachtelung, Rekursion),\n\u2022   prozedurale Datenbankprogrammierung,\n\u2022   Transaktionen,\n\u2022   Fehlerbehandlung/Recovery,\n\u2022   Mehrbenutzersynchronisation.\nErwartete Vorkenntnisse:\nKognitive und praktische Kompetenzen: Es wird erwartet, dass Studierende vor Absolvierung des Moduls\n\u2022   mathematische Notationen lesen und schreiben k\u00f6nnen,\n\u2022   grundlegende Datenstrukturen und Algorithmen verwenden k\u00f6nnen,\n\u2022   eine allgemeine imperative Programmiersprache anwenden k\u00f6nnen,\n\u2022   grundlegende Formalismen der Modellierung anwenden k\u00f6nnen,\n\u2022   grundlegende Begriffe und Konzepte der Logik (Aussagenlogik, Pr\u00e4dikatenlogik)\nbeschreiben und anwenden k\u00f6nnen.\nDiese Vorkenntnisse werden in folgenden Modulen vermittelt: Algebra und Diskrete Mathematik, Einf\u00fchrung in die Programmierung, Grundlagen Digitaler Systeme.\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Die\nInhalte werden in Vortr\u00e4gen vorgestellt und in begleitenden \u00dcbungen von den Studierenden erarbeitet. Die L\u00f6sungen der \u00dcbungsaufgaben werden in Abgabegespr\u00e4chen diskutiert. Die Beurteilung erfolgt auf Basis von in den \u00dcbungen erbrachten Leistungen\nsowie schriftlichen und m\u00f6glicherweise elektronischen Tests.",
                "lvas": [
                    {
                        "ects": "6,0",
                        "lva_typ": "VU",
                        "name": "Datenbanksysteme",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "4,0"
                    }
                ],
                "name": "Datenbanksysteme",
                "wahl": true
            },
            {
                "ects": "6,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Das Modul vermittelt grundlegende Kenntnisse im Bereich Mustererkennung und ein kritisches Verst\u00e4ndnis ihrer Theorien und\nGrunds\u00e4tze:\n\u2022   Design von Mustererkennungssystemen\n\u2022   k-Nearest Neighbor Klassifkatoren\n\u2022   Bayes Theorem\n\u2022   Lineare Diskriminanzfunktionen\n\u2022   Principal Component Analysis (PCA)\n\u2022   Percpetron und Neuronale Netze\n\u2022   Entscheidungsb\u00e4ume\n\u2022   Clustering\n\u2022   Markov Modelle\n\u2022   Evaluierung von Mustererkennungssystemen\nKognitive und praktische Kompetenzen: Durch die praktische Auseinandersetzung mit aktuellen Technologien, Methoden und Werkzeugen (wie modernen Programmiersprachen\nund Entwicklungsumgebungen) werden folgende kognitiven Fertigkeiten vermittelt:\n\u2022   Einsatz formaler Grundlagen und Methoden zur Modellbildung, L\u00f6sungsfindung\nund Evaluation,\n\u2022   Methodisch fundierte Herangehensweise an Probleme, insbesondere im Umgang\nmit offenen/unspezifizierten Problemsituationen,\n\u2022   Entwurfs- und Implementierungsstrategien.\nSoziale Kompetenzen und Selbstkompetenzen: Der Schwerpunkt liegt hier auf der besonderen F\u00f6rderung hoher Kreativit\u00e4ts- und Innovationspotentiale.\n\u2022   Eigeninitiative und Neugierde,\n\u2022   Selbstorganisation, Eigenverantwortlichkeit,\n\u2022   Problemformulierungs- und Probleml\u00f6sungskompetenz,\n\u2022   Kenntnisse der eigenen F\u00e4higkeiten und Grenzen, Kritikf\u00e4higkeit\n\u2022   Teamarbeit und Grundlagen der Projektmenagment\nInhalt: Dieses Modul enth\u00e4lt Inhalte, die auch f\u00fcr die anderen Bachelor-Studien angeboten werden.\n\u2022   Statistische Grundlagen: Bias, Varianz, diskrete und stetige Merkmale, multivariate Merkmale, bedingte Verteilungen, Randverteilungen, Kovarianzmatrix,\n\u2022   Merkmalsextraktion aus Bildern\n\u2022   Einfache Klassifikatoren: Nearest Neighbor (NN), k-NN und Perceptron,\n\u2022   Bayes Theorem, Bayes Klassifikator und Lineare Diskriminanzfunktionen\n\u2022   Einf\u00fchrung in Neuronale Netze\n\u2022   Maximum Margin Klassifikatoren (z.B. Support Vector Machine)\n\u2022   Clustering und Entscheidungsb\u00e4ume\n\u2022   Anwendungsbeispiele (z.B. Biometrie, Chromosom-Klassifikation, inhaltsbasierte\nBildsuche usw.)\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen: Um dieses Modul erfolgreich absolvieren zu\nk\u00f6nnen, sind folgende Kenntnisse notwendig:\n\u2022   Mathematik auf Maturaniveau sowie Vektorrechnung, Winkelfunktionen, Differenzieren und Integrieren, lineare Algebra, einfache Geometrie\n\u2022   Elementare Programmierkenntnisse f\u00fcr die \u00dcbung\n\u2022   Vorkenntnisse aus Statistik und Wahrscheinlichkeitstheorie sind von Vorteil.\nDie Vorkenntnisse werden in folgenden Modulen vermittelt: Algebra und Diskrete Mathematik, Analysis, Einf\u00fchrung in die Programmierung, Wahrscheinlichkeitstheorie und\nStochastische Prozesse\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung:\n\u2022   Lehrveranstaltung wird als eine Frontalvorlesung mit Unterst\u00fctzung durch Medien\n(haupts\u00e4chlich Datenprojektor) abgehalten.\n\u2022   \u00dcbung wird in Einzelarbeit durchgef\u00fchrt.\n\u2022   F\u00fcr die L\u00f6sung der Aufgabenstellungen wird MATLAB eingesetzt.\n\u2022   Vorlesungsfolien und zus\u00e4tzliche Unterlagen werden zur Verf\u00fcgung gestellt.\n\u2022   Online e-Learning Plattform der TU Wien (TUWEL) wird verwendet, um Materialien zu verteilen und Administration der VO und UE zu koordinieren.",
                "lvas": [
                    {
                        "ects": "3,0",
                        "lva_typ": "VO",
                        "name": "Einf\u00fchrung in die Mustererkennung",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    },
                    {
                        "ects": "3,0",
                        "lva_typ": "UE",
                        "name": "Einf\u00fchrung in die Mustererkennung",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    }
                ],
                "name": "Einf\u00fchrung in die Mustererkennung",
                "wahl": true
            },
            {
                "ects": "8,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen die Studierenden fundamentale Konzepte, die zum Verst\u00e4ndnis der Arbeitsweise als\nauch zur Erstellung intelligenter Systeme von Bedeutung sind benennen und erl\u00e4utern\nund theoretische Zusammenh\u00e4nge korrekt argumentieren.\nKognitive und praktische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen\ndie Studierenden\n\u2022   die eingesetzten Techniken und Methoden formal analysieren,\n\u2022   Methoden und Techniken f\u00fcr eine vorgegebene Aufgabenstellung zielgerichtet ausw\u00e4hlen,\n\u2022   Aufgabenstellungen analysieren und in eine geeignete Form der Wissensrepr\u00e4sentation mit dazugeh\u00f6rigem Verarbeitungsmechanismus umsetzen, sowie\n\u2022   L\u00f6sungen kritisch bewerten.\nSoziale Kompetenzen und Selbstkompetenzen: Nach positiver Absolvierung des Moduls\nk\u00f6nnen die Studierenden erarbeitete L\u00f6sungen und Ableitungen und Beweise pr\u00e4sentieren.\nInhalt: Einf\u00fchrung in die K\u00fcnstliche Intelligenz:\n\u2022   Einf\u00fchrung und Geschichte\n\u2022   Suchverfahren\n\u2022   Constraint Satisfaction Probleme (CSP)\n\u2022   Planen\n\u2022   Lernen\n\u2022   Neuronale Netze\n\u2022   Entscheidungstheoretische Konzepte\n\u2022   Philosophische Aspekte der KI\nEinf\u00fchrung in wissensbasierte Systeme:\n\u2022   Einf\u00fchrung und geschichtlicher Hintergrund\n\u2022   Pr\u00e4dikatenlogik als Spezifikationssprache\n\u2022   Nichtmonotones Schliessen\n\u2022   Answer-set Programmierung\n\u2022   Probabilistische Verfahren\n\u2022   Entwicklung von wissensbasierten Systemen\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen: Es wird erwartet, dass die Studierenden vor\nder Absolvierung des Moduls\n\u2022   die wesentlichen Konzepte der Aussagen- und Pr\u00e4dikatenlogik erster Stufe und\n\u2022   Deduktionskonzepte und Beweisprinzipien benennen und beschreiben k\u00f6nnen.\nKognitive und praktische Kompetenzen: Es wird erwartet, dass die Studierenden vor der\nAbsolvierung des Moduls\n\u2022   Deduktionskonzepte und Beweisprinzipien zur Erstellung eigener Beweise korrekt\nanwenden,\n\u2022   die Korrektheit der einzelnen Beweisschritte formal argumentieren, sowie\n\u2022   vorgegebene Problembeschreibungen algorithmisch umsetzen k\u00f6nnen.\nDiese Voraussetzungen werden in folgenden Modulen vermittelt: Algebra und Diskrete\nMathematik, Algorithmen und Datenstrukturen, Grundlagen Digitaler Systeme, Theoretische Informatik und Logik.\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: In\nden Lehrveranstaltungen des Moduls werden Inhalte im Rahmen von Vorlesungsteilen\n(Frontalvortrag) pr\u00e4sentiert. In den begleitenden \u00dcbungen erstellen Studierende individuell und selbst\u00e4ndig L\u00f6sungen zu den Aufgaben, pr\u00e4sentieren diese (inkl. der ben\u00f6tigten Theorie) in einem Abgabegespr\u00e4ch und diskutieren mit dem verantwortlichen\nLVA-Leiter die L\u00f6sung. Im Fall der Einf\u00fchrung in Wissensbasierte Systeme ist ein zus\u00e4tzliches Projekt zu bearbeiten, zu welchem es computergenerierte und/oder pers\u00f6nliche\nR\u00fcckmeldungen gibt.\nDie Leistungsbeurteilung erfolgt durch eine schriftliche Pr\u00fcfung sowie durch eine Bewertung des Abgabegespr\u00e4chs. Zus\u00e4tzlich wird die L\u00f6sung der Projektaufgabe bewertet.",
                "lvas": [
                    {
                        "ects": "3,0",
                        "lva_typ": "VU",
                        "name": "Einf\u00fchrung in die K\u00fcnstliche Intelligenz",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    },
                    {
                        "ects": "5,0",
                        "lva_typ": "VU",
                        "name": "Einf\u00fchrung in wissensbasierte Systeme",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "3,0"
                    }
                ],
                "name": "Grundlagen intelligenter Systeme",
                "wahl": true
            },
            {
                "ects": "6,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen die Studierenden die als Modulinhalt angef\u00fchrten Konzepte und Techniken mit\nfachspezifischer Terminologie beschreiben.\nKognitive und praktische Kompetenzen: Nach positiver Absolvierung des Moduls k\u00f6nnen\ndie Studierenden\n\u2022   die als Modulinhalt angef\u00fchrten Techniken anwenden,\n\u2022   in nat\u00fcrlicher Sprache (unvollst\u00e4ndig) beschriebene Programmieraufgaben in ausf\u00fchrbare Programme umsetzen, die typische Merkmale vorgegebener Programmierstile aufweisen,\n\u2022   eigene (eventuell auch fremde) Programme nach vorgegebenen Kriterien kritisch\nbeurteilen.\nSoziale Kompetenzen und Selbstkompetenzen: Nach positiver Absolvierung des Moduls\nk\u00f6nnen die Studierenden Programmieraufgaben auch im Team l\u00f6sen.\nInhalt:\n\u2022   Typische Konzepte objektorientierter und funktionaler Programmiersprachen\n\u2022   Sprachkonzepte f\u00fcr die Modularisierung, Ersetzbarkeit, Wiederverwendung, Parametrisierung (einschlie\u00dflich Generizit\u00e4t), rekursive und applikative Programmierung, \u00dcberladung, Nebenl\u00e4ufigkeit, Eager- und Lazy-Evaluation, sowie den statischen und dynamischen Umgang mit Typen\n\u2022   Techniken zur produktiven Verwendung dieser Konzepte entsprechend der Paradigmen\n\u2022   Ausgew\u00e4hlte Entwurfsmuster\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen: Es wird erwartet, dass Studierende vor Absolvierung des Moduls\n\u2022   systematische Vorgehensweisen beim Programmieren und\n\u2022   wichtige Konzepte einer aktuellen alltagstauglichen Programmiersprache\nbeschreiben k\u00f6nnen.\nKognitive und praktische Kompetenzen: Es wird erwartet, dass Studierende vor Absolvierung des Moduls\n\u2022   Inhalte nat\u00fcrlichsprachiger Programmieraufgaben in ausf\u00fchrbare Programme umsetzen,\n\u2022   Vorgehensweisen und Werkzeuge beim Programmieren systematisch anwenden,\n\u2022   beschriebene Datenabstraktionen, Algorithmen und Datenstrukturen implementieren und\n\u2022   Techniken der objektorientierten Modellierung anwenden k\u00f6nnen.\nSoziale Kompetenzen und Selbstkompetenzen: Es wird erwartet, dass Studierende vor\nAbsolvierung des Moduls\n\u2022   Programmieraufgaben selbst\u00e4ndig l\u00f6sen und\n\u2022   in Zweierteams zusammenarbeiten k\u00f6nnen.\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Inhalte werden in Vortr\u00e4gen vorgestellt und in begleitenden \u00dcbungen von Studierenden\nerarbeitet. \u00dcbungsaufgaben sind vorwiegend Programmieraufgaben, die innerhalb vorgegebener Fristen teilweise in Teams zu l\u00f6sen sind. Die Beurteilung erfolgt auf Basis einer\nkontinuierlichen \u00dcberpr\u00fcfung der L\u00f6sungen dieser Aufgaben sowie durch Pr\u00fcfung(en)\nbzw. Test(s).",
                "lvas": [
                    {
                        "ects": "3,0",
                        "lva_typ": "VU",
                        "name": "Objektorientierte Programmiertechniken",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    },
                    {
                        "ects": "3,0",
                        "lva_typ": "VU",
                        "name": "Funktionale Programmierung",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    }
                ],
                "name": "Programmierparadigmen",
                "wahl": true
            },
            {
                "ects": "6,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen:\n\u2022   Anforderungen und Designm\u00f6glichkeiten komplexer, verteilter Systeme verstehen\n\u2022   Grundlegende Methoden und Algorithmen verteilter Systeme verstehen, sowie deren Vor- und Nachteile und Einsatzm\u00f6glichkeiten kennen\n\u2022   Paradigmen und Konzepte aktueller Technologien und Werkzeuge f\u00fcr verteilte Systeme verstehen und anwenden k\u00f6nnen\n\u2022   Anwendungsgrenzen (v. a. asynchroner) verteilter Systeme kennen und verstehen\nKognitive und praktische Kompetenzen: Durch die Auseinandersetzung mit Methoden\nund Werkzeugen der Programmierung k\u00f6nnen die Studierenden\n\u2022   Methodiken zur Abstraktion anwenden,\n\u2022   methodisch fundiert an Probleme herangehen,\n\u2022   L\u00f6sungen kritisch bewerten und reflektieren und\n\u2022   Konzepte verteilter Systeme mit aktuellen Technologien in Form einfacher, verteilter Anwendungen umsetzen.\nSoziale Kompetenzen und Selbstkompetenzen: Folgende Kompetenzen werden besonders\ngef\u00f6rdert:\n\u2022   Selbstorganisation und Eigenverantwortlichkeit\n\u2022   Finden kreativer Probleml\u00f6sungen\n\u2022   Kritische Reflexion, Bewertung und Analyse technischer Alternativans\u00e4tze\nInhalt:\n\u2022   Verteilte Systeme \u2013 \u00dcbersicht, Grundlagen und Modelle\n\u2022   Prozesse und Kommunikation\n\u2022   Benennung\n\u2022   Fehlertoleranz in verteilten Systemen\n\u2022   Synchronisierung\n\u2022   Konsistenz und Replikation\n\u2022   Verteilte Dateisysteme\n\u2022   Sicherheit\n\u2022   Anwendungen und Technologietrends\nErwartete Vorkenntnisse:\nDieses Modul baut auf den Kenntnissen, Fertigkeiten und Kompetenzen folgender Module auf: Algorithmen und Datenstrukturen, Einf\u00fchrung in die Programmierung\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung:\nBlended Learning:\n\u2022   Den Studierenden wird empfohlen, vor der jeweiligen Vorlesung die auf der LVAHomepage angegebenen Kapitel des Lehrbuchs zu lesen.\n\u2022   Im Rahmen der Vorlesung wird die Theorie erl\u00e4utert und Querverbindungen hergestellt. Es besteht die M\u00f6glichkeit, komplexe Sachverhalte interaktiv (durch Fragen\nder Studierenden) zu erarbeiten.\n\u2022   Im Rahmen der parallel laufenden Labor\u00fcbungen werden ausgew\u00e4hlte Themen der\nLehrveranstaltung durch kleine Programmieraufgaben vertieft.",
                "lvas": [
                    {
                        "ects": "3,0",
                        "lva_typ": "VO",
                        "name": "Verteilte Systeme",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    },
                    {
                        "ects": "3,0",
                        "lva_typ": "UE",
                        "name": "Verteilte Systeme",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    }
                ],
                "name": "Verteilte Systeme",
                "wahl": true
            },
            {
                "ects": "8,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Nach erfolgreicher Absolvierung des Moduls\nk\u00f6nnen die Studierenden Folgendes beschreiben bzw. erkl\u00e4ren\n\u2022   wie Unternehmen organisiert sind und warum welche Funktionen in einem dynamischen und unsicheren Gesch\u00e4ftsumfeld erforderlich sind\n\u2022   welche Managementsysteme in den verschiedenen Bereichen des Unternehmens\neingesetzt werden, wie sie sich unterscheiden, welche jeweiligen Besonderheiten es\nzu beachten gilt\n\u2022   was Kosten sind, wie Kosten von Prozessen, Unternehmensbereichen und ganzen\nUnternehmen aus dem Rechnungswesen abgeleitet werden, wie die im Unternehmen erstellten Sach- und Dienstleistungen kostenm\u00e4\u00dfig bewertet werden\n\u2022   wie Gesch\u00e4ftsf\u00e4llen im Rechnungswesen abgebildet werden, wie die Bilanz und\nG&V (Gewinn- & Verlustrechnung) erstellt wird, wie eine Jahresabschlussanalyse\nmit Kennzahlen durchgef\u00fchrt wird, wie Sicherungsgesch\u00e4ften im Rechnungswesen\nabgebildet werden\nKognitive und praktische Kompetenzen: Nach erfolgreicher Absolvierung des Moduls k\u00f6nnen die Studierenden Folgendes durchf\u00fchren\n\u2022   Design angemessener Managementsysteme in den verschiedenen Unternehmensbereichen\n\u2022   Kostenarten-, Kostenstellen- und Kostentr\u00e4gerrechnung\n\u2022   Prozessorientierte Kostenrechnung (Activity Based Costing/ABC-Analyse)\n\u2022   Verbuchung von Gesch\u00e4ftsf\u00e4llen im Hauptbuch\n\u2022   Analyse von IFRS-Jahresabschl\u00fcssen\nSoziale Kompetenzen und Selbstkompetenzen: Nach erfolgreicher Absolvierung des Moduls sollten die Studierenden Folgendes beherrschen\n\u2022   Denken in Modellen und entsprechende Abstraktion\n\u2022   Kritisch reflektierte Denkweise\n\u2022   Erweitern der individuellen Problemschau und Erlangen der Einsicht in die Prozesse der Kreativit\u00e4t bzw. der Verbesserung des individuellen Probleml\u00f6sungsverhaltens\n\u2022   Selbstorganisation und eigenverantwortliches Denken\n\u2022   Teamf\u00e4higkeit, Anpassungsf\u00e4higkeit, Eigenverantwortung und Neugierde\nInhalt: Grundlagen der Unternehmensf\u00fchrung\n\u2022   Produktions-Management\n\u2022   Logistik-Management\n\u2022   Qualit\u00e4ts- und Projekt-Management\n\u2022   Absatz-Management\n\u2022   Innovations-Management\n\u2022   Strategisches Management\n\u2022   Cash- und Finanz-Management\n\u2022   Kosten-Management\n\u2022   Erfolgs-Management\n\u2022   Personal-Management\n\u2022   Organisations-Management und Arbeitsgestaltung\n\u2022   Management der Unternehmensgrenzen und -kooperationen\nKosten- und Leistungsrechnung\n\u2022   Grundlagen der Produktions- und Kostentheorie\n\u2022   Prozessorientierte Kostenrechnung (Activity Based Costing)\n\u2022   Gesetzliche Kostenrechnung: Kostenarten-, Kostenstellen- und Kostentr\u00e4gerrechnung\n\u2022   Plankostenrechnung: Kostenplanung und Kontrolle von Kosten\nRechnungswesen\n\u2022   Grundlagen des Rechnungswesen (inkl. IFRS (International Financial Reporting\nStandards))\n\u2022   IFRS-Jahresabschl\u00fcsse\n\u2022   Kennzahlenanalyse\n\u2022   Abbildung von Beschaffungs-, Absatz- und Produktionsprozessen sowie von Finanzgesch\u00e4ften\n\u2022   Hedge-Accounting\nErwartete Vorkenntnisse: Keine.\nVerpflichtende Voraussetzungen: Keine.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Pr\u00e4sentation der Inhalte in Vorlesungsteilen mit reflektierender Diskussion; Vertiefung der\nInhalte durch \u00dcbungen teilweise auch auf einer e-Learning-Plattform.",
                "lvas": [
                    {
                        "ects": "3,0",
                        "lva_typ": "VO",
                        "name": "Grundlagen der Unternehmensf\u00fchrung",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    },
                    {
                        "ects": "3,0",
                        "lva_typ": "VU",
                        "name": "Kosten- und Leistungsrechnung",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "2,0"
                    },
                    {
                        "ects": "2,0",
                        "lva_typ": "VU",
                        "name": "Rechnungswesen",
                        "not_steop_constrained": false,
                        "semester": null,
                        "sst": "1,5"
                    }
                ],
                "name": "Grundlagen der Betriebswirtschaft",
                "wahl": true
            },
            {
                "ects": null,
                "lernergebnisse": "Fachliche und methodische Kompetenzen: Vertiefte Kenntnisse in den gew\u00e4hlten Teilgebieten.\nKognitive und praktische Kompetenzen: Verbesserte Fertigkeiten in der Anwendung relevanter Methoden und Verfahren in den gew\u00e4hlten Teilgebieten.\nInhalt: Aufgenommene Module/LVAs m\u00fcssen folgende Kriterien erf\u00fcllen:\n\u2022   Umfang, Niveau und Aufwand entsprechend Pflicht-LVAs/Modulen\n\u2022   LVA/Modul ohne UE-Anteil nur in gut begr\u00fcndeten Ausnahmef\u00e4llen\n\u2022   Thema passend zum Qualifikationsprofil der TI\n\u2022   Thematische und inhaltliche Distanz zu existierenden Pflicht- und WahlLVAs/Modulen\n\u2022   Verbreiterungs-LVAs/Module m\u00fcssen Pflicht oder Wahlpflicht in einem ordentlichen Bakk-Studium an der TU sein\nListe aufgenommener Wahl-Module und Wahl-LVAs:\n\u2022   Module: Datenbanksysteme, Einf\u00fchrung in die Mustererkennung, Grundlagen intelligenter Systeme, Programmierparadigmen, Verteilte Systeme, Grundlagen der\nBetriebswirtschaft\n\u2022   Lehrveranstaltungen:\n3,0/2,0 VU Introduction to Security\n3,0/2,0 VU Objektorientierte Modellierung\nErwartete Vorkenntnisse:\nFachliche und methodische Kompetenzen: F\u00fcr die gew\u00e4hlten Module/LVAs erforderliche\nKenntnisse.\nKognitive und praktische Kompetenzen: F\u00fcr die gew\u00e4hlten Module/LVAs erforderliche\nFertigkeiten.\nDiese Voraussetzungen k\u00f6nnen in Modulen erworben werden, die in den enthaltenen\nModulen/Lehrveranstaltungen individuell angegeben sind.\nVerpflichtende Voraussetzungen: Studieneingangs- und Orientierungsphase.",
                "lvas": [],
                "name": "Verbreiterung Bakkalaureat Technische Informatik",
                "wahl": true
            }
        ],
        "name": "Vertiefung/Verbreiterung"
    },
    {
        "module": [
            {
                "ects": "18,0",
                "lernergebnisse": "Die Lehrveranstaltungen dieses Moduls dienen der Vertiefung des Faches sowie der Aneignung au\u00dferfachlicher Kenntnisse, F\u00e4higkeiten und Kompetenzen.\nInhalt: Abh\u00e4ngig von den gew\u00e4hlten Lehrveranstaltungen.\nErwartete Vorkenntnisse: Abh\u00e4ngig von den gew\u00e4hlten Lehrveranstaltungen.\nVerpflichtende Voraussetzungen: Abh\u00e4ngig von den gew\u00e4hlten Lehrveranstaltungen.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Abh\u00e4ngig von den gew\u00e4hlten Lehrveranstaltungen.",
                "lvas": [],
                "name": "Freie Wahlf\u00e4cher und Transferable Skills",
                "wahl": false
            }
        ],
        "name": "Freie Wahlf\u00e4cher und Transferable Skills"
    },
    {
        "module": [
            {
                "ects": "13,0",
                "lernergebnisse": "Fachliche und methodische Kompetenzen:\n\u2022   Wissenschaftliche Methodik\n\u2022   Internationaler Wissenschaftsbetrieb\nKognitive und praktische Kompetenzen:\n\u2022   Systematische Recherche\n\u2022   Pr\u00e4sentationstechniken\n\u2022   Strukturierte und konzise Kommunikation von Inhalten in m\u00fcndlicher und schriftlicher Form\n\u2022   F\u00e4higkeit zur Anwendung der im Studium erworbenen Kenntnisse und Fertigkeiten\nim Kontext einer gr\u00f6\u00dferen Problemstellung\nSoziale Kompetenzen und Selbstkompetenzen:\n\u2022   Selbstorganisation\n\u2022   Eigenverantwortlichkeit und Eigeninitiative\n\u2022   Teamf\u00e4higkeit\n\u2022   Finden kreativer Probleml\u00f6sungen\n\u2022   Reflexion der eigenen Arbeit im technischen und gesellschaftlichen Kontext\nInhalt: Im Rahmen des Seminars Wissenschaftliches Arbeiten lernen die Studierenden\nwissenschaftliche Methoden und den Wissenschaftsbetrieb kennen. An Hand eines vorgegebenen Themas \u00fcben sie Recherche sowie schriftliche und m\u00fcndliche Pr\u00e4sentation.\nDarauf aufbauend wenden sie im Projekt Bachelorarbeit f\u00fcr Informatik und Wirtschaftsinformatik die im Studium erworbenen Kenntnisse und Fertigkeiten auf ein Thema an,\ndas dem Qualifikationsprofil des Studiums entspricht. Die erzielten Ergebnisse werden neben der Aufgabenstellung, den angewandten Methoden und dem Umfeld in einer schriftlichen Abschlussarbeit dargestellt.\nErwartete Vorkenntnisse: Die Arbeit an der Bachelorarbeit erfordert die Kenntnisse,\nFertigkeiten und Kompetenzen zumindest der Pflichtmodule des Bachelorstudiums.\nVerpflichtende Voraussetzungen: Positive Absolvierung der Studieneingangs- und\nOrientierungsphase.\nAngewendete Lehr- und Lernformen und geeignete Leistungsbeurteilung: Im\nSeminar besteht bei den Vortr\u00e4gen zu Wissenschaftsmethodik und -betrieb sowie bei der\nPr\u00e4sentation der Rechercheergebnisse Anwesenheitspflicht, ebenso bei der Pr\u00e4sentation\nder Bachelorarbeiten. Davon abgesehen k\u00f6nnen das Seminar- und das Bachelorarbeitsthema in Absprache mit den Lehrenden zeitlich und \u00f6rtlich weitgehend ungebunden\nbearbeitet werden. Die Beurteilung orientiert sich an der Qualit\u00e4t und Originalit\u00e4t der\nm\u00fcndlichen und schriftlichen Darstellung der Themen sowie der daf\u00fcr notwendigen Vorarbeiten und ber\u00fccksichtigt auch das Engagement bei der Diskussion der Arbeiten anderer Studierender.",
                "lvas": [
                    {
                        "ects": "10,0",
                        "lva_typ": "PR",
                        "name": "Bachelorarbeit f\u00fcr Informatik und Wirtschaftsinformatik",
                        "not_steop_constrained": false,
                        "semester": "6. Semester (SS)",
                        "sst": "5,0"
                    },
                    {
                        "ects": "3,0",
                        "lva_typ": "SE",
                        "name": "Wissenschaftliches Arbeiten",
                        "not_steop_constrained": false,
                        "semester": "5. Semester (WS)",
                        "sst": "2,0"
                    }
                ],
                "name": "Bachelorarbeit",
                "wahl": false
            }
        ],
        "name": "Bachelorarbeit"
    }
]